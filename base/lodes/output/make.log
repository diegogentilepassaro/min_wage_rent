
 make.py started: 2020-11-03 12:11:13 /Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/base/lodes/code 




Execute:  R CMD BATCH --no-save "./make_lodes_ziplevel.R" make_lodes_ziplevel.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> options(scipen=999)
> load_packages(c('tidyverse', 'data.table', 'bit64', 'purrr', 'readxl'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank

> 
> main <- function() {
+   datadir_lodes <- '../../../drive/raw_data/lodes/'
+   datadir_xwalk <- '../../../raw/crosswalk/'
+   outdir <- '../../../drive/base_large/output/'
+   
+   xwalk <- make_xwalk(datadir_xwalk)
+   
+   tract_zip_xwalk <- read_excel(paste0(datadir_xwalk, "TRACT_ZIP_122012.xlsx"), 
+                                 col_names = c('tract_fips', 'zipcode', 'res_ratio', 'bus_ratio', 'oth_ratio', 'tot_ratio'),
+                                 col_types = c('numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
+   tract_zip_xwalk <- setDT(tract_zip_xwalk)
+   tract_zip_xwalk[, c('res_ratio', 'bus_ratio', 'oth_ratio'):= NULL]
+   tract_zip_xwalk <- tract_zip_xwalk[!is.na(zipcode), ]
+   
+   
+   #Datasets:
+   # Point of View (pov) : statistics for either residents ('rac') or workers ('wac') in given geographies
+   # Segment (seg)       : job earnings
+   # Type (type)         : all jobs
+   
+   # Zipcode as workplace: all workers
+   lodes_wac_all_all <- format_lodes(pov = 'wac', 
+                                     seg = 'S000', 
+                                     type = 'JT00', 
+                                     vintage = '2017', 
+                                     instub = datadir_lodes, 
+                                     xw = xwalk, 
+                                     xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as residence: all workers
+   lodes_rac_all_all <- format_lodes(pov = 'rac', 
+                                     seg = 'S000', 
+                                     type = 'JT00', 
+                                     vintage = '2017', 
+                                     instub = datadir_lodes, 
+                                     xw = xwalk, 
+                                     xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as workplace: low income workers
+   lodes_wac_el_all <- format_lodes(pov = 'wac', 
+                                    seg = 'SE01', 
+                                    type = 'JT00', 
+                                    vintage = '2017', 
+                                    instub = datadir_lodes, 
+                                    xw = xwalk, 
+                                    xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as residence: low income workers
+   lodes_rac_el_all <- format_lodes(pov = 'rac', 
+                                    seg = 'SE01', 
+                                    type = 'JT00', 
+                                    vintage = '2017', 
+                                    instub = datadir_lodes, 
+                                    xw = xwalk, 
+                                    xw_tractzip = tract_zip_xwalk)
+   
+   
+   lodes_list <- list(lodes_wac_all_all, lodes_rac_all_all, lodes_wac_el_all, lodes_rac_el_all)
+   
+   lodes_final <- Reduce(function(x,y) merge(x,y, all = T, by = c('zipcode')), lodes_list)
+   
+   lodes_final <- make_final_vars(lodes_final)
+   
+   save_data(lodes_final, 
+             filename = paste0(outdir, 'zip_lodes.dta'), 
+             key = c('zipcode'))
+   
+   return(lodes_final)
+ }
> 
> make_final_vars <- function(data) {
+   data[, walall_29y_lowinc_zsh := welall_njob_29young / walall_tot]
+   data[, halall_29y_lowinc_zsh := helall_njob_29young / halall_tot]
+   
+   data[, c('w_sttot', 'h_sttot') :=lapply(.SD, function(x) sum(x, na.rm = T)), by = 'st', .SDcols = c('welall_njob_29young', 'helall_njob_29young')]
+ 
+   data[, walall_29y_lowinc_ssh := lapply(.SD, function(x) x / w_sttot), .SDcols = c('welall_njob_29young')]
+   data[, halall_29y_lowinc_ssh := lapply(.SD, function(x) x / h_sttot), .SDcols = c('helall_njob_29young')]
+   
+   data[, c('w_sttot', 'h_sttot') := NULL]
+   
+   vars <- c('walall_njob_29young_zsh', 
+             'walall_njob_29young_ssh', 
+             'halall_njob_29young_zsh', 
+             'halall_njob_29young_ssh', 
+             'welall_njob_29young_zsh', 
+             'welall_njob_29young_ssh', 
+             'walall_29y_lowinc_zsh', 
+             'walall_29y_lowinc_ssh', 
+             'halall_29y_lowinc_zsh', 
+             'halall_29y_lowinc_ssh')
+   
+   vars <- c('zipcode', vars)
+   
+   data <- data[, ..vars]
+   return(data)
+   
+ }
> 
> make_xwalk <- function(instub) {
+   xwalk_files <- list.files(paste0(instub, 'lodes/'), full.names = T)
+   xwalk <- rbindlist(lapply(xwalk_files, function(x) fread(x)))
+   setnames(xwalk, old = c('tabblk2010', 'trct'), new = c('blockfips', 'tract_fips'))
+   target_xwalk <- c('blockfips', 'tract_fips', 'st')
+   xwalk[, tract_fips := as.numeric(tract_fips)]
+   xwalk <- xwalk[, ..target_xwalk]
+   
+   return(xwalk)
+ }
> 
> format_lodes <- function(pov, seg, type, vintage, instub, xw, xw_tractzip) {
+   
+   files <- list.files(paste0(instub, pov, '/', seg, '/', type, '/', vintage), full.names = T)
+   files <- files[!grepl("Icon\r$", files)]
+   
+   df <- rbindlist(lapply(files, function(x) fread(x)))
+   
+   target_vars <- c('C000', 'CA01', 'CE01', 'CR02', 'CD01', 'CD02')
+   target_names <- c('tot', 'njob_29young', 'njob_lowinc', 'njob_black', 'njob_nohs', 'njob_hs')
+   final_names <- c('blockfips', target_names)
+   if (pov=='rac') {
+     setnames(df, old = c('h_geocode', target_vars), new = final_names)
+   } else if (pov=='wac') {
+     setnames(df, old = c('w_geocode', target_vars), new = final_names)
+   }
+   df <- df[, ..final_names]
+   
+   df[, 'njob_lowedu' := njob_nohs + njob_hs][, c('njob_nohs', 'njob_hs'):= NULL]
+   target_names <- c(target_names[1:(length(target_names)-2)], 'njob_lowedu')
+   
+   dftract <- xw[df, on = 'blockfips'][, 'blockfips':= NULL]
+   dftract <- dftract[, lapply(.SD,sum, na.rm = T),by=c('tract_fips', 'st')]
+   
+   dfzip <- dftract[xw_tractzip, on = 'tract_fips']
+   dfzip <- dfzip[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w=tot_ratio), 
+                   by = c('zipcode', 'st'), .SDcols = target_names]
+   
+   pr <- set_prefix(p = pov, s = seg, t = type)
+   setnames(dfzip, old = target_names, new = paste(pr, target_names, sep = '_'))
+   
+   dfzip <- make_shares(data = dfzip, 
+                         vnames = paste(pr, target_names, sep = '_'))
+   
+   sortvar <- names(dfzip)[grepl("tot$", names(dfzip))]
+   setorderv(dfzip, c('zipcode',sortvar))
+   dfzip <-  dfzip[dfzip[, .I[.N], zipcode]$V1]
+   
+   if ((pov!='rac') | (pov=='rac' & (seg!='S000' | type!='JT00'))) {
+     dfzip[, st := NULL]
+   }
+   
+   return(dfzip)
+ }
> 
> make_shares <- function(data, vnames, state.share = TRUE) {
+   
+   denom <- vnames[grepl("tot$", vnames)]
+   vnames <- vnames[!grepl("tot$", vnames)]
+   
+   zsh_names <- paste0(vnames, '_zsh')
+   
+   data[, (zsh_names) := lapply(.SD, function(x) x / data[[denom]]), .SDcols = vnames]
+   
+   if (state.share == TRUE) {
+     data[, st_tot:=lapply(.SD, function(x) sum(x, na.rm = T)), by = 'st', .SDcols = denom]
+     ssh_names <- paste0(vnames, '_ssh')
+     data[, (ssh_names) := lapply(.SD, function(x) x / st_tot), .SDcols = vnames]
+     data[, st_tot := NULL]
+   }
+   #data[, (vnames) := NULL]
+   
+   return(data)
+ }
> 
> set_prefix <- function(p, s, t) {
+   if (p=='rac') prefix <- 'h' else if (p=='wac') prefix <- 'w'
+   
+   if (s=='S000') {prefix <- paste0(prefix, 'al')}      # all jobs
+   else if (s=="SE01") {prefix <- paste0(prefix, 'el')} # earnings lo w
+   else if (s=='SE02') {prefix <- paste0(prefix, 'em')} # earnings med
+   else if (s=='SE03') {prefix <- paste0(prefix, 'eh')} # earnings high
+   else if (s=='SA01') {prefix <- paste0(prefix, 'ay')} # age young
+   else if (s=='SA02') {prefix <- paste0(prefix, 'am')} # age med
+   else if (s=='SA03') {prefix <- paste0(prefix, 'ao')} # age old
+   else if (s=='SI01') {prefix <- paste0(prefix, 'ip')} # industry product, goods
+   else if (s=='SI02') {prefix <- paste0(prefix, 'it')} # industry trade, transports
+   else if (s=='SI03') {prefix <- paste0(prefix, 'io')} # industry other
+   
+   if (t=='JT00') {prefix <- paste0(prefix, 'all')}        # all jobs
+   else if (t=='JT01') {prefix <- paste0(prefix, 'main')}  # main job s
+   else if (t=='JT02') {prefix <- paste0(prefix, 'priv')}  # all private jobs
+   else if (t=='JT03') {prefix <- paste0(prefix, 'mpriv')} # main private jobs
+   else if (t=='JT04') {prefix <- paste0(prefix, 'fed')}   # federal job
+   else if (t=='JT05') {prefix <- paste0(prefix, 'mfed')}  # main federal job
+   
+   
+   return(prefix) 
+ }
> 
> 
> #Execute
> main()
[1] "File '../../../drive/base_large/output/zip_lodes.dta' saved successfully."
       zipcode walall_njob_29young_zsh walall_njob_29young_ssh
    1:     501               0.2751284        0.00000002487566
    2:     544               0.2751284        0.00000002487566
    3:     601                     NaN                     NaN
    4:     602                     NaN                     NaN
    5:     603                     NaN                     NaN
   ---                                                        
38889:   99925                     NaN                     NaN
38890:   99926                     NaN                     NaN
38891:   99927                     NaN                     NaN
38892:   99928                     NaN                     NaN
38893:   99929                     NaN                     NaN
       halall_njob_29young_zsh halall_njob_29young_ssh welall_njob_29young_zsh
    1:               0.2329579        0.00000002715921                   0.555
    2:               0.2329579        0.00000002715921                   0.555
    3:                     NaN                     NaN                     NaN
    4:                     NaN                     NaN                     NaN
    5:                     NaN                     NaN                     NaN
   ---                                                                        
38889:               0.3333333        0.00034106412005                     NaN
38890:               0.0000000        0.00000000000000                     NaN
38891:               0.3636364        0.00045475216007                     NaN
38892:               0.2222222        0.00000152091023                     NaN
38893:               0.0000000        0.00000000000000                     NaN
       welall_njob_29young_ssh walall_29y_lowinc_zsh walall_29y_lowinc_ssh
    1:        0.00000006943779              0.162876       0.0000001739612
    2:        0.00000006943779              0.162876       0.0000001739612
    3:                     NaN                   NaN                   NaN
    4:                     NaN                   NaN                   NaN
    5:                     NaN                   NaN                   NaN
   ---                                                                    
38889:                     NaN                   NaN                   NaN
38890:                     NaN                   NaN                   NaN
38891:                     NaN                   NaN                   NaN
38892:                     NaN                   NaN                   NaN
38893:                     NaN                   NaN                   NaN
       halall_29y_lowinc_zsh halall_29y_lowinc_ssh
    1:            0.09602845       0.0000001288607
    2:            0.09602845       0.0000001288607
    3:                   NaN                   NaN
    4:                   NaN                   NaN
    5:                   NaN                   NaN
   ---                                            
38889:            0.00000000       0.0000000000000
38890:            0.00000000       0.0000000000000
38891:            0.27272727       0.0027624309392
38892:            0.11111111       0.0000061592663
38893:            0.00000000       0.0000000000000
There were 50 or more warnings (use warnings() to see the first 50)
> 
> proc.time()
   user  system elapsed 
384.300  28.500 114.636 


Execute:  R CMD BATCH --no-save "./make_odmatrix_ziplevel.R" make_odmatrix_ziplevel.Rout
ERROR! Command R CMD BATCH --no-save "./make_odmatrix_ziplevel.R" make_odmatrix_ziplevel.Rout executed with errors 
Command 'R CMD BATCH --no-save "./make_odmatrix_ziplevel.R" make_odmatrix_ziplevel.Rout' returned non-zero exit status 1

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> options(scipen=999)
> load_packages(c('tidyverse', 'data.table', 'bit64', 'purrr', 'readxl', 'parallel'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank

> 
> main <- function() {
+   datadir_lodes <- '../../../drive/raw_data/lodes/od/JT00/2017/'
+   datadir_xwalk <- '../../../raw/crosswalk/'
+   outdir        <- '../../../drive/base_large/output/'
+   
+   #prepare crosswalks 
+   xwalk_list <- make_xwalk(datadir_xwalk)
+   blc_tract_xwalk <- xwalk_list[[1]]
+   tract_zip_xwalk <- xwalk_list[[2]]
+   rm(xwalk_list)
+   
+   #Prepare states od matrices: 
+   files <- list.files(datadir_lodes, full.names = T)
+   files <- files[!grepl("Icon\r$", files)]
+   files_main <- files[grepl("_main_", files)]
+   files_aux <- files[grepl("_aux_", files)]
+   
+   state_list <- c(tolower(state.abb), 'dc')
+   
+   aux_all <- rbindlist(lapply(files_aux, function(x) fread(x)))
+   aux_all[, h_statefips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0),1 , 2))]
+   
+   odzip <- lapply(state_list, make_odmatrix_state)
+     
+ }
> 
> make_xwalk <- function(instub) { #crosswalk function
+   xwalk_files <- list.files(paste0(instub, 'lodes/'), full.names = T)
+   xwalk <- rbindlist(lapply(xwalk_files, function(x) fread(x)))
+   setnames(xwalk, old = c('tabblk2010', 'trct'), new = c('blockfips', 'tract_fips'))
+   target_xwalk <- c('blockfips', 'tract_fips', 'st')
+   xwalk[, tract_fips := as.numeric(tract_fips)]
+   xwalk <- xwalk[, ..target_xwalk]
+   
+   tract_zip_xwalk <- read_excel(paste0(instub, "TRACT_ZIP_122012.xlsx"), 
+                                 col_names = c('tract_fips', 'zipcode', 'res_ratio', 'bus_ratio', 'oth_ratio', 'tot_ratio'),
+                                 col_types = c('numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'))
+   tract_zip_xwalk <- setDT(tract_zip_xwalk)
+   tract_zip_xwalk[, c('res_ratio', 'bus_ratio', 'oth_ratio'):= NULL]
+   tract_zip_xwalk <- tract_zip_xwalk[!is.na(zipcode), ]
+   
+   return(list(xwalk, tract_zip_xwalk))
+ }
> 
> make_odmatrix_state <- function(x, datadir = datadir_lodes, out = outdir, aux = aux_all, xwalk = tract_zip_xwalk) {
+   #for each state (lapply): 
+   this_state <- fread(paste0(datadir, x, '_od_main_JT00_2017.csv.gz'))
+   this_fips <- as.numeric(substr(str_pad(this_state$h_geocode[1], 15, pad = 0),1 , 2))
+   this_aux <- aux[h_statefips==this_fips,][, h_statefips:=NULL]
+   this_state <- rbindlist(list(this_state, this_aux))
+   
+   this_state <- this_state[, c('w_geocode', 'h_geocode', 'S000', 'SA01', 'SE01')]
+   setnames(this_state, old = c('S000', 'SA01', 'SE01'), new = c('totjob', 'job_young', 'job_lowinc'))
+   
+   #collapse at tract level
+   this_state[, w_tractfips := as.numeric(substr(str_pad(w_geocode, 15, pad = 0), 1, 11))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T), 
+                            .SDcols = c('totjob', 'job_young', 'job_lowinc'), 
+                            by = c('h_geocode', 'w_tractfips')]
+   this_state[, h_tractfips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0), 1, 11))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T), 
+                            .SDcols = c('totjob', 'job_young', 'job_lowinc'), 
+                            by = c('h_tractfips', 'w_tractfips')]
+   
+   #define function to crosswalk destination tract to zipcode for each origin tract separately
+   tract_to_zip_work <- function(data, xwlk = xwalk) {
+     data <- data[xwlk, on = c('w_tractfips' = 'tract_fips'), nomatch = 0]
+     data <- data[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w=tot_ratio), 
+                  by = c('h_tractfips', 'zipcode'), .SDcols = c('totjob', 'job_young', 'job_lowinc')]
+     setnames(data, old = 'zipcode', new = 'w_zipcode')
+     return(data)
+   }
+   #define function to crosswalk origin tract to zipcode for each destination zipcode separately
+   tract_to_zip_home <- function(data, xwlk = xwalk) {
+     data <- data[xwlk, on = c('h_tractfips' = 'tract_fips'), nomatch = 0]
+     data <- data[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w=tot_ratio), 
+                  by = c('w_zipcode', 'zipcode'), .SDcols = c('totjob', 'job_young', 'job_lowinc')]
+     setnames(data, old = 'zipcode', new = 'h_zipcode')
+     return(data)
+   }
+   
+   this_state_zip <- split(this_state, by = 'h_tractfips')
+   this_state_zip <- rbindlist(lapply(this_state_zip, tract_to_zip_work))
+   this_state_zip <- split(this_state_zip, by = 'w_zipcode')
+   this_state_zip <- rbindlist(lapply(this_state_zip, tract_to_zip_home))
+   
+   this_state_zip <- this_state_zip[order(h_zipcode, - totjob)]
+   this_state_zip[, 'h_totjob' := sum(totjob, na.rm = T), by = 'h_zipcode']
+   this_state_zip[, 'totjob_cum' := cumsum(totjob), by = 'h_zipcode'] 
+   this_state_zip[, 'totjob_cumsh' := totjob_cum / h_totjob]
+   this_state_zip <- this_state_zip[totjob_cumsh<=.9, ][, c('h_totjob', 'totjob_cum', 'totjob_cumsh'):=NULL] #keep only destination zipcode that make up to 90 percent of total workforce
+   
+   this_fips <- str_pad(this_fips, 2, pad = 0)
+   save_data(this_state_zip, filename = paste0(out, 'odzip_', this_fips, '.csv'), key = c('h_zipcode', 'w_zipcode'))
+ }
> 
> 
> main() 
Error in paste0(datadir, x, "_od_main_JT00_2017.csv.gz") : 
  object 'datadir_lodes' not found
Calls: main -> lapply -> FUN -> fread -> paste0
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Execution halted
