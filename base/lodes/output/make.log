
 make.py started: 2021-04-23 11:23:20 /Volumes/GoogleDrive/My Drive/Brown/research/min_wage_rent/base/lodes/code 




Execute:  R CMD BATCH --no-save "./make_odmatrix.R" make_odmatrix.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> options(scipen=999)
> 
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> source("make_xwalk.R")
> 
> paquetes <- c("tidyverse", "data.table", "bit64", "purrr", "parallel")
> load_packages(paquetes)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank

> 
> library(parallel)
> n_cores <- 10
> 
> main <- function(paquetes, n_cores) {
+   datadir_lodes       <- "../../../drive/raw_data/lodes/od/JT00/2017/"
+   datadir_xwalk       <- "../../geo_master/output/"
+   datadir_xwalk_lodes <- "../../../raw/crosswalk/"
+   outdir              <- "../../../drive/base_large/lodes/"
+ 
+   # Prepare crosswalks 
+   blc_tract_xwalk <- make_xwalk_raw_wac(datadir_xwalk_lodes)
+   tract_zip_xwalk <- make_xwalk_tractzip(datadir_xwalk)
+ 
+   # Prepare states od matrices
+   files <- list.files(datadir_lodes, 
+                       full.names = T, pattern = "*.gz")
+ 
+   files <- files[!grepl("pr", files)]          # Ignore Puerto Rico
+   
+   files_main <- files[grepl("_main_", files)]
+   files_aux  <- files[grepl("_aux_", files)]
+   
+   state_list <- c(tolower(state.abb), "dc")
+   
+   aux_all <- rbindlist(lapply(files_aux, fread))
+   aux_all[, h_statefips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0), 1, 2))]
+   
+   # Parallel set-up
+   cl <- makeCluster(n_cores, type = "PSOCK")   # Create cluster. Use type = "FORK" in Mac
+   
+   clusterExport(cl, "paquetes")                                         # Load "paquetes" object in nodes
+   clusterEvalQ(cl, lapply(paquetes, require, character.only = TRUE))    # Load packages in nodes
+   clusterExport(cl, "make_odmatrix_state", env = .GlobalEnv)            # Load global environment objects in nodes
+   clusterExport(cl, c("datadir_lodes", "aux_all", "tract_zip_xwalk"), 
+                     env = environment())                                # Load local environment objects in nodes
+ 
+   odzip_list <- parLapply(cl, state_list, function(y) {
+     make_odmatrix_state(stabb = y, datadir = datadir_lodes,
+                         aux = aux_all, xwalk = tract_zip_xwalk)
+   })
+   stopCluster(cl)
+   
+   # Save OD matrices  
+   for (state in odzip_list) {
+     save_data(state$dt, key = c("h_zipcode", "w_zipcode"),
+               filename = file.path(outdir, paste0("odzip_", state$fips, ".csv")),
+               logfile  = "../output/odmatrix_data_manifest.log")
+   }
+   
+   list_of_file_names <- list.files(outdir, pattern = "odzip_*", full.names = T)
+   odzip_list <- lapply(list_of_file_names, fread)
+   
+   # Compute share that work in same zipcode
+   odzip_list <- lapply(odzip_list, function(dt.st) {
+     dt.st[, c("residents_tot", "residents_young", "resident_lowinc") := 
+           list(sum(totjob),    sum(job_young),    sum(job_lowinc)),
+           by = "h_zipcode"]
+ 
+     dt.st <- dt.st[h_zipcode == w_zipcode]
+     setnames(dt.st, old = "h_zipcode", new = "zipcode")
+     dt.st[, w_zipcode := NULL]
+ 
+     dt.st[, share_tot    := totjob/residents_tot]
+     dt.st[, share_young  := job_young/residents_young]
+     dt.st[, share_lowinc := job_lowinc/resident_lowinc]
+ 
+     return(dt.st)
+   })
+ 
+   dt.shares <- rbindlist(odzip_list)
+   dt.shares[, zipcode := str_pad(zipcode, 5, pad = 0)]
+   save_data(dt.shares, key = c("zipcode"), 
+             filename = file.path(outdir, "zipcode_own_shares.csv"), 
+             logfile  = "../output/shares_data_manifest.log")
+             
+   save_data(dt.shares, key = c("zipcode"), 
+             filename = file.path(outdir, "zipcode_own_shares.dta"), 
+             logfile  = "../output/shares_data_manifest.log")
+ }
> 
> 
> make_odmatrix_state <- function(stabb, datadir, aux, xwalk, dest_threshold = 1) {
+   
+   this_state <- fread(paste0(datadir, stabb, "_od_main_JT00_2017.csv.gz"))
+   this_fips  <- as.numeric(substr(str_pad(this_state$h_geocode[1], 15, pad = 0),1 , 2))
+   this_aux   <- aux[h_statefips==this_fips,][, h_statefips := NULL]
+ 
+   this_state <- rbindlist(list(this_state, this_aux))
+   
+   this_state <- this_state[, c("w_geocode", "h_geocode", "S000", "SA01", "SE01")]
+   setnames(this_state, old = c("S000",   "SA01",      "SE01"), 
+                        new = c("totjob", "job_young", "job_lowinc"))
+   
+   # Collapse at tract level
+   this_state[, w_tractfips := as.numeric(substr(str_pad(w_geocode, 15, pad = 0), 1, 11))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T),
+                            .SDcols = c("totjob", "job_young", "job_lowinc"), 
+                            by = c("h_geocode", "w_tractfips")]
+   this_state[, h_tractfips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0), 1, 11))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T),
+                            .SDcols = c("totjob", "job_young", "job_lowinc"),
+                            by = c("h_tractfips", "w_tractfips")]
+   
+   # Define function to crosswalk destination tract to zipcode for each origin tract separately
+   tract_to_zip_work <- function(data, xwlk = xwalk) {
+ 
+     data <- data[xwlk, on = c("w_tractfips" = "tract_fips"), nomatch = 0]
+     data <- data[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w = res_ratio), 
+                           .SDcols = c("totjob", "job_young", "job_lowinc"), 
+                           by = c("h_tractfips", "zipcode")]
+     
+     setnames(data, old = "zipcode", new = "w_zipcode")
+     return(data)
+   }
+ 
+   # Define function to crosswalk origin tract to zipcode for each destination zipcode separately
+   tract_to_zip_home <- function(data, xwlk = xwalk) {
+ 
+     data <- data[xwlk, on = c("h_tractfips" = "tract_fips"), nomatch = 0]
+     data <- data[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w = res_ratio),
+                           .SDcols = c("totjob", "job_young", "job_lowinc"), 
+                           by = c("w_zipcode", "zipcode")]
+     
+     setnames(data, old = "zipcode", new = "h_zipcode")
+     return(data)
+   }
+   
+   this_state_zip <- split(this_state, by = "h_tractfips")
+   this_state_zip <- rbindlist(lapply(this_state_zip, tract_to_zip_work))
+   this_state_zip <- split(this_state_zip, by = "w_zipcode")
+   this_state_zip <- rbindlist(lapply(this_state_zip, tract_to_zip_home))
+   
+   # Keep destination zipcodes that make up to `dest_threshold` percent of total workforce
+   this_state_zip <- this_state_zip[order(h_zipcode, -totjob)]
+ 
+   this_state_zip[, h_totjob     := sum(totjob, na.rm = T), by = "h_zipcode"]
+   this_state_zip[, totjob_cum   := cumsum(totjob), by = "h_zipcode"] 
+   this_state_zip[, totjob_cumsh := totjob_cum / h_totjob]
+ 
+   this_state_zip <- this_state_zip[totjob_cumsh <= dest_threshold, ]
+   this_state_zip[, c("h_totjob", "totjob_cum", "totjob_cumsh") := NULL]
+   this_state_zip[, h_zipcode := str_pad(h_zipcode, 5, pad = 0)]
+   this_state_zip[, w_zipcode := str_pad(w_zipcode, 5, pad = 0)]
+   
+   return(list("dt"   = this_state_zip,
+               "fips" = str_pad(this_fips, 2, pad = 0)))
+ }
> 
> # Execute
> main(paquetes, n_cores) 
[1] "File '../../../drive/base_large/lodes//odzip_01.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_02.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_04.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_05.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_06.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_08.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_09.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_10.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_12.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_13.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_15.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_16.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_17.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_18.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_19.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_20.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_21.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_22.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_23.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_24.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_25.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_26.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_27.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_28.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_29.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_30.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_31.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_32.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_33.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_34.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_35.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_36.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_37.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_38.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_39.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_40.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_41.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_42.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_44.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_45.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_46.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_47.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_48.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_49.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_50.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_51.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_53.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_54.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_55.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_56.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odzip_11.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//zipcode_own_shares.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//zipcode_own_shares.dta' saved successfully."
[1] "Log file generated successfully."
> 
> 
> proc.time()
    user   system  elapsed 
 615.522   41.735 5484.991 


Execute:  R CMD BATCH --no-save "./make_odmatrix_county.R" make_odmatrix_county.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> options(scipen=999)
> 
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> source("make_xwalk.R")
> 
> paquetes <- c("tidyverse", "data.table", "bit64", "purrr", "parallel")
> load_packages(paquetes)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank

> 
> library(parallel)
> n_cores <- 10
> 
> main <- function(paquetes, n_cores) {
+   datadir_lodes       <- "../../../drive/raw_data/lodes/od/JT00/2017/"
+   datadir_xwalk_lodes <- "../../../raw/crosswalk/"
+   outdir              <- "../../../drive/base_large/lodes/"
+   
+   # Prepare crosswalks 
+   blc_cty_xwalk <- make_xwalk_raw_wac_county(datadir_xwalk_lodes)
+   
+   # Prepare states od matrices
+   files <- list.files(datadir_lodes, 
+                       full.names = T, pattern = "*.gz")
+   
+   files <- files[!grepl("pr", files)]          # Ignore Puerto Rico
+   
+   files_main <- files[grepl("_main_", files)]
+   files_aux  <- files[grepl("_aux_", files)]
+   
+   state_list <- c(tolower(state.abb), "dc")
+   
+   aux_all <- rbindlist(lapply(files_aux, fread))
+   aux_all[, h_statefips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0), 1, 2))]
+   
+   # Parallel set-up
+   cl <- makeCluster(n_cores, type = "PSOCK")   # Create cluster. Use type = "FORK" in Mac
+   
+   clusterExport(cl, "paquetes")                                         # Load "paquetes" object in nodes
+   clusterEvalQ(cl, lapply(paquetes, require, character.only = TRUE))    # Load packages in nodes
+   clusterExport(cl, "make_odmatrix_state", env = .GlobalEnv)            # Load global environment objects in nodes
+   clusterExport(cl, c("datadir_lodes", "aux_all"), 
+                 env = environment())                                # Load local environment objects in nodes
+   
+   odcounty_list <- parLapply(cl, state_list, function(y) {
+     make_odmatrix_state(stabb = y, datadir = datadir_lodes,
+                         aux = aux_all)
+   })
+   stopCluster(cl)
+   
+   # Save OD matrices  
+   for (state in odcounty_list) {
+     save_data(state$dt, key = c("h_countyfips", "w_countyfips"),
+               filename = file.path(outdir, paste0("odcounty_", state$fips, ".csv")),
+               logfile  = "../output/odmatrix_data_manifest.log")
+   }
+ 
+   list_of_file_names <- list.files(outdir, pattern = "odcounty_*", full.names = T)
+   odcounty_list <- lapply(list_of_file_names, fread)
+   
+   # Compute share that work in same zipcode
+   odcounty_list <- lapply(odcounty_list, function(dt.st) {
+     dt.st[, c("residents_tot", "residents_young", "resident_lowinc") := 
+             list(sum(totjob),    sum(job_young),    sum(job_lowinc)),
+           by = "h_countyfips"]
+     
+     dt.st <- dt.st[h_countyfips == w_countyfips]
+     setnames(dt.st, old = "h_countyfips", new = "countyfips")
+     dt.st[, w_countyfips := NULL]
+     
+     dt.st[, share_tot    := totjob/residents_tot]
+     dt.st[, share_young  := job_young/residents_young]
+     dt.st[, share_lowinc := job_lowinc/resident_lowinc]
+     
+     return(dt.st)
+   })
+   
+   dt.shares <- rbindlist(odcounty_list)
+   dt.shares[, countyfips := str_pad(countyfips, 5, pad = 0)]
+   save_data(dt.shares, key = c("countyfips"), 
+             filename = file.path(outdir, "county_own_shares.csv"), 
+             logfile  = "../output/shares_data_manifest.log")
+   
+   save_data(dt.shares, key = c("countyfips"), 
+             filename = file.path(outdir, "county_own_shares.dta"), 
+             logfile  = "../output/shares_data_manifest.log")
+ }
> 
> 
> make_odmatrix_state <- function(stabb, datadir, aux, xwalk, dest_threshold = 1) {
+   
+   this_state <- fread(paste0(datadir, stabb, "_od_main_JT00_2017.csv.gz"))
+   this_fips  <- as.numeric(substr(str_pad(this_state$h_geocode[1], 15, pad = 0),1 , 2))
+   this_aux   <- aux[h_statefips==this_fips,][, h_statefips := NULL]
+   
+   this_state <- rbindlist(list(this_state, this_aux))
+   
+   this_state <- this_state[, c("w_geocode", "h_geocode", "S000", "SA01", "SE01")]
+   setnames(this_state, old = c("S000",   "SA01",      "SE01"), 
+            new = c("totjob", "job_young", "job_lowinc"))
+   
+   # Collapse at tract level
+   this_state[, w_countyfips := as.numeric(substr(str_pad(w_geocode, 15, pad = 0), 1, 5))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T),
+                            .SDcols = c("totjob", "job_young", "job_lowinc"), 
+                            by = c("h_geocode", "w_countyfips")]
+   this_state[, h_countyfips := as.numeric(substr(str_pad(h_geocode, 15, pad = 0), 1, 5))]
+   this_state <- this_state[, lapply(.SD, sum, na.rm = T),
+                            .SDcols = c("totjob", "job_young", "job_lowinc"),
+                            by = c("h_countyfips", "w_countyfips")]
+   
+   
+   # Keep destination zipcodes that make up to `dest_threshold` percent of total workforce
+   this_state <- this_state[order(h_countyfips, -totjob)]
+   
+   this_state[, h_totjob     := sum(totjob, na.rm = T), by = "h_countyfips"]
+   this_state[, totjob_cum   := cumsum(totjob), by = "h_countyfips"] 
+   this_state[, totjob_cumsh := totjob_cum / h_totjob]
+   
+   this_state <- this_state[totjob_cumsh <= dest_threshold, ]
+   this_state[, c("h_totjob", "totjob_cum", "totjob_cumsh") := NULL] 
+   this_state[, h_countyfips := str_pad(h_countyfips, 5, pad = 0)]
+   this_state[, w_countyfips := str_pad(w_countyfips, 5, pad = 0)]
+   
+   return(list("dt"   = this_state,
+               "fips" = str_pad(this_fips, 2, pad = 0)))
+ }
> 
> # Execute
> main(paquetes, n_cores) 
[1] "File '../../../drive/base_large/lodes//odcounty_01.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_02.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_04.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_05.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_06.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_08.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_09.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_10.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_12.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_13.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_15.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_16.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_17.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_18.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_19.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_20.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_21.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_22.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_23.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_24.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_25.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_26.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_27.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_28.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_29.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_30.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_31.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_32.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_33.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_34.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_35.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_36.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_37.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_38.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_39.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_40.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_41.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_42.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_44.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_45.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_46.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_47.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_48.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_49.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_50.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_51.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_53.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_54.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_55.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_56.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//odcounty_11.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//county_own_shares.csv' saved successfully."
[1] "File '../../../drive/base_large/lodes//county_own_shares.dta' saved successfully."
[1] "Log file generated successfully."
> 
>     
> 
> proc.time()
   user  system elapsed 
682.518  88.291 885.884 


Execute:  R CMD BATCH --no-save "./make_lodes.R" make_lodes.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> source("make_xwalk.R")
> 
> options(scipen=999)
> load_packages(c('tidyverse', 'data.table', 'bit64', 
+                 'purrr', 'readxl', 'parallel', 'R.utils'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank

Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.1 (2020-08-26 16:20:06 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.24.0 (2020-08-26 16:11:58 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following object is masked from ‘package:bit’:

    clone

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.10.1 (2020-08-26 22:50:31 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:tidyr’:

    extract

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, nullfile, parse,
    warnings

> 
> main <- function() {
+   datadir_lodes       <- '../../../drive/raw_data/lodes/'
+   datadir_xwalk_lodes <- '../../../raw/crosswalk/'
+   datadir_xwalk       <- '../../geo_master/output/'
+   outdir              <- '../../../drive/base_large/lodes/'
+   log_file            <- '../output/data_file_manifest.log'
+   
+   xwalk <- make_xwalk_raw_wac(datadir_xwalk_lodes)
+   
+   tract_zip_xwalk <- fread(paste0(datadir_xwalk, "tract_zip_master.csv"), 
+                            colClasses = c('numeric', 'numeric', 'numeric'))
+   
+   #Datasets:
+   # Point of View (pov) : statistics for either residents ('rac') or workers ('wac') in given geographies
+   # Segment (seg)       : job earnings
+   # Type (type)         : all jobs
+   
+   # Zipcode as workplace: all workers
+   lodes_wac_all_all <- format_lodes(pov = 'wac', 
+                                     seg = 'S000', 
+                                     type = 'JT00', 
+                                     vintage = '2017', 
+                                     instub = datadir_lodes, 
+                                     xw = xwalk, 
+                                     xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as residence: all workers
+   lodes_rac_all_all <- format_lodes(pov = 'rac', 
+                                     seg = 'S000', 
+                                     type = 'JT00', 
+                                     vintage = '2017', 
+                                     instub = datadir_lodes, 
+                                     xw = xwalk, 
+                                     xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as workplace: low income workers
+   lodes_wac_el_all <- format_lodes(pov = 'wac', 
+                                    seg = 'SE01', 
+                                    type = 'JT00', 
+                                    vintage = '2017', 
+                                    instub = datadir_lodes, 
+                                    xw = xwalk, 
+                                    xw_tractzip = tract_zip_xwalk)
+   
+   # Zipcode as residence: low income workers
+   lodes_rac_el_all <- format_lodes(pov = 'rac', 
+                                    seg = 'SE01', 
+                                    type = 'JT00', 
+                                    vintage = '2017', 
+                                    instub = datadir_lodes, 
+                                    xw = xwalk, 
+                                    xw_tractzip = tract_zip_xwalk)
+   
+   
+   lodes_list <- list(lodes_wac_all_all, lodes_rac_all_all, lodes_wac_el_all, lodes_rac_el_all)
+   
+   lodes_final <- Reduce(function(x,y) merge(x,y, all = T, by = c('zipcode')), lodes_list)
+   
+   lodes_final <- make_final_vars(lodes_final)
+   
+   lodes_final[, zipcode := str_pad(zipcode, 5, pad = 0)]
+   save_data(lodes_final, key = c('zipcode'),
+             filename = paste0(outdir, 'zip_lodes.dta'),
+             logfile = log_file)
+ }
> 
> format_lodes <- function(pov, seg, type, vintage, instub, xw, xw_tractzip) {
+   
+   files <- list.files(paste0(instub, pov, '/', seg, '/', type, '/', vintage), full.names = T)
+   files <- files[!grepl("Icon\r$", files)]
+   files <- files[!grepl("pr", files)]          # Ignore Puerto Rico
+   files <- files[!grepl("desktop.ini", files)] # Ignore desktop.ini
+   
+   df <- rbindlist(lapply(files, fread))
+   
+   target_vars <- c('C000', 'CA01', 'CE01', 'CR02', 'CD01', 'CD02')
+   target_names <- c('tot', 'njob_29young', 'njob_lowinc', 'njob_black', 'njob_nohs', 'njob_hs')
+   final_names <- c('blockfips', target_names)
+   if (pov=='rac') {
+     setnames(df, old = c('h_geocode', target_vars), new = final_names)
+   } else if (pov=='wac') {
+     setnames(df, old = c('w_geocode', target_vars), new = final_names)
+   }
+   df <- df[, ..final_names]
+   
+   df[, 'njob_lowedu' := njob_nohs + njob_hs][, c('njob_nohs', 'njob_hs'):= NULL]
+   target_names <- c(target_names[1:(length(target_names)-2)], 'njob_lowedu')
+   
+   dftract <- xw[df, on = 'blockfips'][, 'blockfips':= NULL]
+   
+   dftract <- dftract[, lapply(.SD, sum, na.rm = T),by=c('tract_fips', 'st')]
+   
+   
+   dfzip <- dftract[xw_tractzip, on = 'tract_fips']
+   
+   dfzip <- dfzip[, lapply(.SD, function(x, w) sum(x*w, na.rm = T), w=res_ratio), 
+                   by = c('zipcode', 'st'), .SDcols = target_names]
+   
+   pr <- set_prefix(p = pov, s = seg, t = type)
+   setnames(dfzip, old = target_names, new = paste(pr, target_names, sep = '_'))
+   
+   dfzip <- make_shares(data = dfzip, 
+                         vnames = paste(pr, target_names, sep = '_'))
+   
+   sortvar <- names(dfzip)[grepl("tot$", names(dfzip))]
+   setorderv(dfzip, c('zipcode',sortvar))
+   dfzip <-  dfzip[dfzip[, .I[.N], zipcode]$V1]
+   
+   if ((pov!='rac') | (pov=='rac' & (seg!='S000' | type!='JT00'))) {
+     dfzip[, st := NULL]
+   }
+   
+   return(dfzip)
+ }
> 
> make_shares <- function(data, vnames, state.share = TRUE) {
+   
+   denom <- vnames[grepl("tot$", vnames)]
+   vnames <- vnames[!grepl("tot$", vnames)]
+   
+   zsh_names <- paste0(vnames, '_zsh')
+   
+   data[, (zsh_names) := lapply(.SD, function(x) x / data[[denom]]), .SDcols = vnames]
+   
+   if (state.share == TRUE) {
+     data[, st_tot:=lapply(.SD, function(x) sum(x, na.rm = T)), by = 'st', .SDcols = denom]
+     ssh_names <- paste0(vnames, '_ssh')
+     data[, (ssh_names) := lapply(.SD, function(x) x / st_tot), .SDcols = vnames]
+     data[, st_tot := NULL]
+   }
+   
+   return(data)
+ }
> 
> set_prefix <- function(p, s, t) {
+   if (p=='rac') prefix <- 'h' else if (p=='wac') prefix <- 'w'
+   
+   if (s=='S000') {prefix <- paste0(prefix, 'al')}      # all jobs
+   else if (s=="SE01") {prefix <- paste0(prefix, 'el')} # earnings lo w
+   else if (s=='SE02') {prefix <- paste0(prefix, 'em')} # earnings med
+   else if (s=='SE03') {prefix <- paste0(prefix, 'eh')} # earnings high
+   else if (s=='SA01') {prefix <- paste0(prefix, 'ay')} # age young
+   else if (s=='SA02') {prefix <- paste0(prefix, 'am')} # age med
+   else if (s=='SA03') {prefix <- paste0(prefix, 'ao')} # age old
+   else if (s=='SI01') {prefix <- paste0(prefix, 'ip')} # industry product, goods
+   else if (s=='SI02') {prefix <- paste0(prefix, 'it')} # industry trade, transports
+   else if (s=='SI03') {prefix <- paste0(prefix, 'io')} # industry other
+   
+   if (t=='JT00') {prefix <- paste0(prefix, 'all')}        # all jobs
+   else if (t=='JT01') {prefix <- paste0(prefix, 'main')}  # main job s
+   else if (t=='JT02') {prefix <- paste0(prefix, 'priv')}  # all private jobs
+   else if (t=='JT03') {prefix <- paste0(prefix, 'mpriv')} # main private jobs
+   else if (t=='JT04') {prefix <- paste0(prefix, 'fed')}   # federal job
+   else if (t=='JT05') {prefix <- paste0(prefix, 'mfed')}  # main federal job
+   
+   
+   return(prefix) 
+ }
> 
> make_final_vars <- function(data) {
+   data[, walall_29y_lowinc_zsh := welall_njob_29young / walall_tot]
+   data[, halall_29y_lowinc_zsh := helall_njob_29young / halall_tot]
+   
+   data[, c('w_sttot', 'h_sttot') := lapply(.SD, function(x) sum(x, na.rm = T)), 
+        by = 'st', .SDcols = c('welall_njob_29young', 'helall_njob_29young')]
+ 
+   data[, walall_29y_lowinc_ssh := lapply(.SD, function(x) x / w_sttot), 
+         .SDcols = c('welall_njob_29young')]
+   data[, halall_29y_lowinc_ssh := lapply(.SD, function(x) x / h_sttot), 
+         .SDcols = c('helall_njob_29young')]
+   
+   data[, c('w_sttot', 'h_sttot') := NULL]
+   
+   vars <- c('walall_njob_29young_zsh',  'walall_njob_29young_ssh', 
+             'halall_njob_29young_zsh',  'halall_njob_29young_ssh', 
+             'walall_njob_lowinc_zsh',   'walall_njob_lowinc_ssh', 
+             'halall_njob_lowinc_zsh',   'halall_njob_lowinc_ssh',
+             'walall_29y_lowinc_zsh',    'walall_29y_lowinc_ssh', 
+             'halall_29y_lowinc_zsh',    'halall_29y_lowinc_ssh')
+   
+   vars <- c('zipcode', vars)
+   
+   return(data[, ..vars])
+ }
> 
> 
> # Execute
> main()
[1] "File '../../../drive/base_large/lodes/zip_lodes.dta' saved successfully."
[1] "Log file generated successfully."
> 
> proc.time()
   user  system elapsed 
785.919  80.293 272.074 

 make.py ended: 2021-04-23 13:14:05
