
 make.py started: 2022-02-23 16:02:04 C:\Users\shermo\Documents\GitHub\min_wage_rent\base\census_blocks_centroids\code 




Execute:  R CMD BATCH --no-save "./compute_centroids.R" compute_centroids.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> 
> paquetes <- c("sf", "dplyr")
> lapply(paquetes, require, character.only = TRUE)
Loading required package: sf
Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1
Loading required package: dplyr

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

[[1]]
[1] TRUE

[[2]]
[1] TRUE

> 
> library(parallel)
> n_cores <- 12
> 
> set.seed(42)
> 
> main <- function(paquetes, n_cores) {
+ 
+   instub  <- "../temp"
+   outstub <- "../../../drive/base_large/census_blocks_centroids"
+   
+   logfile <- "../output/activity.txt"
+ 
+   write(sprintf("%s: Conversion started.\n", Sys.time()), 
+         file = logfile)
+   
+   files <- list.files(path = instub, pattern = "*.shp$")
+ 
+   # Parallel set-up
+   cl <- makeCluster(n_cores, type = "PSOCK")   # Create cluster. Use type = "FORK" in Mac
+   
+   clusterExport(cl, "paquetes")                                         # Load "paquetes" object in nodes
+   clusterEvalQ(cl, lapply(paquetes, require, character.only = TRUE))    # Load packages in nodes
+   clusterExport(cl, "compute_centroids",  env = .GlobalEnv)             # Load global environment objects in nodes
+   clusterExport(cl, c("instub", "files"), env = environment())          # Load local environment objects in nodes
+   
+   write(sprintf("%s: Parallelization set, %s cores.\n", Sys.time(), n_cores), 
+         file = logfile, append = T)
+ 
+   centroids <- parLapply(cl, files, function(ff) {
+     st_fips <- gsub("2010", "", gsub("[^0-9]", "", ff))
+         
+     spf <- compute_centroids(instub, ff)
+     return(spf)
+   })
+   stopCluster(cl)
+   
+   centroids <- bind_rows(centroids)
+   
+   write(sprintf("%s: Conversion ended.\n", Sys.time()), 
+         file = logfile, append = T)
+ 
+   st_write(centroids,
+            file.path(outstub, "census_blocks_2010_centroids.shp"))
+ }
> 
> compute_centroids <- function(instub, filename){
+ 
+   spf <- read_sf(file.path(instub, filename)) %>%
+     select(STATEFP10, COUNTYFP10, TRACTCE10,
+            BLOCKID10, HOUSING10, POP10) %>%
+     rename(statefips    = STATEFP10,
+            countyfips   = COUNTYFP10, 
+            census_tract = TRACTCE10,
+            census_block = BLOCKID10, 
+            num_houses10 = HOUSING10,
+            pop10        = POP10)
+   
+   spf      <- spf[st_is_valid(spf),] ## Is this necessary? It takes some time to check
+   spf_cent <- st_centroid(spf)
+   
+   cent_own_poly <- 
+     sapply(1:dim(spf)[1], function(i) {
+       test <- st_intersects(spf_cent[i, ]$geometry, spf[i,]$geometry)[[1]]
+       
+       if (length(test) == 0) {  # When return is empty
+         return(0)
+       } else {
+         return(1)
+       }
+     })
+   
+   spf$cent_own_poly      <- cent_own_poly
+   spf_cent$cent_own_poly <- cent_own_poly
+   
+   if ( !(all(cent_own_poly == 1)) ) {
+     
+     spf_cent_new <- st_point_on_surface(spf %>% filter(cent_own_poly == 0))
+     
+     spf_cent <- bind_rows(spf_cent %>% filter(cent_own_poly == 1), 
+                           spf_cent_new)
+     
+   }
+   
+   return(spf_cent)
+ }
> 
> # Execute
> main(paquetes, n_cores) 
Writing layer `census_blocks_2010_centroids' to data source 
  `../../../drive/base_large/census_blocks_centroids/census_blocks_2010_centroids.shp' using driver `ESRI Shapefile'
Writing 11078297 features with 7 fields and geometry type Point.
Warning messages:
1: In abbreviate_shapefile_names(obj) :
  Field names abbreviated for ESRI Shapefile driver
2: In CPL_write_ogr(obj, dsn, layer, driver, as.character(dataset_options),  :
  GDAL Message 1: 2GB file size limit reached for ../../../drive/base_large/census_blocks_centroids\census_blocks_2010_centroids.dbf. Going on, but might cause compatibility issues with third party software
> 
> proc.time()
    user   system  elapsed 
  495.03   588.23 37806.03 

 make.py ended: 2022-02-24 02:36:53
