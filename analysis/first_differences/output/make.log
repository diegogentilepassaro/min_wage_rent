
 make.py started: 2020-09-27 18:22:06 /Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/analysis/first_differences/code 




Traceback (most recent call last):
  File "/Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/analysis/first_differences/code/gslab_make/run_program.py", line 158, in run_stata
    run.execute_run(command)
  File "/Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/analysis/first_differences/code/gslab_make/private/runprogramdirective.py", line 194, in execute_run
    subprocess.check_call(command, shell = True, stdout = TEMPFILE, stderr = TEMPFILE)
  File "/Users/gabriborg/anaconda3/anaconda3/envs/py2/lib/python2.7/subprocess.py", line 185, in check_call
    retcode = call(*popenargs, **kwargs)
  File "/Users/gabriborg/anaconda3/anaconda3/envs/py2/lib/python2.7/subprocess.py", line 172, in call
    return Popen(*popenargs, **kwargs).wait()
  File "/Users/gabriborg/anaconda3/anaconda3/envs/py2/lib/python2.7/subprocess.py", line 1099, in wait
    pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
  File "/Users/gabriborg/anaconda3/anaconda3/envs/py2/lib/python2.7/subprocess.py", line 125, in _eintr_retry_call
    return func(*args)
KeyboardInterrupt


Execute:  stataSE -e do "./preclean.do"


Execute:  stataSE -e do "./first_differences.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.1   Copyright 1985-2019 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

120-user Stata network perpetual license:
       Serial number:  401606201670
         Licensed to:  Brown University
                       Brown University

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./first_differences.do 

. clear all

. set more off

. adopath + ../../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "/Applications/Stata/ado/base/"
  [2]  (SITE)      "/Applications/Stata/ado/site/"
  [3]              "."
  [4]  (PERSONAL)  "/Users/gabriborg/Documents/Stata/ado/personal/"
  [5]  (PLUS)      "/Users/gabriborg/Library/Application Support/Stata/ado/plus/"
  [6]  (OLDPLACE)  "~/ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"

. adopath + ../../../lib/stata/min_wage/ado
  [1]  (BASE)      "/Applications/Stata/ado/base/"
  [2]  (SITE)      "/Applications/Stata/ado/site/"
  [3]              "."
  [4]  (PERSONAL)  "/Users/gabriborg/Documents/Stata/ado/personal/"
  [5]  (PLUS)      "/Users/gabriborg/Library/Application Support/Stata/ado/plus/"
  [6]  (OLDPLACE)  "~/ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"
  [8]              "../../../lib/stata/min_wage/ado"

. set maxvar 32000 


. 
. program main
  1.         local instub "../temp"
  2.         local outstub "../output"
  3. 
.         local housetype "sfcc 2br mfr5plus"
  4. 
.         foreach type in `housetype' {
  5. 
. /*              ** Balanced panel
>                 use "`instub'/fd_rent_panel.dta", clear
>                 * Static Model
>                 run_static_model, depvar(ln_med_rent_psqft_`type') absorb(year_month)     
>                                       ///
>                         cluster(statefips)
> 
>                 esttab * using "`outstub'/fd_table_`type'.tex", keep(D.ln_mw) compress se 
> replace                       ///
>                         stats(zs_trend zs_trend_sq r2 N, fmt(%s3 %s3 %9.3f %9.0g)         
>       ///
>                         labels("Zipcode-specifc linear trend"                             
>                                                       ///
>                         "Zipcode-specific linear and square trend"                        
>                                       ///
>                         "R-squared" "Observations")) star(* 0.10 ** 0.05 *** 0.01)        
>                                       ///
>                         nonote
>                 
>                 * Dynamic Model
>                 run_dynamic_model, depvar(ln_med_rent_psqft_`type') absorb(year_month)    
>                               ///
>                         cluster(statefips) type(`type') sampl(bal)
>                 
>                 esttab reg1 reg2 reg3 using "`outstub'/fd_dynamic_table_`type'.tex",      
>                               ///
>                         keep(*.ln_mw) compress se replace                                 
>                                                               ///
>                         stats(p_value_F zs_trend zs_trend_sq r2 N, fmt(%9.3f %s3 %s3 %9.3f
>  %9.0g)               ///
>                         labels("P-value no pretrends" "Zipcode-specifc linear trend"      
>                                                                               ///
>                         "Zipcode-specific linear and square trend"                        
>                                       ///
>                         "R-squared" "Observations")) star(* 0.10 ** 0.05 *** 0.01)        
>                                       ///
>                         nonote
> 
>                 esttab lincom1 lincom2 lincom3 using "`outstub'/fd_dynamic_lincom_table_`t
> ype'.tex", ///
>                         compress se replace                                               
>                                                                       ///
>                 stats(zs_trend zs_trend_sq N, fmt(%s3 %s3 %9.0g)                          
>       ///
>                         labels("Zipcode-specifc linear trend"                             
>                                                       ///
>                     "Zipcode-specific linear and square trend" ///
>                         "Observations"))                                ///
>                         star(* 0.10 ** 0.05 *** 0.01)                                     
>                                                               ///
>                         nonote coeflabel((1) "Sum of MW effects")
>          
>                 * Heterogeneity
>                 foreach var in med_hhinc20105 renthouse_share2010 college_share20105      
>                       ///
>                                         black_share2010 {
> 
>                         build_ytitle, var(`var')
> 
>                         run_static_heterogeneity, depvar(ln_med_rent_psqft_`type') absorb(
> year_month)                   ///
>                                 het_var(`var'_st_qtl) cluster(statefips) ytitle(`r(title)'
> )
>                         graph export "`outstub'/fd_static_`type'_heter_`var'.png", replace
>                 } */
. 
.                 ** Unbalanced Panel 
.                 use "`instub'/unbal_fd_rent_panel.dta", clear
  6.                 
.                 * Static Model
.                 run_static_model, depvar(ln_med_rent_psqft_`type') absorb(year_month entry
> _`type'#year_month)                   ///
>                         type(`type') cluster(statefips)
  7. 
.                 esttab * using "`outstub'/unb_fd_table_`type'.tex", keep(D.ln_mw) compress
>  se replace                   ///
>                         stats(zs_trend zs_trend_sq r2 N, fmt(%s3 %s3 %9.3f %9.0g)         
>       ///
>                         labels("Zipcode-specifc linear trend"                             
>                                                       ///
>                         "Zipcode-specific linear and square trend"                        
>                                       ///
>                         "R-squared" "Observations")) star(* 0.10 ** 0.05 *** 0.01)        
>                                       ///
>                         nonote
  8.                 
.                 * Dynamic Model
.                 run_dynamic_model, depvar(ln_med_rent_psqft_`type') absorb(year_month entr
> y_`type'#year_month)                                  ///
>                         cluster(statefips) type(`type') sampl(unbal)
  9.                 
.                 esttab reg1 reg2 reg3 using "`outstub'/unb_fd_dynamic_table_`type'.tex",  
>                                       ///
>                         keep(*.ln_mw) compress se replace                                 
>                                                               ///
>                         stats(p_value_F zs_trend zs_trend_sq r2 N, fmt(%9.3f %s3 %s3 %9.3f
>  %9.0g)               ///
>                         labels("P-value no pretrends" "Zipcode-specifc linear trend"      
>                                                                               ///
>                         "Zipcode-specific linear and square trend"                        
>                                       ///
>                         "R-squared" "Observations")) star(* 0.10 ** 0.05 *** 0.01)        
>                                       ///
>                         nonote
 10. 
.                 esttab lincom1 lincom2 lincom3 using "`outstub'/unb_fd_dynamic_lincom_tabl
> e_`type'.tex", ///
>                         compress se replace                                               
>                                                                       ///
>                 stats(zs_trend zs_trend_sq N, fmt(%s3 %s3 %9.0g)                          
>       ///
>                         labels("Zipcode-specifc linear trend"                             
>                                                       ///
>                     "Zipcode-specific linear and square trend" ///
>                         "Observations"))                                ///
>                         star(* 0.10 ** 0.05 *** 0.01)                                     
>                                                               ///
>                         nonote coeflabel((1) "Sum of MW effects")
 11. 
.                 * Heterogeneity
.                 foreach var in med_hhinc20105 renthouse_share2010 college_share20105      
>                       ///
>                                         black_share2010 {
 12. 
.                         build_ytitle, var(`var')
 13. 
.                         run_static_heterogeneity, depvar(ln_med_rent_psqft_`type') absorb(
> year_month)                   ///
>                                 het_var(`var'_st_qtl) cluster(statefips) ytitle(`r(title)'
> )
 14.                         graph export "`outstub'/unb_fd_static_`type'_heter_`var'.png", 
> replace
 15. 
.         }
 16. end

. 
. program run_static_model
  1.     syntax, depvar(str) absorb(str) cluster(str) type(str)
  2. 
.         eststo clear
  3.         eststo: reghdfe D.`depvar' D.ln_mw,                                            
>          ///
>                 absorb(`absorb')                                                          
>                                       ///
>                 vce(cluster `cluster') nocons
  4.         comment_table, trend_lin("No") trend_sq("No")
  5.         
.         distinct zipcode if e(sample)==1
  6. 
.         scalar static_effect = _b[D.ln_mw]
  7.         scalar static_effect_se = _se[D.ln_mw]
  8. 
.         eststo: reghdfe D.`depvar' D.ln_mw,                                               
>                       ///
>                 absorb(`absorb' i.zipcode)                                                
>               ///
>                 vce(cluster `cluster') nocons
  9.         comment_table, trend_lin("Yes") trend_sq("No")
 10. 
.         eststo: reghdfe D.`depvar' D.ln_mw,                                               
>                       ///
>                 absorb(`absorb' i.zipcode c.trend_times2#i.zipcode)             ///
>                 vce(cluster `cluster') nocons
 11.         comment_table, trend_lin("Yes") trend_sq("Yes")
 12. end

. 
. program run_dynamic_model
  1.         syntax, depvar(str) absorb(str) cluster(str) type(str) sampl(str) [w(int 5)]
  2.         
.         local lincomest_coeffs "D1.ln_mw + LD.ln_mw"
  3.         forvalues i = 2(1)`w'{
  4.                 local lincomest_coeffs "`lincomest_coeffs' + L`i'D.ln_mw"
  5.         }
  6. 
.         eststo clear
  7.         eststo reg1: reghdfe D.`depvar' L(-`w'/`w').D.ln_mw,                    ///
>                 absorb(`absorb')                                                          
>                               ///
>                 vce(cluster `cluster') nocons
  8.         comment_table, trend_lin("No") trend_sq("No")
  9.         
.         test (F5D.ln_mw = 0) (F4D.ln_mw = 0) (F3D.ln_mw = 0) (F2D.ln_mw = 0) (F1D.ln_mw = 
> 0)
 10.     estadd scalar p_value_F = r(p)
 11. 
.         preserve
 12.                 coefplot, vertical base gen
 13.                 keep __at __b __se
 14.                 rename (__at __b __se) (at b_full se_full)
 15.                 
.                 keep if !missing(at)
 16. 
.                 gen b_full_lb = b_full - 1.96*se_full
 17.                 gen b_full_ub = b_full + 1.96*se_full
 18.                 
.                 gen static_path = 0 if at <= `w' 
 19.                 replace static_path = scalar(static_effect) if at > `w'
 20.                 gen static_path_lb = 0 if at <= `w'
 21.                 replace static_path_lb = scalar(static_effect) - 1.96*scalar(static_eff
> ect_se) if at > `w'
 22.                 gen static_path_ub = 0 if at <= `w'
 23.                 replace static_path_ub = scalar(static_effect) + 1.96*scalar(static_eff
> ect_se) if at > `w'
 24.                 
.                 save "../temp/plot_coeffs.dta", replace
 25.     restore
 26.                 
.         eststo lincom1: lincomest `lincomest_coeffs'
 27.         comment_table, trend_lin("No") trend_sq("No")
 28.                         
.         qui reghdfe D.`depvar' L(0/`w').D.ln_mw,                        ///
>                 absorb(`absorb')                                                          
>                               ///
>                 vce(cluster `cluster') nocons
 29.                         
.         preserve
 30.                 coefplot, vertical base gen
 31.                 keep __at __b __se
 32.                 rename (__at __b __se) (at b_lags se_lags)
 33.                 tset at
 34. 
.             keep if !missing(at)
 35. 
.                 gen b_lags_lb = b_lags - 1.96*se_lags
 36.                 gen b_lags_ub = b_lags + 1.96*se_lags
 37.                 
.                 gen cumsum_b_lags = b_lags[1]
 38.                 replace cumsum_b_lags = cumsum_b_lags[_n-1] + b_lags[_n] if _n > 1
 39.                 
.                 replace at = at + `w'
 40.                 
.                 merge 1:1 at using "../temp/plot_coeffs.dta", nogen
 41.                 replace cumsum_b_lags = 0 if at <= `w'
 42.                 sort at
 43.                 
.                 // To avoid the lines overlapping perfectly
.                 gen at_full = at - 0.09
 44.                 gen at_lags = at + 0.09
 45.                 replace at_full = at if _n <= `w'
 46.                 replace at_lags = at if _n <= `w'
 47. 
.                 replace cumsum_b_lags = cumsum_b_lags - 0.00007 if _n <= `w'
 48.                 replace static_path = static_path + 0.00007 if _n <= `w'
 49. 
.                 // Figure
.                 twoway (scatter b_full at_full, mcol(navy))                             //
> /
>                         (rcap b_full_lb b_full_ub at_full, col(navy) lp(dash) lw(thin))   
>                       ///
>                         (scatter b_lags at_lags, mcol(maroon))                            
>       ///
>                         (rcap b_lags_lb b_lags_ub at_lags, col(maroon) lp(dash) lw(thin)) 
>               ///
>                         (line static_path at, lcol(gs11) lpat(dash))                    //
> /
>                         (line cumsum_b_lags at, lcol(maroon%60)),                         
>               ///
>                         yline(0, lcol(gray) lpat(shortdash))                              
>                       ///
>                         graphregion(color(white)) bgcolor(white)                          
>       ///
>                         xlabel(1 "F5D.ln_mw" 2 "F4D.ln_mw" 3 "F3D.ln_mw" 4 "F2D.ln_mw" ///
>                         5 "FD.ln_mw" 6 "D.ln_mw" 7 "LD.ln_mw" 8 "L2D.ln_mw" 9 "L3D.ln_mw" 
> ///
>                         10 "L4D.ln_mw" 11 "L5D.ln_mw", labsize(vsmall)) xtitle("Leads and 
> lags of ln MW") ///
>                         ytitle("Effect on ln rent per sqft")                              
>       ///
>                         legend(order(1 "Full dynamic model" 3 "Distributed lags model" ///
>                         5 "Effects path static model" 6 "Effects path distributed lags mod
> el") size(small))
 50.                 if "`sampl'"=="bal" {
 51.                         graph export "../output/fd_models_`type'.png", replace
 52.                 }
 53.                 else if "`sampl'"=="unbal" {
 54.                         graph export "../output/unb_fd_models_`type'.png", replace     
>  
 55.                 }
 56.         restore 
 57.         
.         eststo reg2: reghdfe D.`depvar' L(-`w'/`w').D.ln_mw  `if',              ///
>                 absorb(`absorb' i.zipcode)                                                
>       ///
>                 vce(cluster `cluster') nocons
 58.         comment_table, trend_lin("Yes") trend_sq("No")
 59.         
.         test (F5D.ln_mw = 0) (F4D.ln_mw = 0) (F3D.ln_mw = 0) (F2D.ln_mw = 0) (F1D.ln_mw = 
> 0)
 60.     estadd scalar p_value_F = r(p)
 61.         
.         eststo lincom2: lincomest `lincomest_coeffs'
 62.         comment_table, trend_lin("Yes") trend_sq("No")
 63.         
.         eststo reg3: reghdfe D.`depvar' L(-`w'/`w').D.ln_mw `if',               ///
>                 absorb(`absorb' i.zipcod c.trend_times2#i.zipcode event_endfe5_`type'#year
> _month)       ///
>                 vce(cluster `cluster') nocons
 64.         comment_table, trend_lin("Yes") trend_sq("Yes")
 65. 
.         test (F5D.ln_mw = 0) (F4D.ln_mw = 0) (F3D.ln_mw = 0) (F2D.ln_mw = 0) (F1D.ln_mw = 
> 0)
 66.     estadd scalar p_value_F = r(p)
 67.         
.         eststo lincom3: lincomest `lincomest_coeffs'
 68.         comment_table, trend_lin("Yes") trend_sq("Yes")
 69. end

. 
. program run_static_heterogeneity
  1.         syntax, depvar(str) absorb(str) cluster(str) het_var(str) ytitle(str) [qtles(in
> t 5)]
  2. 
.     eststo clear
  3.         reghdfe D.`depvar' c.d_ln_mw#i.`het_var',                                      
>                  ///
>                 absorb(`absorb') ///
>                 vce(cluster `cluster') nocons
  4. 
.         coefplot, base graphregion(color(white)) bgcolor(white)                           
>               ///
>         ylabel(1 "1" 2 "2" 3 "3" 4 "4" 5 "5")                                             
>       ///
>         ytitle(`ytitle')                                                                  
>                               ///
>         xtitle("Estimated effect of ln MW on ln rents")                                 //
> /
>         xline(0, lcol(grey) lpat(dot))
  5. end

. 
. program build_ytitle, rclass
  1.         syntax, var(str)
  2. 
.         if "`var'" == "med_hhinc20105" {
  3.                 return local title "Quintiles of within state 2010 median household inc
> ome"
  4.         }
  5.         if "`var'" == "renthouse_share2010" {
  6.                 return local title "Quintiles of 2010 share of houses rent"
  7.         }
  8.         if "`var'" == "college_share20105" {
  9.                 return local title "Quintiles of 2010 college share"
 10.         }
 11.         if "`var'" == "black_share2010" {
 12.                 return local title "Quintiles of 2010 share of black individuals"
 13.         }
 14.         if "`var'" == "nonwhite_share2010" {
 15.                 return local title "Quintiles of 2010 share of non-white individuals"
 16.         }
 17.         if "`var'" == "work_county_share20105" {
 18.                 return local title "Quintiles of 2010 share who work in county"
 19.         }                 
 20. end

. 
. program comment_table
  1.         syntax, trend_lin(str) trend_sq(str)
  2. 
.         estadd local zs_trend           "`trend_lin'"   
  3.         estadd local zs_trend_sq        "`trend_sq'"
  4. end

. 
. main
file ../temp/unbal_fd_rent_panel.dta not found
r(601);

end of do-file
r(601);


Execute:  stataSE -e do "./horse_race_dynamic_models.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.1   Copyright 1985-2019 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

120-user Stata network perpetual license:
       Serial number:  401606201670
         Licensed to:  Brown University
                       Brown University

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./horse_race_dynamic_models.do 

. clear all

. set more off

. adopath + ../../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "/Applications/Stata/ado/base/"
  [2]  (SITE)      "/Applications/Stata/ado/site/"
  [3]              "."
  [4]  (PERSONAL)  "/Users/gabriborg/Documents/Stata/ado/personal/"
  [5]  (PLUS)      "/Users/gabriborg/Library/Application Support/Stata/ado/plus/"
  [6]  (OLDPLACE)  "~/ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"

. adopath + ../../../lib/stata/min_wage/ado
  [1]  (BASE)      "/Applications/Stata/ado/base/"
  [2]  (SITE)      "/Applications/Stata/ado/site/"
  [3]              "."
  [4]  (PERSONAL)  "/Users/gabriborg/Documents/Stata/ado/personal/"
  [5]  (PLUS)      "/Users/gabriborg/Library/Application Support/Stata/ado/plus/"
  [6]  (OLDPLACE)  "~/ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"
  [8]              "../../../lib/stata/min_wage/ado"

. set maxvar 32000 


. 
. program main
  1.         local instub "../temp"
  2.         local outstub "../output"
  3. 
.         use "`instub'/fd_rent_panel.dta", clear
  4. 
.         horse_race_models, depvar(ln_med_rent_psqft) w(5) ///
>             absorb(year_month) cluster(statefips)
  5.         esttab * using "`outstub'/horse_race.tex", compress se replace substitute(\_ _)
>          ///
>             order(F5D.ln_mw F4D.ln_mw F3D.ln_mw F2D.ln_mw FD.ln_mw D.ln_mw ///
>                 LD.ln_mw L2D.ln_mw L3D.ln_mw L4D.ln_mw L5D.ln_mw LD.ln_med_rent_psqft) ///
>         coeflabels(F5D.ln_mw "$\Delta \ln(MW)_{t-5}$" F4D.ln_mw "$\Delta \ln(MW)_{t-4}$" /
> //
>                 F3D.ln_mw "$\Delta \ln(MW)_{t-3}$" F2D.ln_mw "$\Delta \ln(MW)_{t-2}$" ///
>                 FD.ln_mw "$\Delta \ln(MW)_{t-1}$" D.ln_mw "$\Delta \ln(MW)_{t}$" ///
>                 LD.ln_mw "$\Delta \ln(MW)_{t+1}$" L2D.ln_mw "$\Delta \ln(MW)_{t+2}$" ///
>                 L3D.ln_mw "$\Delta \ln(MW)_{t+3}$" L4D.ln_mw "$\Delta \ln(MW)_{t+4}$" ///
>                 L5D.ln_mw "$\Delta \ln(MW)_{t+5}$" LD.ln_med_rent_psqft "$\Delta \ln(y)_{t
> -1}$") ///
>                 stats(N, fmt(%9.0g)             ///
>                 labels("Observations")) star(* 0.10 ** 0.05 *** 0.01)   ///
>                 mtitles("DiD" "Distributed leads and lags" "Distributed Lags" ///
>                 "AB distributed leads and lags" "AB distributed lags" ///
>                 "MW distributed leads and lags" "MW distributed lags") nonote
  6.                 
.         horse_race_models, depvar(ln_med_rent_psqft) w(5) ///
>             absorb(year_month zipcode) cluster(statefips)
  7.         esttab * using "`outstub'/horse_race_zipcode_trend.tex", compress se replace   
>  ///
>             order(F5D.ln_mw F4D.ln_mw F3D.ln_mw F2D.ln_mw FD.ln_mw D.ln_mw ///
>                 LD.ln_mw L2D.ln_mw L3D.ln_mw L4D.ln_mw L5D.ln_mw LD.ln_med_rent_psqft) ///
>        
>                 coeflabels(F5D.ln_mw "$\Delta \ln(MW)_{t-5}$" F4D.ln_mw "$\Delta \ln(MW)_{
> t-4}$" ///
>                 F3D.ln_mw "$\Delta \ln(MW)_{t-3}$" F2D.ln_mw "$\Delta \ln(MW)_{t-2}$" ///
>                 FD.ln_mw "$\Delta \ln(MW)_{t-1}$" D.ln_mw "$\Delta \ln(MW)_{t}$" ///
>                 LD.ln_mw "$\Delta \ln(MW)_{t+1}$" L2D.ln_mw "$\Delta \ln(MW)_{t+2}$" ///
>                 L3D.ln_mw "$\Delta \ln(MW)_{t+3}$" L4D.ln_mw "$\Delta \ln(MW)_{t+4}$" ///
>                 L5D.ln_mw "$\Delta \ln(MW)_{t+5}$" LD.ln_med_rent_psqft "$\Delta \ln(y)_{t
> -1}$") ///
>                 stats(N, fmt(%9.0g)             ///
>                 labels("Observations")) star(* 0.10 ** 0.05 *** 0.01)                     
>                       ///
>                 mtitles("DiD" "Distributed leads and lags" "Distributed Lags" ///
>                 "AB distributed leads and lags" "AB distributed lags" ///
>                 "MW distributed leads and lags" "MW distributed lags") nonote
  8.                 
.         horse_race_models, depvar(ln_med_rent_psqft) w(5) ///
>             absorb(year_month zipcode c.trend_times2#i.zipcode) cluster(statefips)
  9.         esttab * using "`outstub'/horse_race_zipcode_trend_sq.tex", compress se replace
>          ///
>             order(F5D.ln_mw F4D.ln_mw F3D.ln_mw F2D.ln_mw FD.ln_mw D.ln_mw ///
>                 LD.ln_mw L2D.ln_mw L3D.ln_mw L4D.ln_mw L5D.ln_mw LD.ln_med_rent_psqft) ///
>     
>         coeflabels(F5D.ln_mw "$\Delta \ln(MW)_{t-5}$" F4D.ln_mw "$\Delta \ln(MW)_{t-4}$" /
> //
>                 F3D.ln_mw "$\Delta \ln(MW)_{t-3}$" F2D.ln_mw "$\Delta \ln(MW)_{t-2}$" ///
>                 FD.ln_mw "$\Delta \ln(MW)_{t-1}$" D.ln_mw "$\Delta \ln(MW)_{t}$" ///
>                 LD.ln_mw "$\Delta \ln(MW)_{t+1}$" L2D.ln_mw "$\Delta \ln(MW)_{t+2}$" ///
>                 L3D.ln_mw "$\Delta \ln(MW)_{t+3}$" L4D.ln_mw "$\Delta \ln(MW)_{t+4}$" ///
>                 L5D.ln_mw "$\Delta \ln(MW)_{t+5}$" LD.ln_med_rent_psqft "$\Delta \ln(y)_{t
> -1}$") ////
>                 stats(N, fmt(%9.0g)             ///
>                 labels("Observations")) star(* 0.10 ** 0.05 *** 0.01)                     
>                       ///
>                 mtitles("DiD" "Distributed leads and lags" "Distributed Lags" ///
>                 "AB distributed leads and lags" "AB distributed lags" ///
>                 "MW distributed leads and lags" "MW distributed lags") nonote
 10. end

. 
. program horse_race_models
  1.     syntax, depvar(str) w(int) absorb(str) cluster(str) 
  2.         
.     eststo clear
  3.         eststo: qui reghdfe D.`depvar' D.ln_mw,                                        
>          ///
>                 absorb(`absorb')                                                          
>                                       ///
>                 vce(cluster `cluster') nocons
  4.                 
.         eststo: qui reghdfe D.`depvar' L(-`w'/`w').D.ln_mw,                     ///
>                 absorb(`absorb')                                                          
>                               ///
>                 vce(cluster `cluster') nocons
  5.                 
.         eststo: qui reghdfe D.`depvar' L(0/`w').D.ln_mw,                        ///
>                 absorb(`absorb')                                                          
>                               ///
>                 vce(cluster `cluster') nocons
  6.                 
.         eststo: qui ivreghdfe D.`depvar' L(-`w'/`w').D.ln_mw (L.D.`depvar' = L2.D.`depvar'
> ),                    ///
>                 absorb(`absorb') ///
>                 cluster (`cluster') nocons
  7. 
.         eststo: qui ivreghdfe D.`depvar' L(0/`w').D.ln_mw (L.D.`depvar' = L2.D.`depvar'), 
>                       ///
>                 absorb(`absorb') ///
>                 cluster (`cluster') nocons
  8.                 
.         eststo: qui ivreghdfe D.`depvar' L(-`w'/`w').D.ln_mw (L.D.`depvar' = L6.D.ln_mw), 
>                       ///
>                 absorb(`absorb') ///
>                 cluster (`cluster') nocons
  9.                 
.         eststo: qui ivreghdfe D.`depvar' L(0/`w').D.ln_mw (L.D.`depvar' = L6.D.ln_mw),    
>               ///
>                 absorb(`absorb') ///
>                 cluster (`cluster') nocons
 10. end

. 
. 
. main
ln_med_rent_psqft ambiguous abbreviation
r(111);

end of do-file
r(111);

 make.py ended: 2020-09-27 18:49:52
