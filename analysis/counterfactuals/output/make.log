
 make.py started: 2022-05-16 16:42:27 C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\code 




Execute:  StataMP-64 /e do "./compute.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.1   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user 32-core Stata perpetual license:
       Serial number:  501506205566
         Licensed to:  KU Leuven FEB (CES)
                       KU Leuven

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.


running c:\ado\personal\profile.do ...

. do ./compute.do 

. clear all

. set more off

. set maxvar 32000


. 
. program main
  1.     local in_cf_mw    "../../../drive/derived_large/min_wage_measures"
  2.     local in_baseline "../../fd_baseline/output"
  3.     local in_wages    "../../twfe_wages/output"
  4.     local in_s        "../../estimate_s/output"
  5.     local in_zip      "../../../drive/derived_large/zipcode"
  6. 
.     load_parameters, in_baseline(`in_baseline') ///
>         in_wages(`in_wages')
  7.     local beta    = r(beta)
  8.     local gamma   = r(gamma)
  9.     local epsilon = r(epsilon)
 10. 
.     di "Beta, Gamma, and Epsilon: `beta', `gamma', `epsilon'"
 11. 
.     load_counterfactuals,  instub(`in_cf_mw')
 12.     select_urban_zipcodes, instub(`in_zip')
 13.     merge m:1 zipcode using "`in_s'/s_by_zip.dta", ///
>         nogen keep(1 3)
 14.     
.     compute_vars, beta(`beta') gamma(`gamma') epsilon(`epsilon')
 15. 
.     flag_unaffected_cbsas
 16. 
.     foreach cf in fed_10pc fed_9usd fed_15usd {
 17. 
.         qui unique cbsa if counterfactual == "`cf'"
 18.         local n_cbsas           = `r(unique)'
 19.         qui unique cbsa if !cbsa_low_inc_increase & counterfactual == "`cf
> '"
 20.         local n_cbsas_affected = `r(unique)'
 21. 
.         di "{bf: Counterfactual: `cf'}"
 22.         di "    Unique CBAs: `n_cbsas'"
 23.         di "    Unique CBAs strongly affected: `n_cbsas_affected'"
 24. 
.         di "    Distribution of rho"
 25.         sum rho if counterfactual == "`cf'" & year == 2020, detail
 26.         di "    Distribution of rho for strongly affected CBAs"
 27.         sum rho if counterfactual == "`cf'" & !cbsa_low_inc_increase & yea
> r == 2020, detail
 28.     }
 29. 
.     save             "../output/data_counterfactuals.dta", replace
 30.     export delimited "../output/data_counterfactuals.csv", replace
 31.         
.         keep if (year == 2020 & month == 1)
 32.         keep zipcode counterfactual change_ln_rents perc_incr_rent ///
>             change_ln_wagebill perc_incr_wagebill ///
>             safmr2br_imputed wage_per_wage_hhld_imputed
 33.         gen num_terms = safmr2br_imputed*(change_ln_rents)
 34.         gen denom_terms = wage_per_wage_hhld_imputed*(change_ln_wagebill)
 35.         collapse (sum) num_tot_incidence = num_terms ///
>             (sum) denom_tot_incidence = denom_terms, by(counterfactual)
 36.         gen tot_incidence = num_tot_incidence/denom_tot_incidence
 37.     save_data "../output/tot_incidence.dta", key(counterfactual) replace
 38. end

. 
. program load_parameters, rclass
  1.     syntax, in_baseline(str) in_wages(str)
  2. 
.     use `in_baseline'/estimates_static.dta, clear
  3.     keep if model == "static_both"
  4. 
.     qui sum b if var == "mw_res"
  5.     return local gamma = r(mean)
  6.     qui sum b if var == "mw_wkp_tot_17"
  7.     return local beta = r(mean)
  8. 
.     use `in_wages'/estimates_cbsa_time.dta, clear
  9.     qui sum b
 10.     return local epsilon = r(mean)
 11. end

. 
. program load_counterfactuals
  1.     syntax, instub(str)
  2. 
.     clear
  3.     use zipcode year month counterfactual mw_wkp_tot mw_res statutory_mw /
> //
>         using "`instub'/zipcode_wkp_mw_cfs.dta"
  4. 
.     bysort zipcode counterfactual (year month): ///
>         gen d_mw_wkp = mw_wkp_tot[_n] - mw_wkp_tot[_n - 1]
  5.     bysort zipcode counterfactual (year month): ///
>         gen d_mw_res = mw_res[_n] - mw_res[_n - 1]
  6.     
.     * Predictions with parameters
.     gen   diff_mw  = d_mw_wkp - d_mw_res
  7.     xtile diff_qts = diff_mw, nquantiles(10)
  8. end

. 
. program select_urban_zipcodes
  1.     syntax, instub(str)
  2. 
.     merge m:1 zipcode using `instub'/zipcode_cross.dta,  ///
>         assert(2 3) keep(3) nogen keepusing(cbsa urban_cbsa)
  3. 
.     keep if urban_cbsa
  4. end

. 
. program compute_vars
  1.     syntax, beta(str) gamma(str) epsilon(str)
  2. 
.     gen  no_direct_treatment  = d_mw_res == 0
  3.     gen  fully_affected       = !no_direct_treatment
  4. 
.     gen change_ln_rents    = `beta'*d_mw_wkp + `gamma'*d_mw_res
  5.     gen change_ln_wagebill = `epsilon'*d_mw_wkp
  6. 
.     gen perc_incr_rent     = exp(change_ln_rents)    - 1
  7.     gen perc_incr_wagebill = exp(change_ln_wagebill) - 1
  8.     gen ratio_increases    = perc_incr_rent/perc_incr_wagebill
  9. 
.     gen s_lb = s_imputed - 0.1
 10.     gen s_ub = s_imputed + 0.1
 11. 
.     gen rho    = s_imputed*ratio_increases
 12.     gen rho_lb = s_lb*ratio_increases
 13.     gen rho_ub = s_ub*ratio_increases
 14. end

. 
. program flag_unaffected_cbsas
  1.     syntax, [thresh(real 0.001)]
  2. 
.     preserve
  3.         collapse (mean) perc_incr_wagebill perc_incr_rent,       ///
>             by(cbsa counterfactual)
  4. 
.         gen cbsa_low_inc_increase = perc_incr_wagebill < `thresh'
  5. 
.         save "../output/cbsa_averages.dta", replace
  6.     restore
  7. 
.     merge m:1 cbsa counterfactual using "../output/cbsa_averages.dta", ///
>         assert(3) nogen
  8. end

. 
. program clean_irs 
  1.     syntax, instub(str)
  2.     
.     use "`instub'/irs_zip.dta", clear
  3. 
.     drop if inlist(zipcode, "0", "00000", "99999")    
  4.     keep if year == 2016
  5.     
.     keep zipcode total_wage
  6. end

. 
. program clean_safmr 
  1.     syntax, instub(str)
  2.     
.     use "`instub'/safmr_2012_2016_by_zipcode_county_cbsa.dta", clear
  3.     keep zipcode countyfips cbsa year safmr1br safmr2br safmr3br
  4.     keep if year == 2016
  5.     drop year
  6.     collapse (mean) safmr*, by(zipcode)
  7. end

. 
. main
(6 observations deleted)
Beta, Gamma, and Epsilon: .0546001419425011, -.0207457412034273, .1083480641245
> 842
(94,839 missing values generated)
(95,157 missing values generated)
(95,157 missing values generated)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                           189,678  
    -----------------------------------------
(122,154 observations deleted)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                            67,524  
    -----------------------------------------
(33,933 missing values generated)
(33,762 missing values generated)
(33,933 missing values generated)
(33,762 missing values generated)
(34,415 missing values generated)
(1,776 missing values generated)
(1,776 missing values generated)
(35,037 missing values generated)
(35,037 missing values generated)
(35,037 missing values generated)
(note: file ../output/cbsa_averages.dta not found)
file ../output/cbsa_averages.dta saved

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                            67,524  
    -----------------------------------------
 Counterfactual: fed_10pc
    Unique CBAs: 176
    Unique CBAs strongly affected: 79
    Distribution of rho

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0265389      -.8896115
 5%     .0412725      -.0358896
10%     .0501976      -.0293156       Obs              10,704
25%     .0665156      -.0268207       Sum of Wgt.      10,704

50%     .0956103                      Mean           .1034511
                        Largest       Std. Dev.      .0494091
75%     .1309964       .3334058
90%     .1683588       .3346644       Variance       .0024413
95%     .1960469       .3372114       Skewness       .1117115
99%      .249557       .3571484       Kurtosis       18.94572
    Distribution of rho for strongly affected CBAs

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0220135      -.0358896
 5%     .0343778      -.0293156
10%     .0418922      -.0268207       Obs               4,835
25%      .053996      -.0254802       Sum of Wgt.       4,835

50%     .0684458                      Mean           .0767692
                        Largest       Std. Dev.      .0355136
75%     .0930345        .284979
90%     .1228327       .2933632       Variance       .0012612
95%     .1452392       .3038759       Skewness       1.527201
99%     .1997376       .3346644       Kurtosis       7.178886
 Counterfactual: fed_9usd
    Unique CBAs: 176
    Unique CBAs strongly affected: 116
    Distribution of rho

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0245909      -2.870752
 5%     .0387305      -.8883483
10%     .0467644      -.2065011       Obs              10,827
25%     .0602834      -.0383429       Sum of Wgt.      10,827

50%     .0843633                      Mean           .0947763
                        Largest       Std. Dev.       .056097
75%     .1210845       .3263732
90%     .1589115       .3334039       Variance       .0031469
95%     .1871644       .3372066       Skewness      -13.45022
99%      .247884       .3571455       Kurtosis       732.6307
    Distribution of rho for strongly affected CBAs

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0214234      -.2065011
 5%     .0348763      -.0383429
10%     .0421031      -.0354601       Obs               6,750
25%     .0538358      -.0340302       Sum of Wgt.       6,750

50%     .0676404                      Mean           .0746299
                        Largest       Std. Dev.       .033053
75%     .0891664       .2893916
90%     .1161697       .2932523       Variance       .0010925
95%     .1347165       .3037566       Skewness       1.455924
99%     .1896883       .3229674       Kurtosis       8.603105
 Counterfactual: fed_15usd
    Unique CBAs: 176
    Unique CBAs strongly affected: 176
    Distribution of rho

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0214479      -.0087509
 5%     .0350984      -.0070916
10%     .0424122       -.005653       Obs              10,956
25%     .0536085      -.0048226       Sum of Wgt.      10,956

50%     .0670621                      Mean           .0727697
                        Largest       Std. Dev.      .0308977
75%     .0851886        .290533
90%     .1087708       .2910164       Variance       .0009547
95%     .1286948       .2923625       Skewness       1.752812
99%      .187359       .2991904       Kurtosis       8.817627
    Distribution of rho for strongly affected CBAs

                             rho
-------------------------------------------------------------
      Percentiles      Smallest
 1%     .0214479      -.0087509
 5%     .0350984      -.0070916
10%     .0424122       -.005653       Obs              10,956
25%     .0536085      -.0048226       Sum of Wgt.      10,956

50%     .0670621                      Mean           .0727697
                        Largest       Std. Dev.      .0308977
75%     .0851886        .290533
90%     .1087708       .2910164       Variance       .0009547
95%     .1286948       .2923625       Skewness       1.752812
99%      .187359       .2991904       Kurtosis       8.817627
(note: file ../output/data_counterfactuals.dta not found)
file ../output/data_counterfactuals.dta saved
(note: file ../output/data_counterfactuals.csv not found)
file ../output/data_counterfactuals.csv saved
(33,762 observations deleted)
(600 missing values generated)
(693 missing values generated)
(data already sorted by counterfactual)
  (0 bytes saved)
===============================================================================
File: ../output/tot_incidence.dta
Key: counterfactual
===============================================================================
  3:4(75978):873978858:4146299881

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
counterfac~l |          0
num_tot_in~e |          3    67552.13    85152.55      10212   165396.2
denom_tot_~e |          3    1.31e+07    1.64e+07    2048053   3.19e+07
tot_incide~e |          3    .0050717    .0001043   .0049862   .0051878




(note: file ../output/tot_incidence.dta not found)
file ../output/tot_incidence.dta saved

. 
end of do-file


Execute:  StataMP-64 /e do "./figures.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.1   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user 32-core Stata perpetual license:
       Serial number:  501506205566
         Licensed to:  KU Leuven FEB (CES)
                       KU Leuven

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.


running c:\ado\personal\profile.do ...

. do ./figures.do 

. clear all

. set more off

. set maxvar 32000


. 
. program main
  1.     local instub      "../output"
  2.     local in_wages    "../../twfe_wages/output"
  3.     local in_zip      "../../../drive/derived_large/zipcode"
  4. 
.     use "`instub'/data_counterfactuals.dta", clear
  5. 
.     keep if counterfactual == "fed_9usd" & year == 2020
  6.     keep if !cbsa_low_inc_increase
  7. 
.     foreach var in d_mw_res d_mw_wkp rho                   ///
>                    change_ln_rents change_ln_wagebill  {
  8.         
.         get_xlabel, var(`var')
  9.         local x_lab = r(x_lab)
 10.         
.         local scale_opts ""
 11.         local bin_opt    ""
 12.         if inlist("`var'", "d_mw_res", "d_mw_wkp") {
 13.             local scale_opts "yscale(r(0 53.5)) xscale(r(0 0.23))"
 14.             local bin_opt    "bin(25)"
 15.         }
 16.         if inlist("`var'", "rho", "change_ln_rents", "change_ln_wagebill")
>  {
 17.             local bin_opt    "bin(30)"
 18.             if "`var'"!="rho" {
 19.                 local scale_opts "yscale(r(0 40))"
 20.             }
 21.         }
 22. 
.         hist `var', percent `bin_opt'                                   ///
>             xtitle("`x_lab'") ytitle("Percentage") `scale_opts'         ///
>             graphregion(color(white)) bgcolor(white)                    ///
>             plotregion(margin(b = 1.5))
 23.         
.         graph export "../output/hist_`var'.png", replace
 24.         graph export "../output/hist_`var'.eps", replace
 25.     }
 26. 
.     collapse (mean) rho_lb rho rho_ub, by(diff_qts)
 27. 
.     twoway (line     rho  diff_qts, lcol(navy))                             /
> //
>            (scatter  rho  diff_qts, mcol(navy)),                            /
> //
>         xtitle("Difference between change in wrk. MW and change in res. MW (d
> eciles)")  ///
>         ytitle("Mean share pocketed")                                       /
> //
>         xlabel(1(1)10) ylabel(0(0.04)0.2)                                   /
> //
>         graphregion(color(white)) bgcolor(white) legend(off)
 28.         
.     graph export "../output/deciles_diff.png", replace
 29.     graph export "../output/deciles_diff.eps", replace
 30. end

. 
. 
. program load_parameters, rclass
  1.     syntax, in_baseline(str) in_wages(str)
  2. 
.     use `in_baseline'/estimates_static.dta, clear
  3.     keep if model == "static_both"
  4. 
.     qui sum b if var == "mw_res"
  5.     return local gamma = r(mean)
  6.     qui sum b if var == "mw_wkp_tot_17"
  7.     return local beta = r(mean)
  8. 
.     use `in_wages'/estimates_cbsa_time.dta, clear
  9.     qui sum b
 10.     return local epsilon = r(mean)
 11. end

. 
. program compute_vars
  1.     syntax, beta(str) gamma(str) epsilon(str) [s(real 0.35)]
  2. 
.     keep if rural == 0
  3. 
.     * Predictions with parameters
.     gen diff_mw    = d_mw_wkp_tot_17 - d_mw_res
  4.     xtile diff_qts = diff_mw, nquantiles(10)
  5. 
.     egen max_d_mw_res = max(d_mw_res)
  6.     gen no_direct_treatment       = d_mw_res == 0
  7.     gen fully_affected            = !no_direct_treatment
  8. 
.     gen change_ln_rents    = `beta'*d_mw_wkp_tot_17 + `gamma'*d_mw_res
  9.     gen change_ln_wagebill = `epsilon'*d_mw_wkp_tot_17
 10. 
.     gen perc_incr_rent     = exp(change_ln_rents)    - 1
 11.     gen perc_incr_wagebill = exp(change_ln_wagebill) - 1
 12.     gen ratio_increases    = perc_incr_rent/perc_incr_wagebill
 13. 
.     local s_lb = `s' - 0.1
 14.     local s_ub = `s' + 0.1
 15. 
.     gen rho    = `s'*ratio_increases
 16.     gen rho_lb = `s_lb'*ratio_increases
 17.     gen rho_ub = `s_ub'*ratio_increases
 18. end

. 
. program get_xlabel, rclass
  1.     syntax, var(str)
  2. 
.     if inlist("`var'", "p_d_ln_rents", "p_d_ln_rents_with_fe", ///
>               "p_d_ln_rents_zillow", "p_d_ln_rents_with_fe_zillow") {
  3.         return local x_lab "Change in log rents"
  4.     }
  5. 
.     if "`var'"=="d_mw_res"           return local x_lab "Change in residence 
> MW"
  6.     if "`var'"=="d_mw_wkp"           return local x_lab "Change in workpla
> ce MW"
  7. 
.     if "`var'"=="change_ln_rents"    return local x_lab "Change in log rents 
> per sq. foot"
  8.     if "`var'"=="change_ln_wagebill" return local x_lab "Change in log tot
> al wages"
  9. 
.     if "`var'"=="rho"                return local x_lab "Share pocketed by la
> ndlords"
 10. end

. 
. 
. main
(56,270 observations deleted)
(4,302 observations deleted)
(bin=25, start=0, width=.00864892)
(note: file ../output/hist_d_mw_res.png not found)
(file ../output/hist_d_mw_res.png written in PNG format)
(note: file ../output/hist_d_mw_res.eps not found)
(file ../output/hist_d_mw_res.eps written in EPS format)
(bin=25, start=0, width=.00864892)
(note: file ../output/hist_d_mw_wkp.png not found)
(file ../output/hist_d_mw_wkp.png written in PNG format)
(note: file ../output/hist_d_mw_wkp.eps not found)
(file ../output/hist_d_mw_wkp.eps written in EPS format)
(bin=30, start=-.20650114, width=.01764895)
(note: file ../output/hist_rho.png not found)
(file ../output/hist_rho.png written in PNG format)
(note: file ../output/hist_rho.eps not found)
(file ../output/hist_rho.eps written in EPS format)
(bin=30, start=-.00448571, width=.00039977)
(note: file ../output/hist_change_ln_rents.png not found)
(file ../output/hist_change_ln_rents.png written in PNG format)
(note: file ../output/hist_change_ln_rents.eps not found)
(file ../output/hist_change_ln_rents.eps written in EPS format)
(bin=30, start=0, width=.00078091)
(note: file ../output/hist_change_ln_wagebill.png not found)
(file ../output/hist_change_ln_wagebill.png written in PNG format)
(note: file ../output/hist_change_ln_wagebill.eps not found)
(file ../output/hist_change_ln_wagebill.eps written in EPS format)
(note: file ../output/deciles_diff.png not found)
(file ../output/deciles_diff.png written in PNG format)
(note: file ../output/deciles_diff.eps not found)
(file ../output/deciles_diff.eps written in EPS format)

. 
end of do-file


Execute:  R CMD BATCH --no-save "./tables.R" tables.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> library(data.table)
> 
> main <- function() {
+   instub  <- "../output"
+   outstub <- "../output"
+   
+   dt <- fread(file.path(instub, "data_counterfactuals.csv"))
+   
+   alpha = 0.35
+ 
+   dt_cf <- dt[counterfactual == "fed_9usd" 
+              & year == 2020 
+              & cbsa_low_inc_increase == 0]
+ 
+   txt <- c("<tab:counterfactuals_fed_9usd>",
+             paste(alpha - 0.1, alpha + 0.1, sep = "\t"))
+ 
+   for (sample in c("fully_affected", "no_direct_treatment")) {
+     
+     dt_sample <- dt_cf[get(sample) == 1]
+     
+     txt <- c(txt, 
+             paste(dim(dt_sample)[1],
+                   mean(dt_sample[["d_mw_res"]],  na.rm = T),
+                   mean(dt_sample[["d_mw_wkp"]],  na.rm = T),
+                   mean(dt_sample[["rho_lb"]],    na.rm = T),
+                   mean(dt_sample[["rho_ub"]],    na.rm = T),
+                   sep = "\t"))
+   }
+   
+   fileConn <- file(file.path(outstub, "counterfactuals_fed_9usd.txt"))
+   writeLines(txt, fileConn)
+   close(fileConn)
+ 
+   txt <- c("<tab:counterfactuals_other>",
+             paste(alpha - 0.1, alpha + 0.1, sep = "\t"))
+ 
+   for (cf in c("fed_10pc", "fed_15usd")) {
+     dt_cf <- dt[counterfactual == cf
+                & year == 2020 
+                & cbsa_low_inc_increase == 0]
+ 
+     for (sample in c("fully_affected", "no_direct_treatment")) {
+       
+       dt_sample <- dt_cf[get(sample) == 1]      
+       txt <- c(txt, 
+               paste(dim(dt_sample)[1],
+                     mean(dt_sample[["d_mw_res"]],  na.rm = T),
+                     mean(dt_sample[["d_mw_wkp"]],  na.rm = T),
+                     mean(dt_sample[["rho_lb"]],    na.rm = T),
+                     mean(dt_sample[["rho_ub"]],    na.rm = T),
+                     sep = "\t"))
+     }    
+   }
+   
+   fileConn <- file(file.path(outstub, "counterfactuals_other.txt"))
+   writeLines(txt, fileConn)
+   close(fileConn)
+ }
> 
> 
> main()
> 
> proc.time()
   user  system elapsed 
   0.62    0.28    0.67 


Execute:  R CMD BATCH --no-save "./map_cfs.R" map_cfs.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> 
> library(data.table)
> library(sf)
Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:data.table':

    between, first, last

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(spData)
To access larger datasets in this package, install the spDataLarge
package with: `install.packages('spDataLarge',
repos='https://nowosad.github.io/drat/', type='source')`
> library(tmap)
> library(tmaptools)
> library(ggplot2)
> 
> main <- function(){
+   in_map  <- "../../../drive/raw_data/shapefiles/USPS_zipcodes"
+   in_data <- "../output/"
+ 
+   USPS_zipcodes <- read_sf(dsn = in_map, 
+                            layer = "USPS_zipcodes_July2020") %>%
+     select(ZIP_CODE, PO_NAME, STATE, POPULATION, SQMI, POP_SQMI) %>%
+     rename(zipcode = ZIP_CODE, zipcode_name = PO_NAME,
+            state_name = STATE)
+   
+   df_all <- fread(file.path(in_data, "data_counterfactuals.csv"),
+                   colClasses = c(zipcode = "character")) %>%
+     filter(counterfactual == "fed_9usd",
+            year           == 2020)
+ 
+   df_all <- left_join(USPS_zipcodes, df_all, by = "zipcode")
+ 
+   df_chicago <- df_all %>% filter(cbsa == 16980)
+ 
+   max_break_mw <- round(max(df_chicago$d_mw_res, na.rm = TRUE), digits = 2)
+   
+   build_map(data = df_chicago, 
+             var = "d_mw_res", 
+             var_legend ="Change in\nresidence MW", 
+             break_values = c(0, max_break_mw/2, max_break_mw), 
+             map_name = "chicago_d_mw_res")
+   
+   build_map(data = df_chicago, 
+             var = "d_mw_wkp", 
+             var_legend ="Change in\nworkplace MW", 
+             break_values = c(0, max_break_mw/2, max_break_mw), 
+             map_name = "chicago_d_mw_wkp")
+   
+   min_break_rents <- round(min(df_chicago$change_ln_rents, na.rm = TRUE), digits = 2)
+   max_break_rents <- round(max(df_chicago$change_ln_rents, na.rm = TRUE), digits = 2)
+   
+   build_map(data = df_chicago, 
+             var = "change_ln_rents", 
+             var_legend ="Change in log rents\nper sq. foot", 
+             break_values = c(min_break_rents, max_break_rents/2, max_break_rents), 
+             map_name = "chicago_d_ln_rents")
+ 
+   min_break_wagebill <- round(min(df_chicago$change_ln_wagebill, na.rm = TRUE), digits = 2)
+   max_break_wagebill <- round(max(df_chicago$change_ln_wagebill, na.rm = TRUE), digits = 2)
+   
+   build_map(data = df_chicago, 
+             var = "change_ln_wagebill", 
+             var_legend ="Change in\nlog total wages", 
+             break_values = c(min_break_wagebill, max_break_wagebill/2, max_break_wagebill), 
+             map_name = "chicago_d_ln_wagebill")
+ 
+   min_break_rho <- round(min(df_chicago$rho, na.rm = TRUE), digits = 2)
+   max_break_rho <- round(max(df_chicago$rho, na.rm = TRUE), digits = 2)
+   
+   build_map(data = df_chicago, 
+             var = "rho", 
+             var_legend ="Share pocketed\nby landlords", 
+             break_values = c(min_break_rho, max_break_rho/2, max_break_rho), 
+             map_name = "chicago_rho")
+ }
> 
> build_map <- function(data, var, var_legend, break_values,
+                       map_name, .dpi = 250) {
+   
+   map <- tm_shape(data) + 
+     tm_fill(col = var,
+             title = var_legend,
+             style = "cont",
+             palette = c("#A6E1F4", "#077187"),
+             breaks = break_values,
+             textNA = "NA") +
+     tm_borders(col = "white", lwd = .01, alpha = 0.7) +
+     tm_layout(legend.position = c("left", "bottom"),
+             frame = FALSE)
+   
+   tmap_save(map, 
+             paste0("../output/", map_name, ".png"),
+             dpi = .dpi)
+   tmap_save(map, 
+             paste0("../output/", map_name, ".eps"))
+ }
> 
> main()
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_mw_res.png
Resolution: 1529.333 by 2002.507 pixels
Size: 6.117331 by 8.010029 inches (250 dpi)
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_mw_res.eps
Size: 6.117331 by 8.010029 inches
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_mw_wkp.png
Resolution: 1529.333 by 2002.507 pixels
Size: 6.117331 by 8.010029 inches (250 dpi)
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_mw_wkp.eps
Size: 6.117331 by 8.010029 inches
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_ln_rents.png
Resolution: 1529.333 by 2002.507 pixels
Size: 6.117331 by 8.010029 inches (250 dpi)
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_ln_rents.eps
Size: 6.117331 by 8.010029 inches
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_ln_wagebill.png
Resolution: 1529.333 by 2002.507 pixels
Size: 6.117331 by 8.010029 inches (250 dpi)
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_d_ln_wagebill.eps
Size: 6.117331 by 8.010029 inches
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_rho.png
Resolution: 1529.333 by 2002.507 pixels
Size: 6.117331 by 8.010029 inches (250 dpi)
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\analysis\counterfactuals\output\chicago_rho.eps
Size: 6.117331 by 8.010029 inches
There were 17 warnings (use warnings() to see them)
> 
> proc.time()
   user  system elapsed 
  61.35   44.43  106.09 

 make.py ended: 2022-05-16 16:44:32
