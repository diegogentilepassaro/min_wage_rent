
 make.py started: 2022-05-09 20:06:41 C:\Users\Usuario\Documents\GitHub\min_wage_rent\descriptive\ahs\code 




Execute:  R CMD BATCH --no-save "./prepare.R" prepare.Rout

R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> 
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(readr)
> 
> main <- function() {
+   in_data <- '../../../drive/base_large/ahs'
+   varchar <- c('smsa', 'county', 'state', 'household_id')
+   
+   hh_data <- read_csv(file.path(in_data, 'household_2011_2013.csv'))
+   
+   hh_data <- hh_data %>% 
+     filter(is_owner == 1 | is_tenant == 1, 
+            hh_income > 0,
+            house_apartment_unit == 1) 
+   
+   person_data <- read_csv(file.path(in_data, 'person_2011_2013.csv'))
+   
+   sh_renters <- hh_data %>%
+     mutate(hh_income_res      = resid(lm(hh_income ~ factor(smsa) , data = .)),
+            hh_income_decile   = ntile(hh_income_res, 10),
+            pr_tenant_res      = resid(lm(is_tenant ~ factor(smsa) , data = .)),
+            pr_tenant          = pr_tenant_res + mean(is_tenant)) %>%
+     group_by(hh_income_decile) %>%
+     summarise(pr_tenant = mean(pr_tenant))
+   
+   sh_unit_types <- hh_data %>%
+     filter(is_tenant == 1) %>% 
+     mutate(hh_income_res      = resid(lm(hh_income ~ factor(smsa) , data = .)),
+            hh_income_decile   = ntile(hh_income_res, 10)) %>%
+     group_by(hh_income_decile, n_units_cat) %>%
+     summarise(count_unit_type = n()) %>%
+     group_by(hh_income_decile) %>%
+     mutate(sh_unit_type = count_unit_type / sum(count_unit_type)) %>% 
+     select(-count_unit_type)
+   
+   sh_condo <- hh_data %>%
+     filter(is_tenant == 1) %>% 
+     mutate(hh_income_res      = resid(lm(hh_income ~ factor(smsa) , data = .)),
+            hh_income_decile   = ntile(hh_income_res, 10),
+            sh_condo_res       = resid(lm(is_condo_coop ~ factor(smsa) , data = .)),
+            sh_condo           = sh_condo_res + mean(is_condo_coop)) %>%
+     group_by(hh_income_decile) %>%
+     summarise(sh_condo = mean(sh_condo))
+   
+   sh_hh_head <- person_data %>%
+     left_join(hh_data[, c('household_id', 'is_tenant', 'house_apartment_unit')], 
+               by = 'household_id') %>%
+     filter(is_tenant == 1,
+            house_apartment_unit == 1,
+       person_salary > 0) %>% 
+     group_by(household_id) %>%
+     mutate(max_income   =  max(person_salary),
+            hh_head_max  =  1 * (person_salary == max_income)) %>%
+     ungroup %>% 
+     mutate(person_salary_res      = resid(lm(person_salary ~ factor(smsa) , data = .)),
+            person_salary_decile   = ntile(person_salary_res, 10),
+            hh_head_max_res        = resid(lm(hh_head_max ~ factor(smsa) , data = .)),
+            hh_head_max            = hh_head_max_res + mean(hh_head_max)) %>%
+     group_by(person_salary_decile) %>%
+     summarise(sh_hh_head_max = mean(hh_head_max))
+   
+   plots <- c('sh_renters', 'sh_unit_types', 'sh_condo', 'sh_hh_head')
+   for (pp in plots) {
+     write_csv(get(pp), paste0('../output/', pp, '.csv'))
+   }
+   
+ }
> 
> main()
Rows: 164188 Columns: 24
-- Column specification --------------------------------------------------------
Delimiter: ","
chr  (5): household_id, county, state, smsa, n_units_cat
dbl (19): metro, fam_income, hh_income, hh_wageincome_ind, monthly_hh_rent, ...

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 359760 Columns: 10
-- Column specification --------------------------------------------------------
Delimiter: ","
chr (2): household_id, smsa
dbl (8): person_num, relation_to_hh_head, person_salary, age, educ_level, se...

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.
`summarise()` has grouped output by 'hh_income_decile'. You can override using
the `.groups` argument.
> 
> proc.time()
   user  system elapsed 
   7.00    0.42    7.29 


Execute:  StataMP-64 /e do "./plot.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.0   Copyright 1985-2019 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      Downloadly.ir     
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user 2-core Stata network license expires 20 Aug 2022:
       Serial number:  501609213901
         Licensed to:  DOWNLOADLY.IR 085227746673
                       WwW.DownLoadLy.iR 085227746673

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./plot.do 

. clear all

. set more off

. 
. program main 
  1. 
.         make_plot, xvar(hh_income_decile) yvar(pr_tenant) y_title("Share of r
> enters") ///
>                 x_title("Household income decile") color(navy%80) name(sh_ren
> ters)
  2.         
.         make_plot, xvar(hh_income_decile) yvar(sh_condo) y_title("Share of pe
> ople in condos & cooperatives") ///
>                 x_title("Household income decile") color(navy%80) name(sh_con
> do)
  3. 
.         make_plot, xvar(person_salary_decile) yvar(sh_hh_head_max) y_title("P
> robability of being household head") ///
>                 x_title("Person income decile") color(navy%80) name(sh_hh_hea
> d)
  4.                 
.         make_stacked_plot, xvar1(n_units_cat) xvar2(hh_income_decile) yvar(sh
> _unit_type)   ///
>             y_title("Share of unit type") x_title("Household income decile") 
>   ///
>                 name(sh_unit_types)
  5. 
. end

. 
. program make_plot
  1.         syntax, xvar(str) yvar(str) y_title(str) ///
>         x_title(str) color(str) name(str) [width(int 2221) height(int 1615)]
  2.                 
.                 import delimited "../output/`name'.csv", clear
  3.                 
.                 graph bar `yvar', over(`xvar') ytitle(`y_title') ///
>                 b1title(`x_title') graphregion(color(white)) bgcolor(white) b
> ar(1, fcolor(`color'))
  4.                 
.                 graph export "../output/`name'.png", replace width(`width') h
> eight(`height')
  5.         graph export "../output/`name'.eps", replace
  6.         
. end

. 
. program make_stacked_plot
  1.         syntax, xvar1(str) xvar2(str) yvar(str) y_title(str) ///
>         x_title(str) name(str) [width(int 2221) height(int 1615)]
  2.                 
.                 import delimited "../output/`name'.csv", clear
  3.                 
.                 graph bar `yvar', over(`xvar1') over(`xvar2') ytitle(`y_title
> ') ///
>                 b1title(`x_title') graphregion(color(white)) bgcolor(white) /
> //
>                 asyvars stack
  4.                 
.                 graph export "../output/`name'.png", replace width(`width') h
> eight(`height')
  5.         graph export "../output/`name'.eps", replace
  6.         
. end

. 
. main
(2 vars, 10 obs)
(note: file ../output/sh_renters.png not found)
(file ../output/sh_renters.png written in PNG format)
(note: file ../output/sh_renters.eps not found)
(file ../output/sh_renters.eps written in EPS format)
(2 vars, 10 obs)
(note: file ../output/sh_condo.png not found)
(file ../output/sh_condo.png written in PNG format)
(note: file ../output/sh_condo.eps not found)
(file ../output/sh_condo.eps written in EPS format)
(2 vars, 10 obs)
(note: file ../output/sh_hh_head.png not found)
(file ../output/sh_hh_head.png written in PNG format)
(note: file ../output/sh_hh_head.eps not found)
(file ../output/sh_hh_head.eps written in EPS format)
(3 vars, 40 obs)
(note: file ../output/sh_unit_types.png not found)
(file ../output/sh_unit_types.png written in PNG format)
(note: file ../output/sh_unit_types.eps not found)
(file ../output/sh_unit_types.eps written in EPS format)

. 
end of do-file

 make.py ended: 2022-05-09 20:06:58
