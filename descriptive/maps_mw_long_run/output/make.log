
 make.py started: 2022-02-09 13:07:50 C:\Users\diegog\Desktop\Diego\min_wage_rent\descriptive\maps_mw_long_run\code 




Execute:  R CMD BATCH --no-save "./plot_events.R" plot_events.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> 
> library(sf)
Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(spData)
To access larger datasets in this package, install the spDataLarge
package with: `install.packages('spDataLarge',
repos='https://nowosad.github.io/drat/', type='source')`
> library(tmap)
> library(tmaptools)
> library(leaflet)
> library(ggplot2)
> 
> main <- function(){
+   in_map_states  <- "../../../drive/raw_data/shapefiles/states"
+   in_map_zip  <- "../../../drive/raw_data/shapefiles/USPS_zipcodes"
+   in_data <- "../../../drive/derived_large/estimation_samples"
+   
+   data_for_map <- prepare_data(in_map_zip, in_data)
+   
+   data_states <- read_sf(dsn = in_map_states, layer = "state") %>%
+     select(STPOSTAL) %>%
+     rename(state_name = STPOSTAL) %>%
+     filter(!(state_name %in% c("AK", "HI", "VI", "MP", "PR", "GU", "AS")))
+   data_states <- data_states[st_is_valid(data_states),]
+   
+   build_map(data_for_map, data_states,  "change_perc_actual_mw", "Percentage change in binding MW", 
+             paste0("US", "change_perc_actual_mw"))
+ }
> 
> prepare_data <- function(in_map_zip, in_data) {
+   USPS_zipcodes <- read_sf(dsn = in_map_zip, 
+                            layer = "USPS_zipcodes_July2020") %>%
+     select(ZIP_CODE, PO_NAME, STATE, POPULATION, SQMI, POP_SQMI) %>%
+     rename(zipcode = ZIP_CODE, zipcode_name = PO_NAME,
+            state_name = STATE, pop2020 = POPULATION, 
+            area_sq_miles = SQMI, pop2020_per_sq_miles = POP_SQMI)
+ 
+   mw_rent_data <- data.table::fread(file.path(in_data, "all_zipcode_months.csv"),
+                                     colClasses = c(zipcode ="character",
+                                                    state_abb = "character", statefips = "character")) %>%
+     select(zipcode, state_abb, year, month, actual_mw) %>%
+     mutate(ln_actual_mw = log(actual_mw)) %>%
+     filter((year == 2010 & month == 1) | (year == 2019 & month == 12)) %>%
+     group_by(zipcode) %>%
+     summarise(change_perc_actual_mw = 100*(last(actual_mw) - first(actual_mw))/first(actual_mw)) %>%
+     ungroup()
+   
+   data_for_map <- left_join(USPS_zipcodes, mw_rent_data, by = "zipcode") %>%
+     filter(is.na(area_sq_miles) == FALSE)  %>%
+     filter(state_name != "AK" & state_name != "HI" & state_name != "VI" & state_name != "MP"
+            & state_name != "PR" & state_name != "GU" & state_name != "AS")
+   data_for_map <- data_for_map[st_is_valid(data_for_map),]
+ 
+   return(data_for_map)
+ }
> 
> build_map <- function(data_zip, data_states, var, var_legend, map_name,
+                       .dpi = 600){
+   map <- tm_shape(data_states) +
+     tm_polygons(lwd = 0.5) +
+     tm_shape(data_zip) +
+     tm_fill(col = var,
+             title = var_legend,
+             style = "cont",
+             palette = c("#FFFFFF", "#A6E1F4", "#077187"),
+             textNA = "NA",
+             alpha = 0.8) +
+     tm_layout(legend.position = c("left", "bottom")) +
+     tmap_options(check.and.fix = TRUE)
+ 
+   tmap_save(map, 
+             paste0("../output/", map_name, ".eps"))  
+   tmap_save(map, 
+             paste0("../output/", map_name, ".png"),
+             dpi = .dpi)
+ }
> 
> main()
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\descriptive\maps_mw_long_run\output\USchange_perc_actual_mw.eps
Size: 9.542006 by 5.135189 inches
Map saved to C:\Users\diegog\Desktop\Diego\min_wage_rent\descriptive\maps_mw_long_run\output\USchange_perc_actual_mw.png
Resolution: 5725.204 by 3081.113 pixels
Size: 9.542006 by 5.135189 inches (600 dpi)
Warning message:
In grid.Call.graphics(C_path, x$x, x$y, index, switch(x$rule, winding = 1L,  :
  semi-transparency is not supported on this device: reported only once per page
> 
> proc.time()
   user  system elapsed 
3545.95 2418.51 8893.62 

 make.py ended: 2022-02-09 15:36:08
