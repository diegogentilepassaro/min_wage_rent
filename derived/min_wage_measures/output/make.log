
 make.py started: 2022-03-25 18:53:33 C:\Users\shermo\Documents\GitHub\min_wage_rent\derived\min_wage_measures\code 




Execute:  R CMD BATCH --no-save "./build.R" build.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> 
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> source("add_missing_state_years.R")
> 
> paquetes <- c("data.table", "zoo")
> lapply(paquetes, require, character.only = TRUE) -> l
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> library(parallel)
> n_cores <- 18
> 
> main <- function(paquetes, n_cores){
+   in_mw    <- "../../../drive/derived_large/min_wage_panels"
+   in_lodes <- "../../../drive/base_large/lodes_od"
+   in_geo   <- "../../../drive/base_large/census_block_master"
+   outstub  <- "../../../drive/derived_large/min_wage_measures"
+   log_file <- "../output/data_file_manifest.log"
+   
+   for (geo in c("countyfips", "zipcode")) {
+     
+     dt <- load_statutory(in_mw, geo)
+     
+     dt[, mw_res := log(statutory_mw)]
+     
+     keep_vars <- c(geo, "year", "month", "statutory_mw", "mw_res")
+     save_data(dt[, ..keep_vars], key = keep_vars[1:3],
+               filename = file.path(outstub, sprintf("%s_mw_res.dta", geo)),
+               logfile  = log_file)
+     fwrite(dt[, ..keep_vars], 
+            file = file.path(outstub, sprintf("%s_mw_res.csv", geo)))
+     
+     dt[, mw_res := NULL]
+     
+     periods <- unique(dt$year_month)
+     
+     for (yy in 2009:2018) {
+       
+       print(sprintf("Computing workplace MW for %s using shares from year %s.",
+                     geo, yy))
+       
+       # Preliminaries
+       mw_var = "statutory_mw"
+       
+       if (geo == "countyfips") {
+         w_var = "w_countyfips"
+         r_var = "r_countyfips"
+       } else {
+         w_var = "w_zipcode"
+         r_var = "r_zipcode"
+       }
+       
+       dt_od <- load_od_matrix(in_lodes, yy,
+                               geo, w_var, r_var)
+       
+       # Compute commuting shares
+       geos_valid_stat_mw <- unique(dt[year == 2019 & month == 1
+                                       & !is.na(get(mw_var))][[geo]])
+       
+       dt_od     <- compute_shares(dt_od, geos_valid_stat_mw, w_var, r_var)
+       
+       jobs_vars <- names(dt_od)[grepl("sh", names(dt_od))]
+       
+       # Parallel set-up
+       cl <- makeCluster(n_cores, type = "PSOCK")   # Create cluster. Use type = "FORK" in Mac
+       
+       clusterExport(cl, "paquetes")                                          # Load "paquetes" object in nodes
+       clusterEvalQ(cl, lapply(paquetes, require, character.only = TRUE))     # Load packages in nodes
+       clusterExport(cl, "compute_wkp_mw_ym", env = .GlobalEnv)               # Load global environment objects in nodes
+       clusterExport(cl, c("dt", "periods", "in_mw", "in_lodes", "outstub", 
+                           "geo", "w_var", "r_var", "dt_od", "mw_var", "jobs_vars"), 
+                     env = environment())                                     # Load local environment objects in nodes
+       
+       # Build wkp MW for each period
+       dt_mw <- parLapply(cl, periods, function(ym) {
+         compute_wkp_mw_ym(ym, odm = dt_od, dt_geo = dt,
+                          .geo = geo, .w_var = w_var, .r_var = r_var)
+       })
+       stopCluster(cl)
+       
+       dt_mw <- rbindlist(dt_mw)
+       
+       # When all job flows are zero the wkp MW is returned to be zero
+       # We NA those cases
+       for (var in names(dt_mw)[grepl("mw_wkp", names(dt_mw))]) {
+         stopifnot(
+           all.equal(log(7.25), dt_mw[get(var) > 0, min(get(var))],
+                     tolerance = 0.00001)
+         )
+         dt_mw[get(var) == 0, c(var) := NA_real_]
+       }
+       
+       dt_mw[, month := as.numeric(format(dt_mw$year_month, "%m"))]
+       dt_mw[, year  := as.numeric(format(dt_mw$year_month, "%Y"))]
+       dt_mw[, year_month := NULL]
+       
+       # Save data
+       save_data(dt_mw, key = c(geo, "year", "month"),
+                 filename = file.path(outstub, sprintf("%s_mw_wkp_%s.dta", geo, yy)),
+                 logfile  = log_file)
+       fwrite(dt_mw, 
+              file = file.path(outstub, sprintf("%s_mw_wkp_%s.csv", geo, yy)))
+     }
+   }
+ }
> 
> load_statutory <- function(instub, geo) {
+   
+   if (geo == "countyfips"){
+     dt <- fread(file.path(instub, "county_statutory_mw.csv"),
+                 colClasses = c(countyfips = "character"))
+   } else {
+     dt <- fread(file.path(instub, "zip_statutory_mw.csv"),
+                 colClasses = c(zipcode = "character"))
+   }
+   dt[, year_month := as.yearmon(paste0(year, "-", month))]
+   
+   return(dt)
+ }
> 
> load_od_matrix <- function(instub, yy, .geo, .w_var, .r_var) {
+   
+   od_files <- list.files(file.path(instub, yy), 
+                          pattern = sprintf("od%s*", substr(.geo, 1, 3)),
+                          full.names = T)
+   od_files <- add_missing_state_years(od_files, instub, .geo, yy)
+   
+   dt_od <- rbindlist(
+       lapply(od_files, function(ff) {
+         return(fread(file.path(ff),
+                      colClasses = list(character = c(.w_var, .r_var))))
+       })
+     )
+   
+   # Drop flows with missing zip code name which correspond to non-assigned blocks
+   dt_od <- dt_od[get(.w_var) != ""]
+   dt_od <- dt_od[get(.r_var) != ""]
+   
+   # Group zip codes that appear in multiple states
+   jobs_vars <- names(dt_od)[grepl("jobs", names(dt_od))]
+   
+   dt_od <- dt_od[, lapply(.SD, sum),
+                  by = c(.w_var, .r_var),
+                  .SDcols = jobs_vars]
+   
+   setkeyv(dt_od, c(.r_var, .w_var))
+   
+   return(dt_od)
+ }
> 
> compute_shares <- function(dt_od, geos_valid_stat_mw, 
+                            .w_var, .r_var) {
+   
+   jobs_vars <- names(dt_od)[grepl("jobs", names(dt_od))]
+   
+   # Keep residences and workplaces that have a valid MW
+   dt_od <- dt_od[get(.w_var) %in% geos_valid_stat_mw]
+   dt_od <- dt_od[get(.r_var) %in% geos_valid_stat_mw]
+   
+   # Sum all jobs originating in residence zip codes
+   dt_od[, c(paste0("r_", jobs_vars)) := lapply(.SD, sum, na.rm = T),
+         .SDcols = jobs_vars, 
+         by = c(.r_var)]
+   
+   # Compute share of job to each destination for each jobs_var
+   for (var in jobs_vars) {
+     dt_od[, c(gsub("jobs_", "sh_", var)) := get(var)/get(paste0("r_", var))]
+     dt_od[, c(var, paste0("r_", var))    := NULL]
+   }
+   
+   return(dt_od)
+ }
> 
> compute_wkp_mw_ym <- function(ym, odm, dt_geo, .geo, .w_var, .r_var) {
+           
+   dt_ym <- dt_geo[year_month == ym, ]             # Select given date
+   dt_ym[, c(.w_var) := get(.geo)]                 # Create matching variable
+ 
+   vars_to_keep <- c(.w_var, mw_var, "year_month")
+   dt_ym <- dt_ym[, ..vars_to_keep]
+ 
+   dt_ym <- dt_ym[odm, on = .w_var]        # Paste MW to every residence(h)-workplace(w) combination in 'dt_od'
+   dt_ym <- dt_ym[!is.na(year_month),]     # Drop missings (geo not showing up in mw data)
+ 
+   dt_ym <- dt_ym[,
+                  .(mw_wkp_tot            = sum(log(get(mw_var))*sh_tot,               na.rm = T),
+                    mw_wkp_age_under29    = sum(log(get(mw_var))*sh_age_under29,       na.rm = T),
+                    mw_wkp_age_30to54     = sum(log(get(mw_var))*sh_age_30to54,        na.rm = T),
+                    mw_wkp_age_above55    = sum(log(get(mw_var))*sh_age_above55,       na.rm = T),
+                    mw_wkp_earn_under1250 = sum(log(get(mw_var))*sh_earn_under1250,    na.rm = T),
+                    mw_wkp_earn_1250_3333 = sum(log(get(mw_var))*sh_earn_1250_3333,    na.rm = T),
+                    mw_wkp_earn_above3333 = sum(log(get(mw_var))*sh_earn_above3333,    na.rm = T),
+                    mw_wkp_goods_prod     = sum(log(get(mw_var))*sh_goods_producing,   na.rm = T),
+                    mw_wkp_trad_tran_util = sum(log(get(mw_var))*sh_trade_transp_util, na.rm = T),
+                    mw_wkp_other_serv_ind = sum(log(get(mw_var))*sh_other_service_industry, na.rm = T)),
+                  .SDcols = jobs_vars,
+                  by = c(.r_var, "year_month")]
+ 
+   setnames(dt_ym, old = .r_var, new = .geo)
+ 
+   return(dt_ym)
+ }
> 
> 
> main(paquetes, n_cores)
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_res.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2009."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2009.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2010."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2010.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2011."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2011.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2012."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2012.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2013."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2013.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2014."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2014.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2015."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2015.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2016."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2016.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2017."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2017.dta' saved successfully."
[1] "Computing workplace MW for countyfips using shares from year 2018."
[1] "File '../../../drive/derived_large/min_wage_measures/countyfips_mw_wkp_2018.dta' saved successfully."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_res.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2009."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2009.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2010."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2010.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2011."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2011.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2012."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2012.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2013."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2013.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2014."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2014.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2015."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2015.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2016."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2016.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2017."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2017.dta' saved successfully."
[1] "Computing workplace MW for zipcode using shares from year 2018."
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_mw_wkp_2018.dta' saved successfully."
> 
> proc.time()
   user  system elapsed 
4644.00 1414.32 8065.57 


Execute:  R CMD BATCH --no-save "./build_counterfactual.R" build_counterfactual.Rout

R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> library(data.table)
> library(zoo)

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:data.table':

    between, first, last

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> source("add_missing_state_years.R")
> 
> main <- function(){
+   in_mw    <- "../../../drive/derived_large/min_wage_panels"
+   in_lodes <- "../../../drive/base_large/lodes_od"
+   outstub  <- "../../../drive/derived_large/min_wage_measures"
+   log_file <- "../output/data_file_manifest_cfs.log"
+   
+   od_yy = 2017
+   geo   = "zipcode"
+   w_var = paste0("w_", geo)
+   r_var = paste0("r_", geo)
+   cf_stub <- c("10pc", "9usd", "15usd")
+   
+   dt <- fread(file.path(in_mw, "zipcode_cfs.csv"),
+                   colClasses = c(zipcode = "character"))
+   dt[, year_month := as.yearmon(paste0(year, "-", month))]
+   
+   periods <- unique(dt$year_month)
+   
+   od_files <- list.files(file.path(in_lodes, od_yy), 
+                          pattern = sprintf("odzip*"),
+                          full.names = T)
+   od_files <- add_missing_state_years(od_files, in_lodes, geo, od_yy)
+   
+   # Load od matrix
+   dt_od <- rbindlist(
+     lapply(od_files, function(ff) load_od_matrix(ff, geo, w_var, r_var))
+   )
+   
+   jobs_vars <- names(dt_od)[grepl("jobs", names(dt_od))]
+ 
+   dt_od     <- clean_od_matrix(dt_od, geo, w_var, r_var, jobs_vars)
+   
+   jobs_vars <- names(dt_od)[grepl("sh", names(dt_od))]
+ 
+   # Build wkp MW data
+   dt.cf <- data.table()
+   for (stub in cf_stub) {
+     dt_stub <- rbindlist(lapply(periods, function(ym) {
+                            compute_wkp_mw_ym(ym, dt_od, copy(dt), stub, jobs_vars,
+                                              geo, w_var, r_var)
+                          }))
+     dt_stub <- add_statutory_mw(dt_stub, dt, stub)
+     
+     dt.cf <- rbindlist(list(dt.cf, dt_stub))
+   }
+   
+   # Add variables
+   dt.cf[, month := as.numeric(format(dt.cf$year_month, "%m"))]
+   dt.cf[, year  := as.numeric(format(dt.cf$year_month, "%Y"))]
+   dt.cf[, year_month := NULL]
+   
+   dt.cf[, mw_res := log(statutory_mw)]
+   
+   # Save data
+   save_data(dt.cf, key = c(geo, "year", "month", "counterfactual"),
+             filename = file.path(outstub, "zipcode_wkp_mw_cfs.dta"),
+             logfile  = log_file)
+   fwrite(dt.cf,
+          file = file.path(outstub, "zipcode_wkp_mw_cfs.csv"))
+ }
> 
> load_od_matrix <- function(ff, geo, workplace_var, residence_var) {
+   
+   if (geo == "countyfips") {
+     od <- fread(file.path(ff),
+                 colClasses = c("r_countyfips" = "character",
+                                "w_countyfips" = "character"))
+   } else {
+     od <- fread(file.path(ff), 
+                 colClasses = c("r_zipcode" = "character",
+                                "w_zipcode" = "character"))
+   }
+   
+   return(od)
+ }
> 
> clean_od_matrix <- function(dt_od, geo, w_var, r_var, jobs_vars) {
+   
+   # Drop flows with missing zip code name which correspond to non-assigned blocks
+   dt_od <- dt_od[get(paste0("r_", geo)) != ""]
+   dt_od <- dt_od[get(paste0("w_", geo)) != ""]
+   
+   # Group zip codes that appear in multiple states
+   dt_od <- dt_od[, lapply(.SD, sum),
+                  by = c(w_var, r_var),
+                  .SDcols = jobs_vars]
+   
+   # Sum all jobs originating in residence zip codes
+   dt_od[, c(paste0("r_", jobs_vars)) := lapply(.SD, sum, na.rm = T) ,
+         .SDcols = jobs_vars, 
+         by = c(r_var)]
+   
+   # Compute share of job to each destination for each jobs_var
+   for (var in jobs_vars) {
+     dt_od[, c(gsub("jobs_", "sh_", var)) := get(var)/get(paste0("r_", var))]
+     dt_od[, c(var, paste0("r_", var))    := NULL]
+   }
+   
+   return(dt_od)
+ }
> 
> compute_wkp_mw_ym <- function(ym, odm, dt_geo, stub, jobs_vars,
+                               .geo, .w_var, .r_var) {
+   
+   mw_var <- paste0("statutory_mw_cf_", stub)      
+   
+   dt_ym <- dt_geo[year_month == ym, ]             # Select given date
+   dt_ym[, c(.w_var) := get(.geo)]                  # Create matching variable
+ 
+   vars_to_keep <- c(.w_var, mw_var, "year_month")
+   dt_ym <- dt_ym[, ..vars_to_keep]
+ 
+   dt_ym <- dt_ym[odm, on = .w_var]         # Paste MW to every residence(h)-workplace(w) combination in 'dt_od'
+   dt_ym <- dt_ym[!is.na(year_month),]     # Drop missings (geo not showing up in mw data)
+ 
+   dt_ym <- dt_ym[,
+                  .(mw_wkp_tot            = sum(log(get(mw_var))*sh_tot,               na.rm = T),
+                    mw_wkp_age_under29    = sum(log(get(mw_var))*sh_age_under29,       na.rm = T),
+                    mw_wkp_age_30to54     = sum(log(get(mw_var))*sh_age_30to54,        na.rm = T),
+                    mw_wkp_age_above55    = sum(log(get(mw_var))*sh_age_above55,       na.rm = T),
+                    mw_wkp_earn_under1250 = sum(log(get(mw_var))*sh_earn_under1250,    na.rm = T),
+                    mw_wkp_earn_1250_3333 = sum(log(get(mw_var))*sh_earn_1250_3333,    na.rm = T),
+                    mw_wkp_earn_above3333 = sum(log(get(mw_var))*sh_earn_above3333,    na.rm = T),
+                    mw_wkp_goods_prod     = sum(log(get(mw_var))*sh_goods_producing,   na.rm = T),
+                    mw_wkp_trad_tran_util = sum(log(get(mw_var))*sh_trade_transp_util, na.rm = T),
+                    mw_wkp_other_serv_ind = sum(log(get(mw_var))*sh_other_service_industry, na.rm = T)),
+                  .SDcols = jobs_vars,
+                  by = c(.r_var, "year_month")]
+ 
+   setnames(dt_ym, old = .r_var, new = .geo)
+ 
+   return(dt_ym)
+ }
> 
> add_statutory_mw <- function(dt.wkp, dt, stub) {
+   
+   statutory_mw_var <- paste0("statutory_mw_cf_", stub)
+   keep_vars <- c("zipcode", "year_month", statutory_mw_var)
+   
+   dt.res <- dt[, ..keep_vars]
+   setnames(dt.res, old = statutory_mw_var, new = "statutory_mw")
+   
+   dt.wkp <- merge(dt.wkp, dt.res,
+                   by = c("zipcode", "year_month"))
+   
+   dt.wkp[, counterfactual := paste0("fed_", stub)]
+   
+   return(dt.wkp)
+ }
> 
> 
> main()
[1] "File '../../../drive/derived_large/min_wage_measures/zipcode_wkp_mw_cfs.dta' saved successfully."
> 
> proc.time()
   user  system elapsed 
  90.67   18.87   80.56 

 make.py ended: 2022-03-25 21:10:00
