
 make.py started: 2020-10-21 13:03:30 /Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/derived/zipcode_month/code 




Execute:  R CMD BATCH --no-save "./ReshapeMergeZillow_zip.R" ReshapeMergeZillow_zip.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> load_packages(c('tidyverse', 'data.table', 'tidycensus'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
> 
> main <- function() {
+    datadir <- '../../../base/zillow_min_wage/output/'
+    tempdir <- '../temp/'
+    
+    filelist <- reshape_zillow_zip_level(infolder = datadir)
+ 
+    merge_zillow(l = filelist, outstub = paste0(tempdir, 'zillow_clean.csv'),
+                 key = c('zipcode', 'date'))
+ }
> 
> reshape_zillow_zip_level <- function(infolder) {
+    
+    filenames <- list.files(infolder)
+    filenames <- filenames[str_detect(filenames, "Zip_*")]
+    filenames <- filenames[!str_detect(filenames, "_Summary.csv")]
+    
+    value_names <- str_replace_all(filenames, "Zip_", "")
+    value_names <- target_varname(value_names)
+    value_names <- str_replace(value_names, ".csv", "")
+ 
+ 
+    id_fullvars <- c("zipcode", "city", "county", "msa", "stateabb")
+ 
+    zillow_data <- mapply(reshape_zillow_file,
+       filename = filenames, valname = value_names,
+       MoreArgs = list(infolder, id_fullvars), SIMPLIFY = F)
+    
+    return(zillow_data)
+ }
> 
> reshape_zillow_file <- function(filename, valname, infolder, id_fullvars) {
+    
+    data <- fread(paste0(infolder, filename), stringsAsFactors = F)
+ 
+    idvars <- colnames(data)
+    idvars <- idvars[!str_detect(idvars, "[0-9]")]
+ 
+    data <- data.table::melt(data,
+                             id.vars = idvars,
+                             variable.name = 'date',
+                             value.name = valname)
+ 
+    missing_id_vars <- setdiff(id_fullvars, idvars)
+    data[, (missing_id_vars):= ""]
+             
+    return(data)
+ }
> 
> merge_zillow <- function(l, outstub, key) {
+ 
+    geovars <- c('zipcode', 'city', 'msa', 'county', 'stateabb')
+ 
+    geovar_df <- lapply(l, function(x) {
+       state_name <- x[,..geovars]
+       state_name <- unique(state_name)
+    })
+    geovar_df <- rbindlist(geovar_df, use.names = T)
+    geovar_df <- unique(geovar_df)
+    geovar_df <- as.data.frame(geovar_df)
+ 
+    geovar_df[geovar_df == ""] <- NA
+ 
+    geovar_df <- setDT(geovar_df)[,lapply(.SD, function(y) y[!is.na(y)]),
+                                   by = c('zipcode', 'city', 'msa', 'county')]
+    
+    geovar_df <- geovar_df[,city := str_replace_all(city, "^Town of ", "")][,
+                            city := str_replace_all(city, " Township$", "")]
+    
+    geovar_df <- geovar_df[,lapply(.SD, function(y) y[!is.na(y)]),
+                            by = c('zipcode', 'city', 'msa', 'county')]
+    geovar_df <- unique(geovar_df)
+    
+    geovar_df <- geovar_df[,totNA := rowSums(is.na(geovar_df))]
+    
+    geovar_df <- geovar_df[,minNA := min(totNA), by = zipcode][
+       totNA == minNA,]
+    
+    setkey(geovar_df, 'zipcode')
+    geovar_df <- geovar_df[J(unique(zipcode)), mult = "first"]
+    
+    geovar_df[,c('totNA', 'minNA') := NULL]
+          
+    
+    exclude_geo <- setdiff(c(geovars, 'date'), key)
+ 
+    l <- lapply(l, function(y) y[, (exclude_geo) := NULL])
+ 
+    file_combined <-  Reduce(function(x,y,m = mvars){merge(x, y, all = T, by = key)}, l)
+    file_combined <- setDT(geovar_df)[file_combined, on = 'zipcode']
+ 
+    data.table::setorder(file_combined, zipcode, date)
+ 
+    file_combined[,date := str_replace_all(date, "-", "_")]
+    
+    save_data(file_combined, filename = outstub, 
+              key = key, nolog = TRUE)
+ }
> 
> target_varname <- function(x) {
+ 
+    x <- str_replace_all(x, "AllHomes", "SFCC")
+    x <- str_replace_all(x, "SingleFamilyResidence", "SF")
+    x <- str_replace_all(x, "Condominium", "C")
+    x <- str_replace_all(x, "Condominum", "C")
+    x <- str_replace_all(x, "1Bedroom", "1BR")
+    x <- str_replace_all(x, "1bedroom", "1BR")
+    x <- str_replace_all(x, "2Bedroom", "2BR")
+    x <- str_replace_all(x, "2bedroom", "2BR")
+    x <- str_replace_all(x, "3Bedroom", "3BR")
+    x <- str_replace_all(x, "3bedroom", "3BR")
+    x <- str_replace_all(x, "4Bedroom", "4BR")
+    x <- str_replace_all(x, "4bedroom", "4BR")
+    x <- str_replace_all(x, "5BedroomOrMore", "5BR")
+    x <- str_replace_all(x, "CondoCoop", "CC")
+    x <- str_replace_all(x, "Sfr", "SF")
+    x <- str_replace_all(x, "DuplexTriplex", "MFdxtx")
+    x <- str_replace_all(x, "Mfr5PLus", "MF5")
+    x <- str_replace_all(x, "BottomTier", "low_tier")
+    x <- str_replace_all(x, "MiddleTier", "mid_tier")
+    x <- str_replace_all(x, "TopTier", "top_tier")
+    x <- str_replace_all(x, "MultiFamilyResidenceRental", "MF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "PlusMultifamily", "MF")
+ 
+    x <- str_replace_all(x, "ListingsWithPriceReductions", "listings_pricedown")
+    x <- str_replace_all(x, "Zhvi", "zhvi")
+    x <- str_replace_all(x, "Zri", "zri")
+       
+    x <- str_replace_all(x, "Listing", "listing")
+    x <- str_replace_all(x, "Median", "med")
+    x <- str_replace_all(x, "Price", "price")
+    x <- str_replace_all(x, "PerSqft", "psqft")
+    x <- str_replace_all(x, "PctOf", "pct")
+    x <- str_replace_all(x, "Reductions", "reductions")
+    x <- str_replace_all(x, "Reduction", "reduction")
+    x <- str_replace_all(x, "Rental", "rent")
+    x <- str_replace_all(x, "Homes", "homes")
+    x <- str_replace_all(x, "Homes", "homes")
+    x <- str_replace_all(x, "With", "")
+    
+    return(x)
+ }
> 
> 
> main()
[1] "File '../temp/zillow_clean.csv' saved successfully."
There were 48 warnings (use warnings() to see them)
> 
> proc.time()
   user  system elapsed 
269.220  65.744  84.310 


Execute:  R CMD BATCH --no-save "./addMinWage.R" addMinWage.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> load_packages(c('tidyverse', 'data.table', 'matrixStats'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count

> 
> main <- function(){
+    datadir   <- '../../../base/zillow_min_wage/output/'
+    tempdir   <- "../temp/"
+    log_file  <- "../output/data_file_manifest.log"
+    
+    data <- load_data(infile_zillow  = paste0(tempdir, 'zillow_clean.csv'), 
+                      infile_statemw = paste0(datadir, 'VZ_state_monthly.csv'), 
+                      infile_localmw = paste0(datadir, 'VZ_substate_monthly.csv'),
+                      infile_place   = paste0(datadir, 'places10.csv'),
+                      infile_county  = paste0(datadir,'zip_county10.csv'),
+                      infile_zipplace = paste0(datadir,'zip_places10.csv'))
+    
+    data <- assemble_data(data)
+ 
+    data <- create_minwage_eventvars(data)
+ 
+    save_data(df = data, key = c('zipcode', 'date'),
+              filename = paste0(tempdir, 'data_clean.csv'), nolog = TRUE)
+ }
> 
> load_data <- function(infile_zillow, infile_statemw, infile_localmw,
+                       infile_place, infile_county, infile_zipplace) {
+ 
+ 
+    dfZillow <- fread(infile_zillow)
+    
+    dfZillow[,zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    dfZillow[,date := as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+ 
+ 
+    dfStatemw <- fread(infile_statemw)
+    setnames(dfStatemw, old = c('monthly_date', 'mw'), new = c('date', 'state_mw'))
+    dfStatemw[,date := str_replace_all(date, "m", "_")][,
+               date := as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfStatemw[,statefips := str_pad(as.character(statefips), 2, pad = 0)]
+ 
+    dfLocalmw <- fread(infile_localmw)
+    setnames(dfLocalmw, old = c('monthly_date'), new = c('date'))
+    dfLocalmw[,date := str_replace_all(date, "m", "_")][,
+               date := as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfLocalmw[,statefips := str_pad(as.character(statefips), 2, pad = 0)]
+    dfLocalmw[,iscounty := str_extract_all(locality, " County")][,
+               iscounty := ifelse(iscounty == " County", 1, 0)]
+ 
+ 
+    mw_vars <- names(dfLocalmw)
+    mw_vars <- mw_vars[grepl("mw", mw_vars)]
+    
+    county_mw_vars <- paste0("county_", mw_vars)
+    local_mw_vars <- paste0("local_", mw_vars)
+    
+ 
+    dfCountymw <- dfLocalmw[iscounty == 1,][,iscounty := NULL]
+    setnames(dfCountymw, old = c('locality', mw_vars), 
+                         new = c('county', county_mw_vars))
+    
+    dfLocalmw <- dfLocalmw[iscounty == 0,][,iscounty := NULL]
+    setnames(dfLocalmw, old = c('locality', mw_vars),
+                        new = c('placename', local_mw_vars))
+    
+ 
+    usps_zip_to_zcta <- load_xwalk_zip_zcta('../../../raw/crosswalk/zip_to_zcta_2019.xlsx')
+    
+ 
+    place10 <- fread(infile_place)
+    setnames(place10, old = c("state"), new = c("statefips"))
+    place10[,statefips := str_pad(as.character(statefips), 2, pad = 0)]
+    place10[,place_code := str_pad(as.character(place_code), 5, pad = 0)]
+    # place10 <- place10[placetype=="city",]
+ 
+    zip_places10 <- fread(infile_zipplace, 
+                          colClasses = c("place_code" = "character", "zcta" = "character",
+                                         "statefips"  = "character"))
+    setorder(zip_places10, zcta)
+ 
+    zip_places10 <- place10[zip_places10, on = c('statefips', 'place_code')]
+    zip_places10 <- zip_places10[pct_zip_houses_inplace >= 50,]
+    zip_places10 <- left_join(zip_places10, usps_zip_to_zcta, by = c('zcta'))
+    
+    
+    zip_county10 <- fread(infile_county, 
+                         colClasses = c("zcta" = "character", "statefips" = "character",
+                                        "county_code" = "character", "countyfips" = "character"))
+    setorder(zip_county10, zcta)
+ 
+    zip_county10 <- zip_county10[pct_zip_houses_incounty >= 50,]
+    zip_county10[,ind := max(pct_zip_pop_incounty, na.rm = T),by = 'zcta'][,
+                  ind := ifelse(ind == pct_zip_pop_incounty, 1, 0)]
+ 
+    zip_county10 <- zip_county10[ind == 1,]
+    zip_county10 <- zip_county10[,ind := NULL]
+    zip_county10 <- left_join(zip_county10, usps_zip_to_zcta, by = c('zcta'))
+    
+ 
+    return(list('df_zillow'    = dfZillow,     'df_state_mw' = dfStatemw,
+                'df_county_mw' = dfCountymw,   'df_local_mw' = dfLocalmw,
+                'zip_county'   = zip_county10, 'zip_place'   = zip_places10))
+ }
> 
> load_xwalk_zip_zcta <- function(path) {
+    df <- readxl::read_excel(path)
+    setnames(df, old = c('ZIP_CODE', 'ZCTA'), new = c('zipcode', 'zcta'))
+    df <- df[,c('zipcode', 'zcta')]
+ 
+    return(df)
+ }
> 
> assemble_data <- function(data) {
+ 
+    DF <- data[['df_zillow']]
+ 
+    DF <- left_join(DF, data[['df_state_mw']], by=c('stateabb', 'date'))
+    DF <- left_join(DF, data[['zip_county']], by=c('statefips', 'stateabb', 'zipcode'))
+    DF <- subset(DF, select = -c(statename, county.x, county_code))
+    setnames(DF, old = c("county.y"), new = "county")
+ 
+    DF <- left_join(DF, data[['zip_place']], by=c('statefips', 'stateabb', 'zipcode'))
+    DF <- subset(DF, select = -c(zcta.x))
+    setnames(DF, old = c("zcta.y"), new = "zcta")
+ 
+    DF <- left_join(DF, data[['df_county_mw']], by=c('statefips', 'stateabb', 'county', 'date'))
+    DF <- subset(DF, select = -c(statename))
+ 
+    DF <- left_join(DF, data[['df_local_mw']], by=c('statefips', 'stateabb', 'placename', 'date'))
+    DF <- subset(DF, select = -c(statename))
+    
+    colorder1 <- c('date', 'zipcode', 'zcta', 'place_code', 'placename', 'placetype', 
+                   'city', 'msa', 'countyfips', 'county', 'statefips', 'stateabb')
+    colorder2 <- setdiff(colorder1, names(DF))
+ 
+    setcolorder(DF, c(colorder1,colorder2))
+ 
+    return(as.data.table(DF))
+ }
> 
> create_minwage_eventvars <- function(x){
+    
+    mw_vars <- names(x)
+    mw_vars <- mw_vars[grepl("mw", mw_vars)]
+    mw_vars <- mw_vars[!grepl("abovestate", mw_vars)]
+    
+    mw_vars_regular <- mw_vars[!grepl("smallbusiness", mw_vars)]
+    
+    mw_vars_smallb <- c(mw_vars[grepl('smallbusiness', mw_vars)], 
+                        'fed_mw', 'state_mw') 
+ 
+    x[,actual_mw := rowMaxs(as.matrix(x[,..mw_vars_regular]), na.rm = T)][,
+       actual_mw:= ifelse(actual_mw == -Inf, NA, actual_mw)]
+    
+    
+    x[,actual_mw_smallbusiness := rowMaxs(as.matrix(x[,..mw_vars_smallb]), na.rm = T)][,
+       actual_mw_smallbusiness := ifelse(actual_mw_smallbusiness == -Inf, NA, actual_mw_smallbusiness)]
+    
+    
+    which_colmax <- function(df, cols_to_compare) {
+       this_cols <- df[, ..cols_to_compare]
+       
+ 
+       this_cols2 <- data.table(value=unlist(this_cols, use.names = F), 
+                                colid = 1:nrow(this_cols), rowid = rep(names(this_cols), each=nrow(this_cols)))
+ 
+       setkey(this_cols2, colid, value)
+       
+       which.col <- this_cols2[J(unique(colid), this_cols2[J(unique(colid)), value, mult="last"]), rowid, mult="last"]
+       
+       df[, 'which_mw':= which.col][, 'which_mw' := str_remove_all(which_mw, '_mw$')]
+ 
+       return(df)
+    }
+    x <- which_colmax(df = x, cols_to_compare = mw_vars_regular)
+    
+    
+    setorderv(x, cols = c('zipcode', 'date'))
+    x[,Dactual_mw := actual_mw - shift(actual_mw), by = 'zipcode'][,
+       mw_event := ifelse(Dactual_mw > 0 , 1, 0)]
+    x[,Dactual_mw_smallbusiness := actual_mw_smallbusiness - shift(actual_mw_smallbusiness), by = 'zipcode'][,
+       mw_event_smallbusiness := ifelse(Dactual_mw_smallbusiness > 0 , 1, 0)]
+    
+    x[, which_mw2 := paste0(which_mw, '_event')]
+    inds <- unique(x$which_mw2)
+    x[Dactual_mw > 0, (inds) := lapply(inds, function(x) which_mw2 == x)]
+    x[, which_mw2 := NULL]
+    x[, (inds):= lapply(.SD, function(y) {ifelse(is.na(y), 0, y)}), .SDcols = inds]
+ 
+    return(x)
+ }
> 
> main()
[1] "File '../temp/data_clean.csv' saved successfully."
Warning messages:
1: In `[.data.table`(x, , ..mw_vars_regular) :
  Both 'mw_vars_regular' and '..mw_vars_regular' exist in calling scope. Please remove the '..mw_vars_regular' variable in calling scope for clarity.
2: In `[.data.table`(x, , ..mw_vars_smallb) :
  Both 'mw_vars_smallb' and '..mw_vars_smallb' exist in calling scope. Please remove the '..mw_vars_smallb' variable in calling scope for clarity.
> 
> proc.time()
   user  system elapsed 
169.830  16.405 133.487 

 make.py ended: 2020-10-21 13:07:10
