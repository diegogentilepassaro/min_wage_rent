
 make.py started: 2021-03-17 08:51:47 C:\Users\shermo\Documents\GitHub\min_wage_rent\derived\min_wage\code 




Execute:  R CMD BATCH --no-save "./build_statutory.R" build_statutory.Rout

R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> 
> load_packages(c("data.table", "zoo", "stringr"))

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> main <- function(){
+    base_geo_dir <- "../../../base/geo_master/output"
+    base_mw_dir  <- "../../../base/min_wage/output"
+    outstub      <- "../../../drive/derived_large/min_wage"
+    log_file     <- "../output/data_file_manifest.log"
+    
+    if (file.exists(log_file)) file.remove(log_file)
+    
+    start_date <- "2010-01-01"
+    end_date   <- "2019-12-31"
+    
+    dt <- build_frame(base_geo_dir, start_date, end_date)
+    
+    dt.mw <- load_mw(base_mw_dir)
+    
+    dt <- assemble_statutory_mw(dt, dt.mw)
+    
+    dt.zip    <- collapse_datatable(copy(dt), key_vars = c("zipcode",    "year", "month"))
+    dt.county <- collapse_datatable(copy(dt), key_vars = c("countyfips", "year", "month"))
+    
+    save_data(dt.zip, key = c("zipcode", "year", "month"),
+              filename = file.path(outstub, "zip_statutory_mw.csv"),
+              logfile  = log_file)
+    save_data(dt.zip, key = c("zipcode", "year", "month"),
+              filename = file.path(outstub, "zip_statutory_mw.dta"),
+              nolog    = TRUE)
+ 
+    save_data(dt.county, key = c("countyfips", "year", "month"),
+              filename = file.path(outstub, "county_statutory_mw.csv"),
+              logfile  = log_file)
+    save_data(dt.county, key = c("countyfips", "year", "month"),
+              filename = file.path(outstub, "county_statutory_mw.dta"),
+              nolog    = TRUE)
+ }
> 
> build_frame <- function(instub, start_date, end_date, freq = "month") {
+    
+    dt <- fread(file.path(instub, "zip_county_place_usps_master.csv"))
+    
+    dt[, statefips := str_pad(as.character(statefips), 2, pad = 0)]
+    
+    setnames(dt, old = c('state_abb', 'place_name', 'county_name'), 
+                 new = c('stateabb',  'placename',  'county'))
+    
+    dt[, county    := gsub("\\s*\\w*$", " County", dt$county)]
+    dt[, placename := gsub(",\\s*\\w*$", "", dt$placename)]     # Drop final state abb after comma, e.g. ", MA" 
+    dt[, placename := gsub("\\s*\\w*$", "",  dt$placename)]     # Drop final word "city"
+    
+    dt <- manual_corrections(dt)
+    
+    dt[, c('from', 'to') := list(as.Date(start_date), 
+                                 as.Date(end_date))]
+    
+    dt <- dt[, list(zcta, zipcode, place_code, placename, countyfips, county,
+                    statefips, stateabb, cbsa10, cbsa10_name, houses_zcta_place_county,
+                    daily_date = seq(from, to, by = freq)), 
+               by = 1:nrow(dt)][, nrow := NULL]
+    
+    dt[, c('year', 'month') :=  .(as.numeric(format(as.Date(daily_date), "%Y")),
+                                  as.numeric(format(as.Date(daily_date), "%m")))]
+    
+    if (freq == "month") {
+       dt[, year_month := as.yearmon(daily_date)]
+       dt[, daily_date := NULL]
+    }
+    
+    return(dt)
+ }
> 
> manual_corrections <- function(dt) {
+    dt[placename == 'Louisville/Jefferson County metro government (balance)', placename := 'Lousville']
+    dt[placename == 'New York',      placename := 'New York City']
+    dt[placename == 'St. Paul',      placename := 'Saint Paul']
+    dt[placename == 'Daly city',     placename := 'Daly City']
+    
+    return(dt)
+ }
> 
> load_mw <- function(instub) {
+    
+    # State MW
+    state_mw <- fread(file.path(instub, "state_monthly.csv"))
+    
+    setnames(state_mw, old = "mw", new = "state_mw")
+    
+    state_mw[, c("year", "month") := .(as.numeric(substr(monthly_date, 1, 4)),
+                                       as.numeric(gsub("m", "", substr(monthly_date, 5, length(monthly_date)))))]
+    state_mw[, c("monthly_date", "statename") := NULL]
+    
+    state_mw[, statefips := str_pad(as.character(statefips), 2, pad = 0)]
+    state_mw[, stateabb  := NULL]
+    
+    # Substate MW
+    local_mw <- fread(file.path(instub, "substate_monthly.csv"))
+    
+    local_mw[, c("year", "month") := .(as.numeric(substr(monthly_date, 1, 4)),
+                                       as.numeric(gsub("m", "", substr(monthly_date, 5, length(monthly_date)))))]
+    local_mw[, c("monthly_date", "statename") := NULL]
+ 
+    local_mw[, statefips := str_pad(as.character(statefips), 2, pad = 0)]
+    local_mw[, iscounty  := 1*grepl("County", locality)]
+    
+    mw_vars        <- names(local_mw)[grepl("mw", names(local_mw))]
+    county_mw_vars <- paste0("county_", mw_vars)
+    local_mw_vars  <- paste0("local_",  mw_vars)
+    
+    county_mw <- local_mw[iscounty == 1, ][, iscounty := NULL]
+    setnames(county_mw, old = c("locality", mw_vars), 
+                        new = c("county",   county_mw_vars))
+    
+    local_mw <- local_mw[iscounty == 0, ][, iscounty := NULL]
+    setnames(local_mw, old = c("locality",  mw_vars),
+                       new = c("placename", local_mw_vars))
+    
+    county_mw <- county_mw[, .(county,    statefips, county_mw,
+                               county_abovestate_mw, year, month)]
+    local_mw <- local_mw[,   .(placename, statefips, local_mw, 
+                               local_abovestate_mw,  year, month)]
+    
+    return(list("state"  = state_mw, 
+                "county" = county_mw, "local" = local_mw))
+ }
> 
> assemble_statutory_mw <- function(dt, dt.mw) {
+    
+    dt <- dt.mw$state[dt,  on = c(             "statefips", "year", "month")]
+    dt <- dt.mw$county[dt, on = c("county",    "statefips", "year", "month")]
+    dt <- dt.mw$local[dt,  on = c("placename", "statefips", "year", "month")]
+    
+    # Compute actual MW
+    dt[, actual_mw := pmax(local_mw, county_mw, state_mw, fed_mw, na.rm = T)]
+    dt[, binding_mw := fcase(
+       pmax(local_mw, county_mw, state_mw, fed_mw, na.rm = T) == fed_mw,    1,  # Fed MW
+       pmax(local_mw, county_mw, state_mw, fed_mw, na.rm = T) == state_mw,  2,  # State MW
+       pmax(local_mw, county_mw, state_mw, fed_mw, na.rm = T) == county_mw, 3,  # County MW
+       pmax(local_mw, county_mw, state_mw, fed_mw, na.rm = T) == local_mw,  4,  # City MW
+       default = NA
+    )]
+    
+    dt[, actual_mw_ignore_local := pmax(state_mw, fed_mw, na.rm = T)]
+    dt[, binding_mw_ignore_local := fcase(
+       pmax(state_mw, fed_mw, na.rm = T) == fed_mw,    1,  # Fed MW
+       pmax(state_mw, fed_mw, na.rm = T) == state_mw,  2,  # State MW
+       default = NA
+    )]
+    
+    return(dt)
+ }
> 
> collapse_datatable <- function(dt, key_vars = c("zipcode", "year", "month")) {
+    
+    setorder(dt, zipcode, -houses_zcta_place_county)
+    dt.max <- dt[, first(.SD), by = key_vars]
+    
+    dt.wmean <- dt[, .(actual_mw_wg_mean              = weighted.mean(actual_mw, houses_zcta_place_county),
+                       actual_mw_ignore_local_wg_mean = weighted.mean(actual_mw_ignore_local, houses_zcta_place_county)),
+                   by = key_vars]
+    
+    dt <- dt.wmean[dt.max, on = key_vars]
+    
+    mw_vars <- names(dt)[grepl("mw", names(dt)) & !grepl("abovestate", names(dt))]
+    vars_to_keep <- c(key_vars, "year_month", mw_vars)
+    dt <- dt[, ..vars_to_keep]
+    
+    return(dt)
+ }
> 
> main()
[1] "File '../../../drive/derived_large/min_wage/zip_statutory_mw.csv' saved successfully."
[1] "File '../../../drive/derived_large/min_wage/zip_statutory_mw.dta' saved successfully."
[1] "File '../../../drive/derived_large/min_wage/county_statutory_mw.csv' saved successfully."
[1] "File '../../../drive/derived_large/min_wage/county_statutory_mw.dta' saved successfully."
> 
> proc.time()
   user  system elapsed 
 318.84   22.73  294.62 


Execute:  R CMD BATCH --no-save "./build_experienced.R" build_experienced.Rout

R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> 
> paquetes <- c("data.table", "usmap", "zoo")
> load_packages(paquetes)

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> library(parallel)
> n_cores <- 6
> 
> main <- function(){
+   instub_mw    <- "../../../drive/derived_large/min_wage"
+   instub_lodes <- "../../../drive/base_large/lodes"
+   outstub      <- "../../../drive/derived_large/min_wage"
+   log_file     <- "../output/data_file_manifest.log"
+   
+   dt.zip <- fread(file.path(instub_mw, "zip_statutory_mw.csv"))
+   
+   periods <- unique(dt.zip$year_month)
+   states  <- fips(c(state.abb, 'DC'))
+   
+   # Parallel set-up
+   cl <- makeCluster(n_cores, type = "PSOCK")   # Create cluster. Use type = "FORK" in Mac
+   
+   clusterExport(cl, "paquetes")                                         # Load "paquetes" object in nodes
+   clusterEvalQ(cl, lapply(paquetes, require, character.only = TRUE))    # Load packages in nodes
+   clusterExport(cl, "load_od_matrix", env = .GlobalEnv)                 # Load global environment objects in nodes
+   clusterExport(cl, "assemble_expmw_state", env = .GlobalEnv)           # Load global environment objects in nodes
+   clusterExport(cl, c("dt.zip", "periods", "states", "instub_mw", "instub_lodes", "outstub"), 
+                     env = environment())                                # Load local environment objects in nodes
+ 
+   # Build exp MW data
+   dts.exp <- parLapply(cl, states, function(st) {
+       
+     dt.st <- assemble_expmw_state(st, periods, "actual_mw", dt.zip, instub_lodes)
+     return(dt.st)
+   })
+   
+   dt.exp_mw <- rbindlist(dts.exp)
+   
+   dts.exp_wg_mean <- parLapply(cl, states, function(st) {
+      
+     dt.st <- assemble_expmw_state(st, periods, "actual_mw_wg_mean", dt.zip, instub_lodes)
+     return(dt.st)
+   })
+   stopCluster(cl)
+   
+   dt.exp_mw_wg_mean <- rbindlist(dts.exp)
+   exp_mw_vars <- c("exp_mw_tot", "exp_mw_young", "exp_mw_lowinc")
+   setnames(dt.exp_mw_wg_mean, old = exp_mw_vars,
+                               new = paste0(exp_mw_vars, "_wg_mean"))
+   
+   # Put data together and format
+   dt.exp_mw <- merge(dt.exp_mw, dt.exp_mw_wg_mean, by = c("zipcode", "year_month"))
+   dt.exp_mw[, year_month := as.yearmon(year_month)]
+   dt.exp_mw[, month := format(dt.exp_mw$year_month)]
+   dt.exp_mw[, year  := format(dt.exp_mw$year_month, "%Y")]
+   
+   # Save data
+   save_data(dt.exp_mw, key = c("zipcode", "year", "month"),
+             filename = file.path(outstub, "zip_experienced_mw.csv"),
+             logfile  = log_file)
+   
+   save_data(dt.exp_mw, key = c("zipcode", "year", "month"),
+             filename = file.path(outstub, "zip_experienced_mw.dta"),
+             nolog    = TRUE)
+ }
> 
> assemble_expmw_state <- function(x, periods, mw_var, dt.zip, instub_lodes) {
+    
+   dt.od <- load_od_matrix(x, instub_lodes)
+    
+   # Computes share of treated and experienced MW for every period
+   dts.period <- lapply(periods, function(y, this_st = dt.od, zip = dt.zip) {
+      
+      dt.this_date <- zip[year_month == y, ]       # Select given date
+      dt.this_date[, w_zipcode := zipcode]         # Create matching variable
+      
+      vars_to_keep <- c("w_zipcode", mw_var, "year_month")
+      dt.this_date <- dt.this_date[, ..vars_to_keep]
+      
+      dt.this_date <- dt.this_date[dt.od, on = 'w_zipcode'] # Paste MW to every residence(h)-workplace(w)
+                                                            #  combination in 'dt.od'
+      dt.this_date <- dt.this_date[!is.na(year_month),]     # Drop missings (zipcodes not showing up in mw data)
+    
+      dt.this_date[, c("sh_tot", "sh_young", "sh_lowinc") := 
+                      .((totjob / h_totjob), 
+                        (job_young / h_job_young), 
+                        (job_lowinc / h_job_lowinc))] #compute share of job for each destination
+      
+      dt.this_date <- dt.this_date[, 
+          .(exp_mw_tot    = sum(get(mw_var)*sh_tot,    na.rm = T), 
+            exp_mw_young  = sum(get(mw_var)*sh_young,  na.rm = T), 
+            exp_mw_lowinc = sum(get(mw_var)*sh_lowinc, na.rm = T)), 
+       by = c("h_zipcode", "year_month")
+     ]
+      
+     setnames(dt.this_date, old = "h_zipcode", new = "zipcode")
+    
+     return(dt.this_date)
+   })
+   
+   return(rbindlist(dts.period))
+ }
> 
> load_od_matrix <- function(st, instub) {
+    
+    od <- fread(file.path(instub, paste0('odzip_', st, '.csv')))
+    
+    od[, c('h_totjob', 'h_job_young', 'h_job_lowinc') := lapply(.SD, sum, na.rm = T) , 
+       .SDcols = c('totjob', 'job_young', 'job_lowinc'), 
+       by = 'h_zipcode']
+    
+    setorder(od, h_zipcode, w_zipcode)
+    return(od)
+ }
> 
> main()
[1] "File '../../../drive/derived_large/min_wage/zip_experienced_mw.csv' saved successfully."
[1] "File '../../../drive/derived_large/min_wage/zip_experienced_mw.dta' saved successfully."
> 
> proc.time()
   user  system elapsed 
 327.53   22.78  481.73 

 make.py ended: 2021-03-17 09:04:46
