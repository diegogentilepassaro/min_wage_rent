
 make.py started: 2021-02-12 15:58:48 /Users/gabriborg/Dropbox (Brown)/research/min_wage_rent/derived/min_wage/code 




Execute:  R CMD BATCH --no-save "./make_mw_panel_zip.R" make_mw_panel_zip.Rout

R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../../lib/R/load_packages.R")
> source("../../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

> 
> options(scipen=999)
> load_packages(c('tidyverse', 'data.table', 'bit64', 'purrr', 'readxl', 'parallel', 'matrixStats', 'readstata13', 'usmap'))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ stringr 1.4.0
✔ tidyr   1.1.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ data.table::between() masks dplyr::between()
✖ dplyr::filter()       masks stats::filter()
✖ data.table::first()   masks dplyr::first()
✖ dplyr::lag()          masks stats::lag()
✖ data.table::last()    masks dplyr::last()
✖ purrr::transpose()    masks data.table::transpose()
Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank


Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count

> 
> 
> main <- function() {
+   datadir_mw     <- '../../../base/min_wage/output/'
+   datadir_xwalk  <- '../../../raw/crosswalk/'
+   datadir_mxwalk <- '../../../base/geo_master/output/'
+   datadir_lodes  <- '../../../drive/base_large/output/'
+   outdir         <- '../../../drive/derived_large/output/'
+   log_file       <- "../output/mw_file_manifest.log"
+ 
+   cores <- 1 ## Parallelization doesn't work in Windows
+ 
+   mw_data <- load_mw(instub = datadir_mw)
+   state_mw <- mw_data[['state_mw']]
+   county_mw <- mw_data[['county_mw']]
+   local_mw <- mw_data[['local_mw']]
+   
+   mxwalk <- make_mxwalk(instub = datadir_mxwalk)
+ 
+   zipmw_us <- assemble_mw_US(mxwalk = mxwalk, 
+                                stmw   = state_mw, 
+                                ctymw  = county_mw, 
+                                locmw  = local_mw)  
+   zipmw_us <- zipmw_us[, .(year_month, zipcode, placename, countyfips, county, statefips, stateabb, 
+                            fed_mw, state_mw, county_mw, local_mw, county_abovestate_mw, local_abovestate_mw, 
+                            actual_mw, dactual_mw, treated_mw)][!is.na(zipcode),]
+   
+   target_period <- unique(zipmw_us[['year_month']])
+   
+   #compute for, for each state, share of treated and experienced MW
+   state_fips <- fips(c(tolower(state.abb), 'dc'))
+ 
+   exp_mw <- mclapply(state_fips,
+                      assemble_expmw_state, p = target_period, zip = zipmw_us, input = datadir_lodes,
+                      mc.cores = cores)   # mcapply parallels on Mac. On windows it supports one core only (error otherwise)
+ 
+   exp_mw <- rbindlist(exp_mw)
+   setnames(exp_mw, old  = 'h_zipcode', new = 'zipcode')
+   setorderv(exp_mw, c('zipcode', 'year_month'))
+ 
+   zipmw_us <- exp_mw[zipmw_us, on = c('zipcode', 'year_month')]  
+   
+   geovars          <- c('zipcode', 'year_month', 'placename', 'countyfips', 'county', 'statefips', 'stateabb')
+   statutory_mwvars <- c('fed_mw', 'state_mw', 'county_mw', 'local_mw', 'county_abovestate_mw', 'local_abovestate_mw', 
+                         'actual_mw', 'dactual_mw', 'treated_mw')
+   exp_mvars        <- c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc', 
+                         'exp_mw_totjob', 'exp_mw_job_young', 'exp_mw_job_lowinc')
+ 
+   setcolorder(zipmw_us, c(geovars, statutory_mwvars, exp_mvars))
+   
+   save_data(zipmw_us, 
+            key = c('zipcode', 'year_month'), 
+            filename = paste0(outdir, 'zip_mw.dta'), 
+            logfile = log_file) 
+ }
> 
> 
> load_mw <- function(instub) {
+   #load MW data
+   state_mw <- fread(paste0(instub, 'VZ_state_monthly.csv'))
+   setnames(state_mw, old = c('monthly_date', 'mw'), new = c('date', 'state_mw'))
+   state_mw[,date := str_replace_all(date, "m", "_")][
+     ,year_month := as.Date(paste0(date, "_01"), "%Y_%m_%d")][
+       ,c('date', 'statename'):=NULL]
+   state_mw[,statefips := str_pad(as.character(statefips), 2, pad = 0)]
+   
+   local_mw <- fread(paste0(instub, 'VZ_substate_monthly.csv'))
+   setnames(local_mw, old = c('monthly_date'), new = c('date'))
+   local_mw[,date := str_replace_all(date, "m", "_")][
+     ,year_month := as.Date(paste0(date, "_01"), "%Y_%m_%d")][
+       ,date:=NULL]
+   local_mw[,statefips := str_pad(as.character(statefips), 2, pad = 0)]
+   local_mw[,iscounty := str_extract_all(locality, " County")][,
+                                                               iscounty := ifelse(iscounty == " County", 1, 0)]
+   mw_vars <- names(local_mw)
+   mw_vars <- mw_vars[grepl("mw", mw_vars)]
+   
+   county_mw_vars <- paste0("county_", mw_vars)
+   local_mw_vars <- paste0("local_", mw_vars)
+   
+   
+   county_mw <- local_mw[iscounty == 1,][,iscounty := NULL]
+   setnames(county_mw, old = c('locality', mw_vars), 
+            new = c('county', county_mw_vars))
+   county_mw <- county_mw[, .(county, statefips, stateabb, county_mw, county_abovestate_mw, year_month)]
+   
+   local_mw <- local_mw[iscounty == 0,][,iscounty := NULL]
+   setnames(local_mw, old = c('locality', mw_vars),
+            new = c('placename', local_mw_vars))
+   local_mw <- local_mw[, .(placename, stateabb, statefips, local_mw, local_abovestate_mw, year_month)]
+   
+   return(list('state_mw' = state_mw, 'county_mw' = county_mw, 'local_mw' = local_mw))
+ }
> 
> make_mxwalk <- function(instub) {
+   df <- setDT(read.dta13(paste0(instub, 'zcta_county_place_usps_master_xwalk.csv')))
+ 
+   df <- df[df[, .I[houses_zcta_place_county == max(houses_zcta_place_county)], by = 'zipcode']$V1] 
+   df <- df[df[, .I[1], by = 'zipcode']$V1] #when duplicate zip code, keep the one assigned to a city (as opposed to rural area with code 99999)
+   
+   setnames(df, old = c('state_abb', 'place_name', 'county_name'), new = c('stateabb', 'placename', 'county'))
+   
+   df[, county := gsub("\\s*\\w*$", " County", df$county)]
+   df[, placename := gsub(",\\s*\\w*$", "", df$placename)][, placename := gsub("\\s*\\w*$", "", df$placename)]
+   
+   df <- manual_correction(df)
+   
+   return(df)
+ }
> 
> manual_correction <- function(data) {
+   data[placename=='Louisville/Jefferson County metro government (balance)', placename := 'Lousville']
+   data[placename=='New York', placename := 'New York City']
+   data[placename=='Redwood City', placename := 'Readwood City']
+   data[placename=='St. Paul', placename := 'Saint Paul']
+   data[placename=='Daly City', placename := 'Daly city']
+   #data[zipcode=='94608', placename := 'Emeryville']
+ }
> 
> assemble_mw_US <- function(mxwalk, stmw, ctymw, locmw) {
+   geovars <- c('zipcode', 
+                'placename', 'place_code', 
+                'cbsa10', 'cbsa10_name', 
+                'countyfips', 'county', 
+                'statefips', 'stateabb')
+   dfzip <- mxwalk[, ..geovars]
+   
+   dfzip[, c('from', 'to') := .(as.Date('2010-01-01'), as.Date('2019-12-01'))]
+   dfzip <- dfzip[, list(zipcode, 
+                      placename, place_code, 
+                      cbsa10, cbsa10_name, 
+                      countyfips, county, 
+                      statefips, stateabb,
+                      year_month = seq(from, to, by = 'month')), 
+                  by = 1:nrow(dfzip)][, nrow :=NULL]
+   
+   
+   dfzip <- stmw[dfzip, on = c('stateabb', 'statefips', 'year_month')]
+   dfzip <- ctymw[dfzip, on = c('county', 'statefips', 'stateabb', 'year_month')]
+   dfzip <- locmw[dfzip, on = c('placename', 'statefips', 'stateabb', 'year_month')]
+   
+   #compute actual MW
+   mw_vars <- names(dfzip)
+   mw_vars <- mw_vars[grepl("mw", mw_vars)]
+   mw_vars <- mw_vars[!grepl("abovestate", mw_vars)]
+   
+   dfzip[,actual_mw := rowMaxs(as.matrix(dfzip[,..mw_vars]), na.rm = T)][
+     ,actual_mw := ifelse(actual_mw == -Inf, NA, actual_mw)]
+   dfzip[, dactual_mw := actual_mw - shift(actual_mw, type = 'lag'), by = 'zipcode']
+   dfzip[, treated_mw := fifelse(dactual_mw>0, 1, 0, na = 0)]
+   dfzip[, zipcode:=as.numeric(zipcode)] 
+   return(dfzip)
+ }
> 
> assemble_expmw_state <- function(x, p, zip, input) {
+   this_state <- fread(paste0(input, 'odzip_', x, '.csv'))
+   this_state[, c('h_totjob', 'h_job_young', 'h_job_lowinc') := lapply(.SD, sum, na.rm = T) , 
+             .SDcols = c('totjob', 'job_young', 'job_lowinc'), 
+             by = 'h_zipcode']
+   setorderv(this_state, cols = c('h_zipcode', 'w_zipcode'))
+ 
+   #share of treated and experienced MW for every date
+   p <- lapply(p, function(y, this_st = this_state, zip2 = zip) {
+    this_date_mw <- zip2[year_month==y,][, 'w_zipcode' := zipcode] #select the given date
+    this_state_date <- this_date_mw[, .(w_zipcode, actual_mw, treated_mw, year_month)][this_st, on = 'w_zipcode'] #merge od matrix and MW
+    this_state_date[treated_mw==1, c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc') := lapply(.SD, sum, na.rm = T)
+                    , .SDcols = c('totjob', 'job_young', 'job_lowinc'), by = 'h_zipcode'][
+                      , c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc') := lapply(.SD, max, na.rm = T)
+                      , .SDcols = c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc'), by = 'h_zipcode'][
+                        , c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc') := replace(.SD, .SD==-Inf, 0)
+                        , .SDcols = c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc')] #compute share of treated numerator for each zip
+    
+    this_state_date[, c('sh_treated_totjob', 'sh_treated_job_young', 'sh_treated_job_lowinc') := 
+                      .((sh_treated_totjob / h_totjob), (sh_treated_job_young / h_job_young), (sh_treated_job_lowinc / h_job_lowinc))]
+    
+    this_state_date[, c('sh_totjob', 'sh_job_young', 'sh_job_lowinc') := 
+                      .((totjob / h_totjob), (job_young / h_job_young), (job_lowinc / h_job_lowinc))] #compute share of job for each destination
+    
+    this_state_date <- this_state_date[, .(sh_treated_totjob = first(sh_treated_totjob), 
+                                           sh_treated_job_young = first(sh_treated_job_young), 
+                                           sh_treated_job_lowinc = first(sh_treated_job_lowinc), 
+                                           exp_mw_totjob = sum(actual_mw*sh_totjob, na.rm = T), 
+                                           exp_mw_job_young = sum(actual_mw*sh_job_young, na.rm = T), 
+                                           exp_mw_job_lowinc = sum(actual_mw*sh_job_lowinc, na.rm = T)), by = c('h_zipcode', 'year_month')]
+    this_state_date <- this_state_date[!is.na(year_month),] #remove missings
+    return(this_state_date)
+    
+   })
+   p <- rbindlist(p)
+   return(p)
+ }
> 
> 
> main()
[1] "File '../../../drive/derived_large/output/zip_mw.dta' saved successfully."
[1] "Log file generated successfully."
There were 50 or more warnings (use warnings() to see the first 50)
> 
> proc.time()
    user   system  elapsed 
5616.524   68.969  784.194 

 make.py ended: 2021-02-12 16:11:53
