
 make.py started: 2020-03-17 19:09:32 C:\Users\gabriel\Dropbox (Brown)\research\min_wage_rent\derived\code 




Execute:  R CMD BATCH --no-save "./ReshapeMergeZillow_zip.R" ReshapeMergeZillow_zip.Rout

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Preliminaries
> source("../../lib/R/library.R")
Loading required package: ggplot2

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

Warning messages:
1: package 'eeptools' was built under R version 3.6.3 
2: package 'ggplot2' was built under R version 3.6.2 
3: package 'dplyr' was built under R version 3.6.2 
4: package 'skimr' was built under R version 3.6.3 
> load_packages(c('tidyverse', 'data.table', 'tidycensus'))
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v tibble  2.1.3     v purrr   0.3.3
v tidyr   1.0.0     v stringr 1.4.0
v readr   1.3.1     v forcats 0.4.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()

Attaching package: 'data.table'

The following object is masked from 'package:purrr':

    transpose

The following objects are masked from 'package:dplyr':

    between, first, last

Warning messages:
1: package 'tidyverse' was built under R version 3.6.2 
2: package 'tidyr' was built under R version 3.6.2 
3: package 'purrr' was built under R version 3.6.2 
> 
> main <- function(){
+    datadir <- '../../base/output/'
+    tempdir <- "../temp/"
+    
+    filelist <- reshape_zillow_zip_level(infiles = datadir)
+    merge_zillow(l = filelist, outstub = paste0(tempdir,"zillow_clean.csv"),
+                 key = c('zipcode', 'date'))
+ }
> 
> 
> reshape_zillow_zip_level <- function(infiles){
+    
+    filenames <- list.files(infiles)
+    filenames <- filenames[str_detect(filenames, "Zip_*")]
+    filenames <- filenames[!str_detect(filenames, "_Summary.csv")]
+    
+    value_names <- str_replace_all(filenames, "Zip_", "")
+    value_names <- target_varname(value_names)
+    value_names <- str_replace(value_names, ".csv", "")
+    
+    id_fullvars <- c("zipcode", "city", "county", "msa", "stateabb", "statename")
+    
+    zillow_data <- mapply(function(filename, valname){
+             data <- fread(paste0(infiles, filename), stringsAsFactors = F)
+             idvars <- colnames(data)
+             idvars <- idvars[!str_detect(idvars, "[0-9]")]
+             data <- data.table::melt(data,
+                                      id.vars = idvars,
+                                      variable.name = 'date',
+                                       value.name = valname)
+             missing_id_vars <- setdiff(id_fullvars, idvars)
+             data[, (missing_id_vars):= ""]   
+             return(data)},
+       filename = filenames,
+       valname = value_names,
+       SIMPLIFY = F)
+    
+    return(zillow_data)
+ }
> 
> merge_zillow <- function(l, outstub, key){
+ 
+    geovars <- c('zipcode', 'city', 'msa', 'county', 'statename', 'stateabb')
+    geovar_df <- lapply(l, function(x){
+       state_name <- x[,..geovars]
+       state_name <- unique(state_name)
+    })
+    geovar_df <- rbindlist(geovar_df, use.names = T)
+    geovar_df <- unique(geovar_df)
+    geovar_df <- as.data.frame(geovar_df)
+    geovar_df[geovar_df==""] <- NA
+    geovar_df <- setDT(geovar_df)[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    
+    geovar_df <- geovar_df[, city := str_replace_all(city, "^Town of ", "")][
+       ,city := str_replace_all(city, " Township$", "")]
+    
+    geovar_df <- geovar_df[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    geovar_df <- unique(geovar_df)
+    
+    geovar_df <- geovar_df[,totNA := rowSums(is.na(geovar_df))]
+    
+    geovar_df <- geovar_df[, minNA := min(totNA), by = zipcode][
+       totNA == minNA,]
+    
+    setkey(geovar_df, 'zipcode')
+    geovar_df <- geovar_df[J(unique(zipcode)), mult = "first"]
+    
+    geovar_df[,c('totNA', 'minNA'):=NULL]
+    
+       
+    
+    exclude_geo <- setdiff(c(geovars, 'date'), key)
+ 
+    l <- lapply(l, function(y) y[, (exclude_geo):=NULL])
+    file_combined <-  Reduce(function(x,y,m = mvars){merge(x,y,all = T, by = key)}, l)
+    file_combined <- setDT(geovar_df)[file_combined, on = 'zipcode']
+ 
+    data.table::setorder(file_combined, zipcode, date)
+ 
+    file_combined[,date:=str_replace_all(date, "-", "_")]
+    save_data(file_combined, file = outstub, key = key, nolog = TRUE)
+ }
> 
> target_varname <- function(x){
+    x <- str_replace_all(x, "AllHomes", "SFCC")
+    x <- str_replace_all(x, "SingleFamilyResidence", "SF")
+    x <- str_replace_all(x, "Condominium", "C")
+    x <- str_replace_all(x, "Condominum", "C")
+    x <- str_replace_all(x, "1Bedroom", "1BR")
+    x <- str_replace_all(x, "1bedroom", "1BR")
+    x <- str_replace_all(x, "2Bedroom", "2BR")
+    x <- str_replace_all(x, "2bedroom", "2BR")
+    x <- str_replace_all(x, "3Bedroom", "3BR")
+    x <- str_replace_all(x, "3bedroom", "3BR")
+    x <- str_replace_all(x, "4Bedroom", "4BR")
+    x <- str_replace_all(x, "4bedroom", "4BR")
+    x <- str_replace_all(x, "5BedroomOrMore", "5BR")
+    x <- str_replace_all(x, "CondoCoop", "CC")
+    x <- str_replace_all(x, "Sfr", "SF")
+    x <- str_replace_all(x, "DuplexTriplex", "MFdxtx")
+    x <- str_replace_all(x, "Mfr5PLus", "MF5")
+    x <- str_replace_all(x, "BottomTier", "low_tier")
+    x <- str_replace_all(x, "MiddleTier", "mid_tier")
+    x <- str_replace_all(x, "TopTier", "top_tier")
+    x <- str_replace_all(x, "MultiFamilyResidenceRental", "MF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "PlusMultifamily", "MF")
+ 
+    x <- str_replace_all(x, "ListingsWithPriceReductions", "listings_pricedown")
+    x <- str_replace_all(x, "Zhvi", "zhvi")
+    x <- str_replace_all(x, "Zri", "zri")
+    
+       
+    x <- str_replace_all(x, "Listing", "listing")
+    x <- str_replace_all(x, "Median", "med")
+    x <- str_replace_all(x, "Price", "price")
+    x <- str_replace_all(x, "PerSqft", "psqft")
+    x <- str_replace_all(x, "PctOf", "pct")
+    x <- str_replace_all(x, "Reduction", "reduction")
+    x <- str_replace_all(x, "Rental", "rent")
+    x <- str_replace_all(x, "Homes", "homes")
+    x <- str_replace_all(x, "Homes", "homes")
+    return(x)
+ }
> 
> 
> main()
[1] "File '../temp/zillow_clean.csv' saved successfully."
Warning messages:
1: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-01, 2010-02, 2010-03, 2010-04, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
2: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-03, 2010-04, 2010-05, 2010-06, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
3: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2011-01, 2011-02, 2011-03, 2011-04, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
4: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2011-12, 2012-01, 2012-02, 2012-03, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
5: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
6: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-10, 2010-11, 2010-12, 2011-01, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
7: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
8: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
9: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-03, 2010-04, 2010-05, 2010-06, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
10: In `[.data.table`(geovar_df, , lapply(.SD, function(y) y[!is.na(y)]),  :
  Item 1 of j's result for group 12837 is zero length. This will be filled with 2 NAs to match the longest column in this result. Later groups may have a similar problem but only the first is reported to save filling the warning buffer.
> 
> proc.time()
   user  system elapsed 
 136.21   44.23  159.07 

 make.py ended: 2020-03-17 19:12:13
