
 make.py started: 2020-03-21 16:06:14 C:\Users\shermo\Documents\GitHub\min_wage_rent\derived\code 




Execute:  R CMD BATCH --no-save "./ReshapeMergeZillow_zip.R" ReshapeMergeZillow_zip.Rout

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../lib/R/library.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> load_packages(c('tidyverse', 'data.table', 'tidycensus'))
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.0     v purrr   0.3.3
v tibble  2.1.3     v stringr 1.4.0
v tidyr   1.0.2     v forcats 0.5.0
v readr   1.3.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x data.table::between() masks dplyr::between()
x dplyr::filter()       masks stats::filter()
x data.table::first()   masks dplyr::first()
x dplyr::lag()          masks stats::lag()
x data.table::last()    masks dplyr::last()
x purrr::transpose()    masks data.table::transpose()
> 
> main <- function(){
+    datadir <- '../../base/output/'
+    tempdir <- "../temp/"
+    
+    filelist <- reshape_zillow_zip_level(infiles = datadir)
+    merge_zillow(l = filelist, outstub = paste0(tempdir,"zillow_clean.csv"),
+                 key = c('zipcode', 'date'))
+ }
> 
> reshape_zillow_zip_level <- function(infiles){
+    
+    filenames <- list.files(infiles)
+    filenames <- filenames[str_detect(filenames, "Zip_*")]
+    filenames <- filenames[!str_detect(filenames, "_Summary.csv")]
+    
+    value_names <- str_replace_all(filenames, "Zip_", "")
+    value_names <- target_varname(value_names)
+    value_names <- str_replace(value_names, ".csv", "")
+    
+    id_fullvars <- c("zipcode", "city", "county", "msa", "stateabb", "statename")
+    
+    zillow_data <- mapply(function(filename, valname){
+             data <- fread(paste0(infiles, filename), stringsAsFactors = F)
+             idvars <- colnames(data)
+             idvars <- idvars[!str_detect(idvars, "[0-9]")]
+             data <- data.table::melt(data,
+                                      id.vars = idvars,
+                                      variable.name = 'date',
+                                       value.name = valname)
+             missing_id_vars <- setdiff(id_fullvars, idvars)
+             data[, (missing_id_vars):= ""]   
+             return(data)},
+       filename = filenames,
+       valname = value_names,
+       SIMPLIFY = F)
+    
+    return(zillow_data)
+ }
> 
> merge_zillow <- function(l, outstub, key){
+ 
+    geovars <- c('zipcode', 'city', 'msa', 'county', 'statename', 'stateabb')
+    geovar_df <- lapply(l, function(x){
+       state_name <- x[,..geovars]
+       state_name <- unique(state_name)
+    })
+    geovar_df <- rbindlist(geovar_df, use.names = T)
+    geovar_df <- unique(geovar_df)
+    geovar_df <- as.data.frame(geovar_df)
+    geovar_df[geovar_df==""] <- NA
+    geovar_df <- setDT(geovar_df)[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    
+    geovar_df <- geovar_df[, city := str_replace_all(city, "^Town of ", "")][
+       ,city := str_replace_all(city, " Township$", "")]
+    
+    geovar_df <- geovar_df[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    geovar_df <- unique(geovar_df)
+    
+    geovar_df <- geovar_df[,totNA := rowSums(is.na(geovar_df))]
+    
+    geovar_df <- geovar_df[, minNA := min(totNA), by = zipcode][
+       totNA == minNA,]
+    
+    setkey(geovar_df, 'zipcode')
+    geovar_df <- geovar_df[J(unique(zipcode)), mult = "first"]
+    
+    geovar_df[,c('totNA', 'minNA'):=NULL]
+    
+       
+    
+    exclude_geo <- setdiff(c(geovars, 'date'), key)
+ 
+    l <- lapply(l, function(y) y[, (exclude_geo):=NULL])
+    file_combined <-  Reduce(function(x,y,m = mvars){merge(x,y,all = T, by = key)}, l)
+    file_combined <- setDT(geovar_df)[file_combined, on = 'zipcode']
+ 
+    data.table::setorder(file_combined, zipcode, date)
+ 
+    file_combined[,date:=str_replace_all(date, "-", "_")]
+    save_data(file_combined, file = outstub, key = key, nolog = TRUE)
+ }
> 
> target_varname <- function(x){
+    x <- str_replace_all(x, "AllHomes", "SFCC")
+    x <- str_replace_all(x, "SingleFamilyResidence", "SF")
+    x <- str_replace_all(x, "Condominium", "C")
+    x <- str_replace_all(x, "Condominum", "C")
+    x <- str_replace_all(x, "1Bedroom", "1BR")
+    x <- str_replace_all(x, "1bedroom", "1BR")
+    x <- str_replace_all(x, "2Bedroom", "2BR")
+    x <- str_replace_all(x, "2bedroom", "2BR")
+    x <- str_replace_all(x, "3Bedroom", "3BR")
+    x <- str_replace_all(x, "3bedroom", "3BR")
+    x <- str_replace_all(x, "4Bedroom", "4BR")
+    x <- str_replace_all(x, "4bedroom", "4BR")
+    x <- str_replace_all(x, "5BedroomOrMore", "5BR")
+    x <- str_replace_all(x, "CondoCoop", "CC")
+    x <- str_replace_all(x, "Sfr", "SF")
+    x <- str_replace_all(x, "DuplexTriplex", "MFdxtx")
+    x <- str_replace_all(x, "Mfr5PLus", "MF5")
+    x <- str_replace_all(x, "BottomTier", "low_tier")
+    x <- str_replace_all(x, "MiddleTier", "mid_tier")
+    x <- str_replace_all(x, "TopTier", "top_tier")
+    x <- str_replace_all(x, "MultiFamilyResidenceRental", "MF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "PlusMultifamily", "MF")
+ 
+    x <- str_replace_all(x, "ListingsWithPriceReductions", "listings_pricedown")
+    x <- str_replace_all(x, "Zhvi", "zhvi")
+    x <- str_replace_all(x, "Zri", "zri")
+    
+       
+    x <- str_replace_all(x, "Listing", "listing")
+    x <- str_replace_all(x, "Median", "med")
+    x <- str_replace_all(x, "Price", "price")
+    x <- str_replace_all(x, "PerSqft", "psqft")
+    x <- str_replace_all(x, "PctOf", "pct")
+    x <- str_replace_all(x, "Reduction", "reduction")
+    x <- str_replace_all(x, "Rental", "rent")
+    x <- str_replace_all(x, "Homes", "homes")
+    x <- str_replace_all(x, "Homes", "homes")
+    return(x)
+ }
> 
> 
> main()
[1] "File '../temp/zillow_clean.csv' saved successfully."
Warning messages:
1: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-01, 2010-02, 2010-03, 2010-04, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
2: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-03, 2010-04, 2010-05, 2010-06, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
3: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2011-01, 2011-02, 2011-03, 2011-04, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
4: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2011-12, 2012-01, 2012-02, 2012-03, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
5: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
6: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-10, 2010-11, 2010-12, 2011-01, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
7: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
8: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-02, 2010-03, 2010-04, 2010-05, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
9: In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-03, 2010-04, 2010-05, 2010-06, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
10: In `[.data.table`(geovar_df, , lapply(.SD, function(y) y[!is.na(y)]),  :
  Item 1 of j's result for group 12766 is zero length. This will be filled with 2 NAs to match the longest column in this result. Later groups may have a similar problem but only the first is reported to save filling the warning buffer.
> 
> proc.time()
   user  system elapsed 
 410.57  119.39  173.09 


Execute:  R CMD BATCH --no-save "./addMinWage.R" addMinWage.Rout

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../lib/R/library.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> load_packages(c('tidyverse', 'data.table', 'matrixStats'))
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.0     v purrr   0.3.3
v tibble  2.1.3     v stringr 1.4.0
v tidyr   1.0.2     v forcats 0.5.0
v readr   1.3.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x data.table::between() masks dplyr::between()
x dplyr::filter()       masks stats::filter()
x data.table::first()   masks dplyr::first()
x dplyr::lag()          masks stats::lag()
x data.table::last()    masks dplyr::last()
x purrr::transpose()    masks data.table::transpose()

Attaching package: 'matrixStats'

The following object is masked from 'package:dplyr':

    count

> 
> main <- function(){
+    datadir   <- '../../base/output/'
+    outputdir <- "../../drive/derived_large/output/"
+    tempdir   <- "../temp/"
+    log_file  <- "../output/data_file_manifest.log"
+    
+    data <- load_data(infile_zillow = paste0(tempdir, 'zillow_clean.csv'), 
+                      infile_statemw = paste0(datadir, 'VZ_state_monthly.csv'), 
+                      infile_localmw = paste0(datadir, 'VZ_substate_monthly.csv'), 
+                      infile_place = paste0(datadir, 'places10.csv'), 
+                      infile_county = paste0(datadir,'zip_county10.csv'), 
+                      infile_zipplace = paste0(datadir,'zip_places10.csv'))
+    
+    data <- assemble_data(data)
+    
+    data <- create_minwage_eventvars(data)
+    
+    save_data(df = data, key = c('zipcode', 'date'), 
+              filename = paste0(outputdir, 'data_clean.csv'), logfile = log_file)
+ }
> 
> load_data <- function(infile_zillow, infile_statemw, infile_localmw, infile_place, infile_county, infile_zipplace){
+    dfZillow <- fread(infile_zillow)
+    
+    dfZillow[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    dfZillow[,date := as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfZillow[,county:=NULL]
+    
+ 
+    dfStatemw <- fread(infile_statemw)
+    setnames(dfStatemw, old = c('statefips', 'monthly_date'), new = c('state', 'date'))
+    dfStatemw[,date := str_replace_all(date, "m", "_")][,date:= as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    setnames(dfStatemw, old = c('min_mw', 'mean_mw', 'max_mw'), new = c('min_state_mw', 'mean_state_mw', 'max_state_mw'))
+    
+    dfLocalmw <- fread(infile_localmw)
+    setnames(dfLocalmw, old = c('statefips', 'monthly_date'), new = c('state', 'date'))
+    dfLocalmw[,date := str_replace_all(date, "m", "_")][,date:= as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfLocalmw[,iscounty:=str_extract_all(locality, " County")][,iscounty:= ifelse(iscounty==" County", 1, 0)]
+    
+    dfCountymw <- dfLocalmw[iscounty==1,][,iscounty:=NULL]
+    setnames(dfCountymw, old = c('locality', 'min_mw', 'mean_mw', 'max_mw', 'abovestate'), 
+                         new = c('countyname', 'min_county_mw', 'mean_county_mw', 'max_county_mw', 'countyabovestate'))
+    
+    dfLocalmw <- dfLocalmw[iscounty==0,][,iscounty:=NULL]
+    setnames(dfLocalmw, old = c('locality', 'min_mw', 'mean_mw', 'max_mw', 'abovestate'), 
+                        new = c('placename', 'min_local_mw', 'mean_local_mw', 'max_local_mw', 'localabovestate'))              
+    
+    
+    place10 <- fread(infile_place)
+    place10 <- place10[placetype=="city",] 
+    zip_places10 <- fread(infile_zipplace)
+    setorder(zip_places10, zipcode)
+    zip_places10 <- zip_places10[zippcthouse10>=50,] 
+    zip_places10 <- place10[zip_places10, on = c('state', 'place')]
+    zip_places10[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    
+    
+    zip_county10 <- fread(infile_county)
+    setorder(zip_county10, zipcode)
+    zip_county10 <- zip_county10[zippcthouse10>=50,]
+    zip_county10[, ind := max(zippctpop10, na.rm = T), by = 'zipcode'][, ind:= ifelse(ind==zippctpop10, 1, 0)]
+    zip_county10 <- zip_county10[ind==1,]
+    zip_county10 <- zip_county10[, ind:=NULL]
+    zip_county10[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    
+    
+    zip_county10<- zip_county10[, c('state', 'county', 'countyname', 'zipcode', 'zippctpop10', 'zippcthouse10', 'zippctland')]
+    zip_places10 <- zip_places10[, c('zipcode','place', 'placename', 'placetype', 'placepop10')]
+ 
+    
+    return(list('df_zillow'    = dfZillow,     'df_state_mw' = dfStatemw, 
+                'df_county_mw' = dfCountymw,   'df_local_mw' = dfLocalmw, 
+                'zip_county'   = zip_county10, 'zip_place'   = zip_places10))
+ }
> 
> assemble_data <- function(l) {
+    DF <- l[['df_zillow']]
+    DF <- l[['zip_county']][l[['df_zillow']], on = 'zipcode']
+    DF <- l[['zip_place']][DF, on = 'zipcode']                                                 
+    DF <- l[['df_state_mw']][DF, on = c('state', 'stateabb', 'date')]                               
+    DF <- l[['df_county_mw']][DF, on = c('state', 'statename', 'stateabb', 'countyname', 'date')]   
+    DF <- l[['df_local_mw']][DF, on = c('state', 'statename', 'stateabb', 'placename', 'date')]     
+    
+    colorder1 <- c('date', 'zipcode', 'place', 'placename', 'city', 'msa', 'county', 
+                   'countyname', 'state', 'stateabb', 'statename')
+    colorder2 <- setdiff(colorder1, names(DF))
+    setcolorder(DF, c(colorder1,colorder2))
+    return(DF)
+ }
> 
> create_minwage_eventvars <- function(x){
+    min_mwage_vars<-c('min_fed_mw', 'min_state_mw', 'min_county_mw', 'min_local_mw')
+    mean_mwage_vars<-c('mean_fed_mw', 'mean_state_mw', 'mean_county_mw', 'mean_local_mw')
+    max_mwage_vars<-c('max_fed_mw', 'max_state_mw', 'max_county_mw', 'max_local_mw')
+    
+    x[ , min_actual_mw := 
+         rowMaxs(as.matrix(x[,..min_mwage_vars]), na.rm = T)][ , min_actual_mw:= ifelse(min_actual_mw == -Inf, 
+                                                                                         NA, min_actual_mw)]
+    x[ , mean_actual_mw := 
+         rowMaxs(as.matrix(x[,..mean_mwage_vars]), na.rm = T)][ ,mean_actual_mw:= ifelse(mean_actual_mw == -Inf, 
+                                                                                         NA, mean_actual_mw)]
+    x[ , max_actual_mw := 
+         rowMaxs(as.matrix(x[,..max_mwage_vars]), na.rm = T)][ ,max_actual_mw:= ifelse(max_actual_mw == -Inf,
+                                                                                       NA, max_actual_mw)]
+    
+    setorderv(x, cols = c('zipcode', 'date'))
+    x[,Dmin_actual_mw := min_actual_mw - shift(min_actual_mw), by = 'zipcode'][,min_event := ifelse(Dmin_actual_mw > 0 , 1, 0)]
+    x[,Dmean_actual_mw := mean_actual_mw - shift(mean_actual_mw), by = 'zipcode'][,mean_event := ifelse(Dmean_actual_mw > 0 , 1, 0)]
+    x[,Dmax_actual_mw := max_actual_mw - shift(max_actual_mw), by = 'zipcode'][,max_event := ifelse(Dmax_actual_mw > 0 , 1, 0)]
+     
+    return(x)
+ }
> 
> main()
[1] "File '../../drive/derived_large/output/data_clean.csv' saved successfully."
[1] "Log file generated successfully."
Warning messages:
1: In `[.data.table`(x, , ..min_mwage_vars) :
  Both 'min_mwage_vars' and '..min_mwage_vars' exist in calling scope. Please remove the '..min_mwage_vars' variable in calling scope for clarity.
2: In `[.data.table`(x, , ..mean_mwage_vars) :
  Both 'mean_mwage_vars' and '..mean_mwage_vars' exist in calling scope. Please remove the '..mean_mwage_vars' variable in calling scope for clarity.
3: In `[.data.table`(x, , ..max_mwage_vars) :
  Both 'max_mwage_vars' and '..max_mwage_vars' exist in calling scope. Please remove the '..max_mwage_vars' variable in calling scope for clarity.
> 
> proc.time()
   user  system elapsed 
 188.07   54.76  146.78 


Execute:  StataMP-64 /e do "./label_final_dta.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.1   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user 32-core Stata perpetual license:
       Serial number:  501506205566
         Licensed to:  KU Leuven FEB (CES)
                       KU Leuven

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./label_final_dta.do 

. set more off

. clear all

. adopath + ../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "C:\Program Files\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../lib/stata/gslab_misc/ado"

. adopath + ../../lib/stata/mental_coupons/ado
  [1]  (BASE)      "C:\Program Files\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../lib/stata/gslab_misc/ado"
  [8]              "../../lib/stata/mental_coupons/ado"

. 
. program main 
  1.         local instub  "../../drive/derived_large/output"
  2.         local oustub  "../../drive/derived_large/output"
  3.         local logfile "../output/data_file_manifest.log"
  4. 
.         import delim `instub'\data_clean.csv, delim(",")
  5. 
.         clean_vars
  6.         create_vars
  7.         label_vars
  8. 
.         compress
  9.         save_data `oustub'\zipcode_yearmonth_panel.dta, key(zipcode year_m
> onth) log(`logfile') replace
 10. end 

. 
. program clean_vars
  1.         *clean date
.         gen     year_month = date(date, "YMD")
  2.         replace year_month = mofd(year_month)
  3.         format  year_month %tm
  4. 
.         order year_month, after(date)
  5.         drop date
  6. 
.         drop if missing(year_month)
  7.         drop if missing(zipcode)
  8. 
.         * Remove obs with no data on minimum wage 
.         bys zipcode (year_month): egen no_mw_min_data = min(min_actual_mw)
  9.         bys zipcode (year_month): egen no_mw_mean_data = min(mean_actual_m
> w)
 10.         bys zipcode (year_month): egen no_mw_max_data = min(max_actual_mw)
 11.         drop if missing(no_mw_min_data) & missing(no_mw_mean_data) & missi
> ng(no_mw_max_data)    
 12.         drop no_mw_min_data no_mw_mean_data no_mw_max_data
 13. 
.         *clean place/city name: since city has no missing keep that (BUT ZIP 
> CODE CAN BELONG TO DIFFERENT CITIES!!!!!)
.         * als, there are some 70000s zipcode-date where placename and city do
> esn't match (why)
.         drop placename
 14.         local dropwords = `" " Town$" "^Town of " " Township$" "'
 15.                 foreach w in `dropwords' {
 16.                         replace city = regexr(city, "`w'", "")
 17.         }
 18. end

. 
. program create_vars
  1.         bysort zipcode (year_month): gen trend = _n
  2. 
.         foreach var_type in min mean max {
  3.                 bysort zipcode (year_month): gen dpercent_`var_type'_actua
> l_mw = d`var_type'_actual_mw/`var_type'_actual_mw[_n-1]
  4. 
.                 gen `var_type'_event_month = `var_type'_event == 1
  5.                 sort zipcode year_month
  6.                 replace `var_type'_event_month = 1 if year_month != year_m
> onth[_n-1] + 1  // zipcode changes
  7. 
.                 gen `var_type'_event_month_id = sum(`var_type'_event_month)
  8. 
.                 bysort `var_type'_event_month_id: gen months_since_`var_type'
>  = _n - 1
  9.                 bysort `var_type'_event_month_id: gen months_until_`var_ty
> pe' = _N - months_since_`var_type'
 10. 
.                 bysort `var_type'_event_month_id: replace months_until_`var_t
> ype' = 0 if _N == months_until_`var_type'
 11. 
.                 drop `var_type'_event_month_id `var_type'_event_month
 12.         }
 13. end

. 
. program label_vars 
  1.         foreach var in city msa {
  2.                 encode `var', g(`var'2)
  3.                 order `var'2, after(`var')
  4.                 drop `var'
  5.                 rename `var'2 `var'
  6.         }
  7.         
.         bysort state (statename): replace statename = statename[_N]
  8.         labmask state, values(statename)
  9.         drop statename 
 10. 
.         gen countyfips = string(state, "%02.0f") + string(county, "%03.0f") 
 11.         destring countyfips, replace force 
 12.         order countyfips, after(county)
 13.         labmask countyfips, values(countyname)
 14.         drop countyname
 15. 
.         order placetype, after(stateabb)
 16.         encode placetype, g(ptype2)
 17.         order ptype2, after(placetype)
 18.         drop placetype
 19.         rename ptype2 placetype
 20. 
.         foreach var_type in min mean max {
 21.                 label var months_since_`var_type' "Months since last MW ch
> ange (`var_type'_event)"
 22.                 label var months_until_`var_type' "Months until next MW ch
> ange (`var_type'_event)"
 23.         }
 24. 
.         order zipcode county countyfips msa city state* year_month           
>                                        ///
>                 min_actual_mw dmin_actual_mw min_event months_since_min month
> s_until_min                ///
>                 mean_actual_mw dmean_actual_mw mean_event months_since_mean m
> onths_until_mean   ///
>                 max_actual_mw dmax_actual_mw max_event months_since_max month
> s_until_max                ///
>                 localabovestate countyabovestate *_local_mw *_county_mw *_sta
> te_mw *_fed_mw
 25.         xtset zipcode year_month
 26. end 

. 
. main
(117 vars, 4,597,102 obs)
(4,597,102 real changes made)
(0 observations deleted)
(0 observations deleted)
(51840 missing values generated)
(51840 missing values generated)
(51840 missing values generated)
(51,840 observations deleted)
(1,032 real changes made)
(0 real changes made)
(0 real changes made)
(280,620 missing values generated)
(18,708 real changes made)
(153030 real changes made)
(280,620 missing values generated)
(18,708 real changes made)
(182473 real changes made)
(280,620 missing values generated)
(18,708 real changes made)
(152993 real changes made)
(261,912 real changes made)
countyfips: all characters numeric; replaced as long
       panel variable:  zipcode (unbalanced)
        time variable:  year_month, 1996m4 to 2017m9
                delta:  1 month
  variable msa was long now int
  variable city was long now int
  variable year_month was float now int
  variable months_since_min was float now int
  variable months_until_min was float now int
  variable months_since_mean was float now int
  variable months_until_mean was float now int
  variable months_since_max was float now int
  variable months_until_max was float now int
  variable placetype was long now byte
  variable trend was float now int
  (104,541,026 bytes saved)
(data already sorted by zipcode year_month)
  (0 bytes saved)
===============================================================================
> ===================
File: ../../drive/derived_large/output\zipcode_yearmonth_panel.dta
Key: zipcode year_month
===============================================================================
> ===================
  4545262:125(95101):20614178:1018934106

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
     zipcode |  4,545,262    47359.23    28625.81       1001      99901
  year_month |  4,545,262    566.2711    74.90309        435        692
      county |  4,545,262    82.83482    88.78507          1        840
  countyfips |  4,545,262    29158.93    15311.91       1001      56045
         msa |  4,102,433    415.4452    232.7511          1        817
-------------+---------------------------------------------------------
        city |  4,545,262    4646.132    2693.303          1       9376
       state |  4,545,262     29.0761    15.29442          1         56
    stateabb |          0
min_actual~w |  4,283,350    6.337432    1.251546       4.25      15.24
dmin_actua~w |  4,264,642    .0156145    .1031028         -1       5.81
-------------+---------------------------------------------------------
   min_event |  4,264,642    .0314967    .1746558          0          1
months_si~in |  4,545,262    34.07082    31.31816          0        118
months_un~in |  4,545,262    34.07082    31.31816          0        118
mean_actua~w |  4,283,350    6.338464    1.251309       4.25      15.24
dmean_actu~w |  4,264,642    .0156126    .0990297         -1       5.81
-------------+---------------------------------------------------------
  mean_event |  4,264,642    .0384006    .1921615          0          1
months_si~an |  4,545,262    33.83161    31.26132          0        117
months_un~an |  4,545,262    33.83161    31.26132          0        117
max_actual~w |  4,283,350    6.341183    1.252065       4.25      15.24
dmax_actua~w |  4,264,642     .015611    .1030966         -1       5.81
-------------+---------------------------------------------------------
   max_event |  4,264,642     .031488    .1746325          0          1
months_sin~x |  4,545,262    34.06998    31.28123          0        117
months_unt~x |  4,545,262    34.06998    31.28123          0        117
localabove~e |     71,803    .1785719    .3829961          0          1
countyabov~e |     81,618    .0381411     .191538          0          1
-------------+---------------------------------------------------------
min_local_mw |     71,803    7.921922    1.213262       5.15      15.24
mean_local~w |     71,803    7.923415     1.21458       5.15      15.24
max_local_mw |     71,803    7.924661    1.214666       5.15      15.24
min_county~w |     81,618    7.579807    1.037598       5.15      10.91
mean_count~w |     81,618    7.580182    1.037212       5.15      10.91
-------------+---------------------------------------------------------
max_county~w |     81,618    7.581391    1.036835       5.15      10.91
min_state_mw |  4,283,350    6.333628    1.243151       4.25       11.5
mean_state~w |  4,283,350    6.334639    1.242861       4.25       11.5
max_state_mw |  4,283,350    6.337344    1.243598       4.25       11.5
  min_fed_mw |  4,283,350    5.974723    1.032513       4.25       7.25
-------------+---------------------------------------------------------
 mean_fed_mw |  4,283,350    5.976879    1.032439       4.25       7.25
  max_fed_mw |  4,283,350    5.983079      1.0343       4.25       7.25
       place |  2,500,552     42037.9    23716.81        100      89150
   placetype |  1,760,427           1           0          1          1
  placepop10 |  1,760,427      446968     1332747        224    8175133
-------------+---------------------------------------------------------
 zippctpop10 |  4,545,262     96.5874    9.066588       9.59        100
zippcthou~10 |  4,545,262     96.5493    8.976288      50.04        100
  zippctland |  4,545,262    94.09159    13.91959         .4        100
  istatename |          0
inventorym.. |  1,002,447    125.5842    118.7048          2       2639
-------------+---------------------------------------------------------
i~ssa_publ~c |  1,002,447    125.5695    117.9419          2       2558
listings_~cc |    869,720    12.91859    4.688677   -3.92508   43.20132
listings_~_c |     75,310    11.28691     4.86303  -4.587605   51.01139
listings_p~f |    821,780     13.2085     4.77202   -4.00375   43.21492
med_price~cc |    670,820    9882.556       12039          1    2525000
-------------+---------------------------------------------------------
med_price~_c |     40,460     11902.3    15719.75          1     500000
med_pricec~f |    628,915    10248.45    14414.77          1    1497500
medlis~e_1br |      7,618      252655    216297.2      19800    1580000
medlis~e_2br |     68,681    232920.8    242900.9      19000    4307500
medlis~e_3br |    307,374    247713.2    249556.1      24900    7950000
-------------+---------------------------------------------------------
medlis~e_4br |    157,264    390441.8    347113.8      29900   1.18e+07
medlis~e_5br |     26,932    826986.7     1075884      33750   1.25e+07
medli~e_sfcc |    606,986    275631.2    245011.5      15250    5995000
medlist~e_cc |     55,920    306405.1    328952.6      25250    5750000
medlisting.. |      9,944    485319.7    405275.2      33100    3200000
-------------+---------------------------------------------------------
medlist~e_sf |    592,057    287181.1      274668      16000    7610000
medlis~t_1br |      8,195    321.7776    301.6696   24.79339   2182.056
medlis~t_2br |     86,128    185.4526     179.368   25.54348   2746.914
medlis~t_3br |    373,855    144.0929    115.2637   20.83333   3167.641
medlis~t_4br |    192,984    154.2505    114.3951   25.24747   3364.486
-------------+---------------------------------------------------------
medlis~t_5br |     32,887    223.6562    212.9377   19.69398   2292.814
medli~t_sfcc |    787,115    158.2027    133.5832   15.71615   2799.423
medlist~t_cc |     73,420    267.7662      280.04   28.72907   2802.347
medlisting.. |      7,971       222.1    197.5792   16.98714   1212.375
medlist~t_sf |    750,559    150.3456    106.2391   15.71615   2077.206
-------------+---------------------------------------------------------
medpctpri~cc |    670,820    4.253788    2.055131   .0000345   49.03121
medpctpri~_c |     40,460    4.532588    2.073399   .0002865   41.86047
medpctpric~f |    628,915    4.235417    2.076303   .0000345   49.03121
medren~e_1br |     25,023    1749.435    721.9594        490       4595
medren~e_2br |     36,996    1866.818    910.2993        495       7495
-------------+---------------------------------------------------------
medren~e_3br |     31,152    1747.497    1432.106        630      45000
medren~e_4br |      3,668    2273.084    873.9203       1050       5700
medren~e_5br |        418    3842.593    750.0863       2400       5300
medre~e_sfcc |     96,431    1618.061    910.5778        575      40000
medrent~e_cc |     17,865    2069.196    912.8937        650       6000
-------------+---------------------------------------------------------
medrentpri.. |     11,969    2138.646    737.6854        525     4997.5
m~e_mfr5plus |     73,821    1582.926     691.975        375       6595
medrent~e_sf |     65,714    1535.182    1147.962        575      45000
med~e_studio |     23,528    1522.333    578.8402      612.5       6000
medren~t_1br |     15,276    2.399261    1.014616   .7342233    6.24805
-------------+---------------------------------------------------------
medren~t_2br |     27,580    1.710984    .8328733   .4858842          6
medren~t_3br |     25,323    1.015285    .5796883   .5327668         18
medren~t_4br |      2,468     .883667    1.373555   .5312262       19.5
medren~t_5br |         80    .7798017    .1375125   .6721936   1.270648
medre~t_sfcc |    101,769    1.199469    .9228836   .4305747   22.68051
-------------+---------------------------------------------------------
medrent~t_cc |     15,512    2.129312    1.218023   .7149901   6.545821
medrentpri.. |      3,628    2.842006    1.192825          1   6.271643
m~t_mfr5plus |     56,745    1.733541    .8603527   .5015197    6.21756
medrent~t_sf |     67,792    .9906498    .8153331   .4300588   22.68051
med~t_studio |     19,988    1.323362    1.198637   .4288971   6.824735
-------------+---------------------------------------------------------
medvalueps~c |  3,453,783    124.3085     99.0145         17       1917
pcthomesde~c |  2,806,725    34.82586    27.96951          0        100
pcthomesin~c |  2,806,725    57.77968    29.21136          0        100
pctlistin~cc |    869,720    12.93997    5.250371          0   48.21429
pctlistin~_c |     75,310    11.29557    5.292317          0   55.68182
-------------+---------------------------------------------------------
pctlisting~f |    821,780    13.23046     5.35837          0   48.21429
pricetoren~c |  1,223,342    11.13707    3.603387        .49       71.7
    zhvi_1br |    489,711      156588    122149.6      23400    1999200
    zhvi_2br |  2,259,809    158515.9    134580.1      20200    3362400
    zhvi_3br |  3,091,470    198930.7    170231.9      20400    5185000
-------------+---------------------------------------------------------
    zhvi_4br |  2,549,803    277396.8    237060.5      26700    6090200
    zhvi_5br |  1,270,803    441922.1    440798.2      26700    9931300
   zhvi_sfcc |  3,511,745    197693.6    176848.6      21300    6421400
zhvi_low_t~r |  2,965,295      148494    123355.5      16700    3568100
zhvi_low_t~y |  2,798,587    .0354743    .0969216  -.5354505    1.18107
-------------+---------------------------------------------------------
      zhvi_c |  1,261,202    186188.1    140122.3      27000    3073900
zhvi_mid_t~r |  3,505,557    197735.6    176800.3      21300    6421400
zhvi_mid_t~y |  3,321,350    .0356075    .0878919  -.5211551   .9250646
     zhvi_sf |  3,487,612    208081.3    203816.4      21300    6492000
zhvi_top_t~r |  3,560,896    292649.3    293911.1      27400   1.16e+07
-------------+---------------------------------------------------------
zhvi_top_t~y |  3,375,640    .0359015    .0830207  -.5204126   .9965695
    zri_sfcc |  1,283,424    1426.847    719.8715        411      18391
  zri_sfccmf |  1,285,094    1410.874    689.9231        411      17801
      zri_mf |    692,849    1321.615    566.2132        414      15853
  zri_sfrent |  1,280,394    1460.996    808.8694        411      20951
-------------+---------------------------------------------------------
zripsqft_s~c |  1,203,528    .9457853    .4214586       .276      6.504
       trend |  4,545,262    126.7289    74.90309          1        258
dpercent_mi~ |  4,264,642    .0026994    .0181453  -.0909091   .6504854
dpercent_me~ |  4,264,642    .0026874    .0174206  -.0909091   .6504854
dpercent_ma~ |  4,264,642    .0026986    .0181433  -.0909091   .6504854




(note: file ../../drive/derived_large/output\zipcode_yearmonth_panel.dta not fo
> und)
file ../../drive/derived_large/output\zipcode_yearmonth_panel.dta saved

. 
end of do-file

 make.py ended: 2020-03-21 16:50:24
