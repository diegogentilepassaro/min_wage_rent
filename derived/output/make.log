
 make.py started: 2020-03-22 11:57:56 C:\Users\shermo\Documents\GitHub\min_wage_rent\derived\code 




Execute:  R CMD BATCH --no-save "./ReshapeMergeZillow_zip.R" ReshapeMergeZillow_zip.Rout

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../lib/R/load_packages.R")
> source("../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> 
> load_packages(c('tidyverse', 'data.table', 'tidycensus'))
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.0     v purrr   0.3.3
v tibble  2.1.3     v stringr 1.4.0
v tidyr   1.0.2     v forcats 0.5.0
v readr   1.3.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x data.table::between() masks dplyr::between()
x dplyr::filter()       masks stats::filter()
x data.table::first()   masks dplyr::first()
x dplyr::lag()          masks stats::lag()
x data.table::last()    masks dplyr::last()
x purrr::transpose()    masks data.table::transpose()
> 
> main <- function(){
+    datadir <- '../../base/output/'
+    tempdir <- "../temp/"
+    
+    filelist <- reshape_zillow_zip_level(infiles = datadir)
+    merge_zillow(l = filelist, outstub = paste0(tempdir,"zillow_clean.csv"),
+                 key = c('zipcode', 'date'))
+ }
> 
> reshape_zillow_zip_level <- function(infiles){
+    
+    filenames <- list.files(infiles)
+    filenames <- filenames[str_detect(filenames, "Zip_*")]
+    filenames <- filenames[!str_detect(filenames, "_Summary.csv")]
+    
+    value_names <- str_replace_all(filenames, "Zip_", "")
+    value_names <- target_varname(value_names)
+    value_names <- str_replace(value_names, ".csv", "")
+    
+    id_fullvars <- c("zipcode", "city", "county", "msa", "stateabb", "statename")
+    
+    zillow_data <- mapply(function(filename, valname){
+             data <- fread(paste0(infiles, filename), stringsAsFactors = F)
+             idvars <- colnames(data)
+             idvars <- idvars[!str_detect(idvars, "[0-9]")]
+             data <- data.table::melt(data,
+                                      id.vars = idvars,
+                                      variable.name = 'date',
+                                       value.name = valname)
+             missing_id_vars <- setdiff(id_fullvars, idvars)
+             data[, (missing_id_vars):= ""]   
+             return(data)},
+       filename = filenames,
+       valname = value_names,
+       SIMPLIFY = F)
+    
+    return(zillow_data)
+ }
> 
> merge_zillow <- function(l, outstub, key){
+ 
+    geovars <- c('zipcode', 'city', 'msa', 'county', 'statename', 'stateabb')
+    geovar_df <- lapply(l, function(x){
+       state_name <- x[,..geovars]
+       state_name <- unique(state_name)
+    })
+    geovar_df <- rbindlist(geovar_df, use.names = T)
+    geovar_df <- unique(geovar_df)
+    geovar_df <- as.data.frame(geovar_df)
+    geovar_df[geovar_df==""] <- NA
+    geovar_df <- setDT(geovar_df)[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    
+    geovar_df <- geovar_df[, city := str_replace_all(city, "^Town of ", "")][
+       ,city := str_replace_all(city, " Township$", "")]
+    
+    geovar_df <- geovar_df[, lapply(.SD, function(y) y[!is.na(y)]), by = c('zipcode', 'city', 'msa', 'county')]
+    geovar_df <- unique(geovar_df)
+    
+    geovar_df <- geovar_df[,totNA := rowSums(is.na(geovar_df))]
+    
+    geovar_df <- geovar_df[, minNA := min(totNA), by = zipcode][
+       totNA == minNA,]
+    
+    setkey(geovar_df, 'zipcode')
+    geovar_df <- geovar_df[J(unique(zipcode)), mult = "first"]
+    
+    geovar_df[,c('totNA', 'minNA'):=NULL]
+    
+       
+    
+    exclude_geo <- setdiff(c(geovars, 'date'), key)
+ 
+    l <- lapply(l, function(y) y[, (exclude_geo):=NULL])
+    file_combined <-  Reduce(function(x,y,m = mvars){merge(x,y,all = T, by = key)}, l)
+    file_combined <- setDT(geovar_df)[file_combined, on = 'zipcode']
+ 
+    data.table::setorder(file_combined, zipcode, date)
+ 
+    file_combined[,date:=str_replace_all(date, "-", "_")]
+    save_data(file_combined, file = outstub, key = key, nolog = TRUE)
+ }
> 
> target_varname <- function(x){
+    x <- str_replace_all(x, "AllHomes", "SFCC")
+    x <- str_replace_all(x, "SingleFamilyResidence", "SF")
+    x <- str_replace_all(x, "Condominium", "C")
+    x <- str_replace_all(x, "Condominum", "C")
+    x <- str_replace_all(x, "1Bedroom", "1BR")
+    x <- str_replace_all(x, "1bedroom", "1BR")
+    x <- str_replace_all(x, "2Bedroom", "2BR")
+    x <- str_replace_all(x, "2bedroom", "2BR")
+    x <- str_replace_all(x, "3Bedroom", "3BR")
+    x <- str_replace_all(x, "3bedroom", "3BR")
+    x <- str_replace_all(x, "4Bedroom", "4BR")
+    x <- str_replace_all(x, "4bedroom", "4BR")
+    x <- str_replace_all(x, "5BedroomOrMore", "5BR")
+    x <- str_replace_all(x, "CondoCoop", "CC")
+    x <- str_replace_all(x, "Sfr", "SF")
+    x <- str_replace_all(x, "DuplexTriplex", "MFdxtx")
+    x <- str_replace_all(x, "Mfr5PLus", "MF5")
+    x <- str_replace_all(x, "BottomTier", "low_tier")
+    x <- str_replace_all(x, "MiddleTier", "mid_tier")
+    x <- str_replace_all(x, "TopTier", "top_tier")
+    x <- str_replace_all(x, "MultiFamilyResidenceRental", "MF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "SingleFamilyResidenceRental", "SF")
+    x <- str_replace_all(x, "PlusMultifamily", "MF")
+ 
+    x <- str_replace_all(x, "ListingsWithPriceReductions", "listings_pricedown")
+    x <- str_replace_all(x, "Zhvi", "zhvi")
+    x <- str_replace_all(x, "Zri", "zri")
+    
+       
+    x <- str_replace_all(x, "Listing", "listing")
+    x <- str_replace_all(x, "Median", "med")
+    x <- str_replace_all(x, "Price", "price")
+    x <- str_replace_all(x, "PerSqft", "psqft")
+    x <- str_replace_all(x, "PctOf", "pct")
+    x <- str_replace_all(x, "Reduction", "reduction")
+    x <- str_replace_all(x, "Rental", "rent")
+    x <- str_replace_all(x, "Homes", "homes")
+    x <- str_replace_all(x, "Homes", "homes")
+    return(x)
+ }
> 
> 
> main()
[1] "File '../temp/zillow_clean.csv' saved successfully."
Warning message:
In melt.data.table(data, id.vars = idvars, variable.name = "date",  :
  'measure.vars' [2010-09, 2010-10, 2010-11, 2010-12, ...] are not all of the same type. By order of hierarchy, the molten data value column will be of type 'double'. All measure variables not of type 'double' will be coerced too. Check DETAILS in ?melt.data.table for more on coercion.
> 
> proc.time()
   user  system elapsed 
  41.07    4.68   37.96 


Execute:  R CMD BATCH --no-save "./addMinWage.R" addMinWage.Rout

R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> remove(list = ls())
> source("../../lib/R/load_packages.R")
> source("../../lib/R/save_data.R")

Please cite as: 

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer 


Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

> 
> load_packages(c('tidyverse', 'data.table', 'matrixStats'))
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.0     v purrr   0.3.3
v tibble  2.1.3     v stringr 1.4.0
v tidyr   1.0.2     v forcats 0.5.0
v readr   1.3.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x data.table::between() masks dplyr::between()
x dplyr::filter()       masks stats::filter()
x data.table::first()   masks dplyr::first()
x dplyr::lag()          masks stats::lag()
x data.table::last()    masks dplyr::last()
x purrr::transpose()    masks data.table::transpose()

Attaching package: 'matrixStats'

The following object is masked from 'package:dplyr':

    count

> 
> 
> main <- function(){
+    datadir   <- '../../base/output/'
+    outputdir <- "../../drive/derived_large/output/"
+    tempdir   <- "../temp/"
+    log_file  <- "../output/data_file_manifest.log"
+    
+    data <- load_data(infile_zillow = paste0(tempdir, 'zillow_clean.csv'), 
+                      infile_statemw = paste0(datadir, 'VZ_state_monthly.csv'), 
+                      infile_localmw = paste0(datadir, 'VZ_substate_monthly.csv'), 
+                      infile_place = paste0(datadir, 'places10.csv'), 
+                      infile_county = paste0(datadir,'zip_county10.csv'), 
+                      infile_zipplace = paste0(datadir,'zip_places10.csv'))
+    
+    data <- assemble_data(data)
+    
+    data <- create_minwage_eventvars(data)
+    
+    save_data(df = data, key = c('zipcode', 'date'), 
+              filename = paste0(outputdir, 'data_clean.csv'), logfile = log_file)
+ }
> 
> load_data <- function(infile_zillow, infile_statemw, infile_localmw, infile_place, infile_county, infile_zipplace){
+    dfZillow <- fread(infile_zillow)
+    
+    dfZillow[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    dfZillow[,date := as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfZillow[,county:=NULL]
+    
+ 
+    dfStatemw <- fread(infile_statemw)
+    setnames(dfStatemw, old = c('statefips', 'monthly_date'), new = c('state', 'date'))
+    dfStatemw[,date := str_replace_all(date, "m", "_")][,date:= as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    setnames(dfStatemw, old = c('min_mw', 'mean_mw', 'max_mw'), new = c('min_state_mw', 'mean_state_mw', 'max_state_mw'))
+    
+    dfLocalmw <- fread(infile_localmw)
+    setnames(dfLocalmw, old = c('statefips', 'monthly_date'), new = c('state', 'date'))
+    dfLocalmw[,date := str_replace_all(date, "m", "_")][,date:= as.Date(paste0(date, "_01"), "%Y_%m_%d")]
+    dfLocalmw[,iscounty:=str_extract_all(locality, " County")][,iscounty:= ifelse(iscounty==" County", 1, 0)]
+    
+    dfCountymw <- dfLocalmw[iscounty==1,][,iscounty:=NULL]
+    setnames(dfCountymw, old = c('locality', 'min_mw', 'mean_mw', 'max_mw', 'abovestate'), 
+                         new = c('countyname', 'min_county_mw', 'mean_county_mw', 'max_county_mw', 'countyabovestate'))
+    
+    dfLocalmw <- dfLocalmw[iscounty==0,][,iscounty:=NULL]
+    setnames(dfLocalmw, old = c('locality', 'min_mw', 'mean_mw', 'max_mw', 'abovestate'), 
+                        new = c('placename', 'min_local_mw', 'mean_local_mw', 'max_local_mw', 'localabovestate'))              
+    
+    
+    place10 <- fread(infile_place)
+    place10 <- place10[placetype=="city",] 
+    zip_places10 <- fread(infile_zipplace)
+    setorder(zip_places10, zipcode)
+    zip_places10 <- zip_places10[zippcthouse10>=50,] 
+    zip_places10 <- place10[zip_places10, on = c('state', 'place')]
+    zip_places10[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    
+    
+    zip_county10 <- fread(infile_county)
+    setorder(zip_county10, zipcode)
+    zip_county10 <- zip_county10[zippcthouse10>=50,]
+    zip_county10[, ind := max(zippctpop10, na.rm = T), by = 'zipcode'][, ind:= ifelse(ind==zippctpop10, 1, 0)]
+    zip_county10 <- zip_county10[ind==1,]
+    zip_county10 <- zip_county10[, ind:=NULL]
+    zip_county10[, zipcode := str_pad(as.character(zipcode), 5, pad = 0)]
+    
+    
+    zip_county10<- zip_county10[, c('state', 'county', 'countyname', 'zipcode', 'zippctpop10', 'zippcthouse10', 'zippctland')]
+    zip_places10 <- zip_places10[, c('zipcode','place', 'placename', 'placetype', 'placepop10')]
+ 
+    
+    return(list('df_zillow'    = dfZillow,     'df_state_mw' = dfStatemw, 
+                'df_county_mw' = dfCountymw,   'df_local_mw' = dfLocalmw, 
+                'zip_county'   = zip_county10, 'zip_place'   = zip_places10))
+ }
> 
> assemble_data <- function(l) {
+    DF <- l[['df_zillow']]
+    DF <- l[['zip_county']][l[['df_zillow']], on = 'zipcode']
+    DF <- l[['zip_place']][DF, on = 'zipcode']                                                 
+    DF <- l[['df_state_mw']][DF, on = c('state', 'stateabb', 'date')]                               
+    DF <- l[['df_county_mw']][DF, on = c('state', 'statename', 'stateabb', 'countyname', 'date')]   
+    DF <- l[['df_local_mw']][DF, on = c('state', 'statename', 'stateabb', 'placename', 'date')]     
+    
+    colorder1 <- c('date', 'zipcode', 'place', 'placename', 'city', 'msa', 'county', 
+                   'countyname', 'state', 'stateabb', 'statename')
+    colorder2 <- setdiff(colorder1, names(DF))
+    setcolorder(DF, c(colorder1,colorder2))
+    return(DF)
+ }
> 
> create_minwage_eventvars <- function(x){
+    min_mwage_vars<-c('min_fed_mw', 'min_state_mw', 'min_county_mw', 'min_local_mw')
+    mean_mwage_vars<-c('mean_fed_mw', 'mean_state_mw', 'mean_county_mw', 'mean_local_mw')
+    max_mwage_vars<-c('max_fed_mw', 'max_state_mw', 'max_county_mw', 'max_local_mw')
+    
+    x[ , min_actual_mw := 
+         rowMaxs(as.matrix(x[,..min_mwage_vars]), na.rm = T)][ , min_actual_mw:= ifelse(min_actual_mw == -Inf, 
+                                                                                         NA, min_actual_mw)]
+    x[ , mean_actual_mw := 
+         rowMaxs(as.matrix(x[,..mean_mwage_vars]), na.rm = T)][ ,mean_actual_mw:= ifelse(mean_actual_mw == -Inf, 
+                                                                                         NA, mean_actual_mw)]
+    x[ , max_actual_mw := 
+         rowMaxs(as.matrix(x[,..max_mwage_vars]), na.rm = T)][ ,max_actual_mw:= ifelse(max_actual_mw == -Inf,
+                                                                                       NA, max_actual_mw)]
+    
+    setorderv(x, cols = c('zipcode', 'date'))
+    x[,Dmin_actual_mw := min_actual_mw - shift(min_actual_mw), by = 'zipcode'][,min_event := ifelse(Dmin_actual_mw > 0 , 1, 0)]
+    x[,Dmean_actual_mw := mean_actual_mw - shift(mean_actual_mw), by = 'zipcode'][,mean_event := ifelse(Dmean_actual_mw > 0 , 1, 0)]
+    x[,Dmax_actual_mw := max_actual_mw - shift(max_actual_mw), by = 'zipcode'][,max_event := ifelse(Dmax_actual_mw > 0 , 1, 0)]
+     
+    return(x)
+ }
> 
> main()
[1] "File '../../drive/derived_large/output/data_clean.csv' saved successfully."
[1] "Log file generated successfully."
Warning messages:
1: In require_bit64_if_needed(ans) :
  Some columns are type 'integer64' but package bit64 is not installed. Those columns will print as strange looking floating point data. There is no need to reload the data. Simply install.packages('bit64') to obtain the integer64 print method and print the data again.
2: In `[.data.table`(x, , ..min_mwage_vars) :
  Both 'min_mwage_vars' and '..min_mwage_vars' exist in calling scope. Please remove the '..min_mwage_vars' variable in calling scope for clarity.
3: In `[.data.table`(x, , ..mean_mwage_vars) :
  Both 'mean_mwage_vars' and '..mean_mwage_vars' exist in calling scope. Please remove the '..mean_mwage_vars' variable in calling scope for clarity.
4: In `[.data.table`(x, , ..max_mwage_vars) :
  Both 'max_mwage_vars' and '..max_mwage_vars' exist in calling scope. Please remove the '..max_mwage_vars' variable in calling scope for clarity.
> 
> proc.time()
   user  system elapsed 
 177.23   21.54  157.95 


Execute:  StataMP-64 /e do "./label_final_dta.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.1   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user 32-core Stata perpetual license:
       Serial number:  501506205566
         Licensed to:  KU Leuven FEB (CES)
                       KU Leuven

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./label_final_dta.do 

. set more off

. clear all

. adopath + ../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "C:\Program Files\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../lib/stata/gslab_misc/ado"

. adopath + ../../lib/stata/mental_coupons/ado
  [1]  (BASE)      "C:\Program Files\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../lib/stata/gslab_misc/ado"
  [8]              "../../lib/stata/mental_coupons/ado"

. 
. program main 
  1.         local instub  "../../drive/derived_large/output"
  2.         local oustub  "../../drive/derived_large/output"
  3.         local logfile "../output/data_file_manifest.log"
  4. 
.         import delim `instub'/data_clean.csv, delim(",")
  5. 
.         clean_vars
  6.         create_vars
  7.         label_vars
  8. 
.         compress
  9.         save_data `oustub'/zipcode_yearmonth_panel.dta, key(zipcode year_m
> onth) log(`logfile') replace
 10. end 

. 
. program clean_vars
  1.         *clean date
.         gen     year_month = date(date, "YMD")
  2.         replace year_month = mofd(year_month)
  3.         format  year_month %tm
  4. 
.         order year_month, after(date)
  5.         drop date
  6. 
.         drop if missing(year_month)
  7.         drop if missing(zipcode)
  8. 
.         * Remove obs with no data on minimum wage 
.         bys zipcode (year_month): egen no_mw_min_data = min(min_actual_mw)
  9.         bys zipcode (year_month): egen no_mw_mean_data = min(mean_actual_m
> w)
 10.         bys zipcode (year_month): egen no_mw_max_data = min(max_actual_mw)
 11.         drop if missing(no_mw_min_data) & missing(no_mw_mean_data) & missi
> ng(no_mw_max_data)    
 12.         drop no_mw_min_data no_mw_mean_data no_mw_max_data
 13. 
.         *clean place/city name: since city has no missing keep that (BUT ZIP 
> CODE CAN BELONG TO DIFFERENT CITIES!!!!!)
.         * als, there are some 70000s zipcode-date where placename and city do
> esn't match (why)
.         drop placename
 14.         local dropwords = `" " Town$" "^Town of " " Township$" "'
 15.                 foreach w in `dropwords' {
 16.                         replace city = regexr(city, "`w'", "")
 17.         }
 18. end

. 
. program create_vars
  1.         bysort zipcode (year_month): gen trend = _n
  2. 
.         foreach var_type in min mean max {
  3.                 bysort zipcode (year_month): gen dpct_`var_type'_actual_mw
>  = d`var_type'_actual_mw/`var_type'_actual_mw[_n-1]
  4. 
.                 gen `var_type'_event_month = `var_type'_event == 1
  5.                 sort zipcode year_month
  6.                 replace `var_type'_event_month = 1 if year_month != year_m
> onth[_n-1] + 1  // zipcode changes
  7. 
.                 gen `var_type'_event_month_id = sum(`var_type'_event_month)
  8. 
.                 bysort `var_type'_event_month_id: gen months_since_`var_type'
>  = _n - 1
  9.                 bysort `var_type'_event_month_id: gen months_until_`var_ty
> pe' = _N - months_since_`var_type'
 10. 
.                 bysort `var_type'_event_month_id: replace months_until_`var_t
> ype' = 0 if _N == months_until_`var_type'
 11. 
.                 drop `var_type'_event_month_id `var_type'_event_month
 12.         }
 13. end

. 
. program label_vars 
  1.         foreach var in city msa {
  2.                 encode `var', g(`var'2)
  3.                 order `var'2, after(`var')
  4.                 drop `var'
  5.                 rename `var'2 `var'
  6.         }
  7.         
.         bysort state (statename): replace statename = statename[_N]
  8.         labmask state, values(statename)
  9.         drop statename 
 10. 
.         gen countyfips = string(state, "%02.0f") + string(county, "%03.0f") 
 11.         destring countyfips, replace force 
 12.         order countyfips, after(county)
 13.         labmask countyfips, values(countyname)
 14.         drop countyname
 15. 
.         order placetype, after(stateabb)
 16.         encode placetype, g(ptype2)
 17.         order ptype2, after(placetype)
 18.         drop placetype
 19.         rename ptype2 placetype
 20. 
.         foreach var_type in min mean max {
 21.                 label var months_since_`var_type' "Months since last MW ch
> ange (`var_type'_event)"
 22.                 label var months_until_`var_type' "Months until next MW ch
> ange (`var_type'_event)"
 23.         }
 24. 
.         order zipcode county countyfips msa city state* year_month           
>                                        ///
>                 min_actual_mw dmin_actual_mw min_event months_since_min month
> s_until_min                ///
>                 mean_actual_mw dmean_actual_mw mean_event months_since_mean m
> onths_until_mean   ///
>                 max_actual_mw dmax_actual_mw max_event months_since_max month
> s_until_max                ///
>                 localabovestate countyabovestate *_local_mw *_county_mw *_sta
> te_mw *_fed_mw
 25.         xtset zipcode year_month
 26. end 

. 
. main
(44 vars, 7,692,958 obs)
(7,692,958 real changes made)
(0 observations deleted)
(0 observations deleted)
(95475 missing values generated)
(95475 missing values generated)
(95475 missing values generated)
(95,475 observations deleted)
(1,140 real changes made)
(0 real changes made)
(0 real changes made)
(1,120,098 missing values generated)
(26,669 real changes made)
(229150 real changes made)
(1,120,098 missing values generated)
(26,669 real changes made)
(274279 real changes made)
(1,120,098 missing values generated)
(26,669 real changes made)
(268971 real changes made)
(0 real changes made)
countyfips: all characters numeric; replaced as long
       panel variable:  zipcode (unbalanced)
        time variable:  year_month, 1996m4 to 2019m12
                delta:  1 month
  variable msa was long now int
  variable city was long now int
  variable year_month was float now int
  variable months_since_min was float now int
  variable months_until_min was float now int
  variable months_since_mean was float now int
  variable months_until_mean was float now int
  variable months_since_max was float now int
  variable months_until_max was float now int
  variable placetype was long now byte
  variable trend was float now int
  (174,742,109 bytes saved)
(data already sorted by zipcode year_month)
  (0 bytes saved)
===============================================================================
> ===================
File: ../../drive/derived_large/output/zipcode_yearmonth_panel.dta
Key: zipcode year_month
===============================================================================
> ===================
  7597483:52(53578):305912160:2331541290

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
     zipcode |  7,597,483    48426.78    27595.03       1001      99901
  year_month |  7,597,483    577.0246     82.2744        435        719
      county |  7,597,483     83.3507    83.45062          1        840
  countyfips |  7,597,483    29835.41    15130.56       1001      56045
         msa |  5,984,668    436.7477    244.9903          1        859
-------------+---------------------------------------------------------
        city |  7,597,483    6443.842    3747.067          1      13034
       state |  7,597,483    29.75206    15.11902          1         56
    stateabb |          0
min_actual~w |  7,597,483    6.582028      1.4801       4.25      16.09
dmin_actua~w |  7,570,814    .0157484    .1141452      -5.77       5.87
-------------+---------------------------------------------------------
   min_event |  7,570,814    .0316516    .1750707          0          1
months_si~in |  7,597,483    37.06434    35.26956          0        143
months_un~in |  7,597,483    37.06434    35.26956          0        143
mean_actua~w |  7,597,483     6.58313     1.48056       4.25      16.09
dmean_actu~w |  7,570,814    .0157517    .1159677      -5.77       5.87
-------------+---------------------------------------------------------
  mean_event |  7,570,814    .0384998    .1923996          0          1
months_si~an |  7,597,483    36.78631    35.21717          0        143
months_un~an |  7,597,483    36.78631    35.21717          0        143
max_actual~w |  7,597,483    6.586593    1.483724       4.25      16.63
dmax_actua~w |  7,570,814    .0158986    .1361093         -6          6
-------------+---------------------------------------------------------
   max_event |  7,570,814    .0320047    .1760126          0          1
months_sin~x |  7,597,483    36.99177    35.27228          0        143
months_unt~x |  7,597,483    36.99177    35.27228          0        143
localabove~e |     93,312     .291088    .4542664          0          1
countyabov~e |    105,408    .2000323    .4000261          0          1
-------------+---------------------------------------------------------
min_local_mw |      2,526    9.934418    2.911369       2.77      16.09
mean_local~w |      2,526    10.91521    2.454204      4.685      16.09
max_local_mw |      2,526     11.9259    2.657981        6.6      16.63
min_county~w |      2,215    9.189201    3.304239       2.13      13.25
mean_count~w |      2,215    10.37551    2.245897       5.71      13.75
-------------+---------------------------------------------------------
max_county~w |      2,215     11.4847    1.698158       7.25      14.25
min_state_mw |  7,597,483    6.581532      1.4787       4.25         14
mean_state~w |  7,597,483    6.582416    1.478406       4.25         14
max_state_mw |  7,597,483    6.585444    1.480056       4.25         14
  min_fed_mw |  7,597,483    6.125418    1.053492       4.25       7.25
-------------+---------------------------------------------------------
 mean_fed_mw |  6,504,054     5.93858     1.02376       4.25       7.25
  max_fed_mw |  6,504,054    5.944964    1.025931       4.25       7.25
       place |  3,648,166    41872.93     23865.7        100      89300
   placetype |  2,350,204           1           0          1          1
  placepop10 |  2,350,204    390591.8     1262634         49    8175133
-------------+---------------------------------------------------------
 zippctpop10 |  7,597,483    96.09259    9.688794          0        100
zippcthou~10 |  7,597,483    96.03763    9.564327         50        100
  zippctland |  7,597,483    93.35915    14.75699         .4        100
  istatename |          0
medren~e_2br |    106,315    1764.751    877.7131        475      19500
-------------+---------------------------------------------------------
medren~t_2br |     92,450    1.682024    .8027275   .5015197   12.55461
medrentpri~f |    144,062    1.145787    1.003317   .1039069   24.48466
    zhvi_2br |  5,511,420    146088.1    132845.4       7100    3893638
       trend |  7,597,483    142.9754     82.2744          1        285
dpct_min_a~w |  6,477,385     .002724     .018252  -.0909091   .6504854
-------------+---------------------------------------------------------
dpct_mean_~w |  6,477,385    .0027114     .017495  -.0909091   .6504854
dpct_max_a~w |  6,477,385    .0027231      .01825  -.0909091   .6504854




file ../../drive/derived_large/output/zipcode_yearmonth_panel.dta saved

. 
end of do-file

 make.py ended: 2020-03-22 12:20:21
